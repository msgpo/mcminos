com.badlogic.gdx.Application -> com.a.a.a:
    com.badlogic.gdx.ApplicationListener getApplicationListener() -> a
    com.badlogic.gdx.Graphics getGraphics() -> b
    void log(java.lang.String,java.lang.String) -> a
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void error(java.lang.String,java.lang.String) -> b
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> b
    void debug(java.lang.String,java.lang.String) -> c
    void setLogLevel(int) -> a
    int getType$2826c76() -> c
    com.badlogic.gdx.Preferences getPreferences(java.lang.String) -> a
    void postRunnable(java.lang.Runnable) -> a
    void exit() -> d
    void addLifecycleListener(com.badlogic.gdx.LifecycleListener) -> a
    void removeLifecycleListener(com.badlogic.gdx.LifecycleListener) -> b
com.badlogic.gdx.ApplicationListener -> com.a.a.b:
    void create() -> a
    void resize(int,int) -> a
    void render() -> b
    void pause() -> c
com.badlogic.gdx.Audio -> com.a.a.c:
    com.badlogic.gdx.audio.Sound newSound(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.audio.Music newMusic(com.badlogic.gdx.files.FileHandle) -> b
com.badlogic.gdx.Files -> com.a.a.d:
    com.badlogic.gdx.files.FileHandle getFileHandle(java.lang.String,com.badlogic.gdx.Files$FileType) -> a
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> b
    com.badlogic.gdx.files.FileHandle local(java.lang.String) -> c
    java.lang.String getExternalStoragePath() -> a
    java.lang.String getLocalStoragePath() -> b
com.badlogic.gdx.Files$FileType -> com.a.a.e:
    com.badlogic.gdx.Files$FileType Classpath -> a
    com.badlogic.gdx.Files$FileType Internal -> b
    com.badlogic.gdx.Files$FileType External -> c
    com.badlogic.gdx.Files$FileType Absolute -> d
    com.badlogic.gdx.Files$FileType Local -> e
    com.badlogic.gdx.Files$FileType[] $VALUES -> f
    com.badlogic.gdx.Files$FileType[] values() -> a
com.badlogic.gdx.Game -> com.a.a.f:
    com.badlogic.gdx.Screen screen -> a
    void pause() -> c
    void render() -> b
    void resize(int,int) -> a
    void setScreen(com.badlogic.gdx.Screen) -> a
com.badlogic.gdx.Graphics -> com.a.a.g:
    int getWidth() -> a
    int getHeight() -> b
    int getBackBufferWidth() -> c
    int getBackBufferHeight() -> d
    float getDeltaTime() -> e
    int getFramesPerSecond() -> f
    float getDensity() -> g
    com.badlogic.gdx.Graphics$DisplayMode getDisplayMode() -> h
    boolean supportsExtension(java.lang.String) -> a
    void requestRendering() -> i
com.badlogic.gdx.Graphics$BufferFormat -> com.a.a.h:
    int r -> a
    int g -> b
    int b -> c
    int a -> d
    int depth -> e
    int stencil -> f
    int samples -> g
    boolean coverageSampling -> h
    java.lang.String toString() -> toString
com.badlogic.gdx.Graphics$DisplayMode -> com.a.a.i:
    int width -> a
    int height -> b
    int refreshRate -> c
    int bitsPerPixel -> d
    java.lang.String toString() -> toString
com.badlogic.gdx.Input -> com.a.a.j:
    int getX() -> a
    int getY() -> b
    boolean isTouched(int) -> a
    boolean isButtonPressed(int) -> b
    boolean isKeyPressed(int) -> c
    long getCurrentEventTime() -> c
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> a
com.badlogic.gdx.InputProcessor -> com.a.a.k:
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
    boolean mouseMoved(int,int) -> a
    boolean scrolled(int) -> c
com.badlogic.gdx.LifecycleListener -> com.a.a.l:
    void pause() -> a
    void resume() -> b
    void dispose() -> c
com.badlogic.gdx.Net -> com.a.a.m:
    boolean openURI(java.lang.String) -> a
com.badlogic.gdx.Preferences -> com.a.a.n:
    com.badlogic.gdx.Preferences putBoolean(java.lang.String,boolean) -> a
    com.badlogic.gdx.Preferences putInteger(java.lang.String,int) -> a
    com.badlogic.gdx.Preferences putString(java.lang.String,java.lang.String) -> a
    boolean getBoolean(java.lang.String) -> a
    int getInteger(java.lang.String) -> b
    java.lang.String getString(java.lang.String) -> c
    boolean contains(java.lang.String) -> d
    void flush() -> a
com.badlogic.gdx.Screen -> com.a.a.o:
    void render(float) -> a
    void resize(int,int) -> b
    void pause() -> h_
com.badlogic.gdx.assets.AssetDescriptor -> com.a.a.a.a:
    java.lang.String fileName -> a
    java.lang.Class type -> b
    com.badlogic.gdx.assets.AssetLoaderParameters params -> c
    com.badlogic.gdx.files.FileHandle file -> d
    java.lang.String toString() -> toString
com.badlogic.gdx.assets.AssetErrorListener -> com.a.a.a.b:
    javax.microedition.khronos.opengles.GL wrap$40ce139f() -> a
com.badlogic.gdx.assets.AssetLoaderParameters -> com.a.a.a.c:
    com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback loadedCallback -> a
com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback -> com.a.a.a.d:
    void finishedLoading$190c2c84(com.badlogic.gdx.assets.AssetManager,java.lang.String) -> a
com.badlogic.gdx.assets.AssetLoadingTask -> com.a.a.a.e:
    com.badlogic.gdx.assets.AssetManager manager -> g
    com.badlogic.gdx.assets.AssetDescriptor assetDesc -> a
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener loader$460ca5bd -> h
    com.badlogic.gdx.utils.async.AsyncExecutor executor -> i
    long startTime -> b
    boolean asyncDone -> j
    boolean dependenciesLoaded -> c
    com.badlogic.gdx.utils.Array dependencies -> d
    com.badlogic.gdx.utils.async.AsyncResult depsFuture -> k
    com.badlogic.gdx.utils.async.AsyncResult loadFuture -> l
    java.lang.Object asset -> e
    int ticks -> m
    boolean cancel -> f
    boolean update() -> a
    com.badlogic.gdx.files.FileHandle resolve$7f6e7d9d(com.badlogic.gdx.scenes.scene2d.utils.FocusListener,com.badlogic.gdx.assets.AssetDescriptor) -> a
    void removeDuplicates(com.badlogic.gdx.utils.Array) -> a
    java.lang.Object call() -> b
com.badlogic.gdx.assets.AssetManager -> com.a.a.a.f:
    com.badlogic.gdx.utils.ObjectMap assets -> b
    com.badlogic.gdx.utils.ObjectMap assetTypes -> c
    com.badlogic.gdx.utils.ObjectMap assetDependencies -> d
    com.badlogic.gdx.utils.ObjectSet injected -> e
    com.badlogic.gdx.utils.ObjectMap loaders -> f
    com.badlogic.gdx.utils.Array loadQueue -> g
    com.badlogic.gdx.utils.async.AsyncExecutor executor -> h
    java.util.Stack tasks -> i
    com.badlogic.gdx.assets.AssetErrorListener listener -> j
    int loaded -> k
    int toLoad -> l
    com.badlogic.gdx.utils.Logger log -> a
    java.lang.Object get(java.lang.String) -> a
    java.lang.Object get(java.lang.String,java.lang.Class) -> a
    void unload(java.lang.String) -> b
    boolean isLoaded(java.lang.String) -> d
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener getLoader$14c4541f(java.lang.Class,java.lang.String) -> a
    void load(java.lang.String,java.lang.Class) -> b
    void load(java.lang.String,java.lang.Class,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    boolean update() -> a
    void injectDependencies(java.lang.String,com.badlogic.gdx.utils.Array) -> a
    void injectDependency(java.lang.String,com.badlogic.gdx.assets.AssetDescriptor) -> a
    void addTask(com.badlogic.gdx.assets.AssetDescriptor) -> a
    boolean updateTask() -> d
    void incrementRefCountedDependencies(java.lang.String) -> e
    void handleTaskError(java.lang.Throwable) -> a
    void setLoader$38f7bb95(java.lang.Class,com.badlogic.gdx.scenes.scene2d.utils.FocusListener) -> a
    void setLoader$3943fc0b(java.lang.Class,java.lang.String,com.badlogic.gdx.scenes.scene2d.utils.FocusListener) -> a
    float getProgress() -> b
    void dispose() -> c
    void clear() -> e
    void setReferenceCount(java.lang.String,int) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String) -> c
com.badlogic.gdx.assets.RefCountedContainer -> com.a.a.a.g:
    java.lang.Object object -> a
    int refCount -> b
    void incRefCount() -> a
com.badlogic.gdx.assets.loaders.AsynchronousAssetLoader -> com.a.a.a.a.a:
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
com.badlogic.gdx.assets.loaders.BitmapFontLoader -> com.a.a.a.a.b:
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData data -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.CubemapLoader -> com.a.a.a.a.c:
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapLoaderInfo -> com.a.a.a.a.d:
    com.badlogic.gdx.graphics.CubemapData data -> a
    com.badlogic.gdx.graphics.Cubemap cubemap -> b
    com.badlogic.gdx.Application app -> c
    com.badlogic.gdx.Graphics graphics -> d
    com.badlogic.gdx.Audio audio -> e
    com.badlogic.gdx.Input input -> f
    com.badlogic.gdx.Files files -> g
    com.badlogic.gdx.Net net -> h
    com.badlogic.gdx.graphics.GL20 gl -> i
    com.badlogic.gdx.graphics.GL20 gl20 -> j
    com.badlogic.gdx.graphics.GL30 gl30 -> k
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
    boolean mouseMoved(int,int) -> a
    boolean scrolled(int) -> c
    com.badlogic.gdx.backends.android.AndroidInput newAndroidInput(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> a
    com.badlogic.gdx.graphics.TextureData loadFromFile(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap$Format,boolean) -> a
    void glScissor(int,int,int,int) -> c
    int toBackBufferX(int) -> d
    int toBackBufferY(int) -> e
    float intToFloatColor(int) -> f
    com.badlogic.gdx.graphics.Pixmap getFrameBufferPixmap(int,int,int,int) -> d
    int log2binary(int) -> g
    int shiftLeftLogical(int,int) -> b
    void scaleBackground(com.badlogic.gdx.scenes.scene2d.ui.Image) -> a
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter -> com.a.a.a.a.e:
    com.badlogic.gdx.graphics.Pixmap$Format format -> b
    com.badlogic.gdx.graphics.Cubemap cubemap -> c
    com.badlogic.gdx.graphics.CubemapData cubemapData -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> f
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapU -> g
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapV -> h
com.badlogic.gdx.assets.loaders.FileHandleResolver -> com.a.a.a.a.f:
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
com.badlogic.gdx.assets.loaders.I18NBundleLoader -> com.a.a.a.a.g:
    com.badlogic.gdx.utils.I18NBundle bundle -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter -> com.a.a.a.a.h:
    java.util.Locale locale -> b
    java.lang.String encoding -> c
com.badlogic.gdx.assets.loaders.ModelLoader -> com.a.a.a.a.i:
    com.badlogic.gdx.utils.Array items -> a
    com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters defaultParameters -> b
    com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters) -> a
    com.badlogic.gdx.graphics.g3d.Model loadSync$1e37aad4(com.badlogic.gdx.assets.AssetManager,java.lang.String) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters -> com.a.a.a.a.j:
    com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter textureParameter -> b
com.badlogic.gdx.assets.loaders.MusicLoader -> com.a.a.a.a.k:
    com.badlogic.gdx.audio.Music music -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.ParticleEffectLoader -> com.a.a.a.a.l:
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.ParticleEffectLoader$ParticleEffectParameter -> com.a.a.a.a.m:
com.badlogic.gdx.assets.loaders.PixmapLoader -> com.a.a.a.a.n:
    com.badlogic.gdx.graphics.Pixmap pixmap -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.SkinLoader -> com.a.a.a.a.o:
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter -> com.a.a.a.a.p:
    java.lang.String textureAtlasPath -> b
    com.badlogic.gdx.utils.ObjectMap resources -> c
com.badlogic.gdx.assets.loaders.SoundLoader -> com.a.a.a.a.q:
    com.badlogic.gdx.audio.Sound sound -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.SynchronousAssetLoader -> com.a.a.a.a.r:
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TextureAtlasLoader -> com.a.a.a.a.s:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData data -> a
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter -> com.a.a.a.a.t:
    boolean flip -> b
com.badlogic.gdx.assets.loaders.TextureLoader -> com.a.a.a.a.u:
    com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo info -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo -> com.a.a.a.a.v:
    com.badlogic.gdx.graphics.TextureData data -> a
    com.badlogic.gdx.graphics.Texture texture -> b
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter -> com.a.a.a.a.w:
    com.badlogic.gdx.graphics.Pixmap$Format format -> b
    boolean genMipMaps -> c
    com.badlogic.gdx.graphics.Texture texture -> d
    com.badlogic.gdx.graphics.TextureData textureData -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> g
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapU -> h
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapV -> i
com.badlogic.gdx.audio.Music -> com.a.a.b.a:
    void play() -> a
    void stop() -> b
    void setLooping(boolean) -> a
    void dispose() -> c
    void setOnCompletionListener(com.badlogic.gdx.audio.Music$OnCompletionListener) -> a
com.badlogic.gdx.audio.Music$OnCompletionListener -> com.a.a.b.b:
    void onCompletion$7c7c7bcc() -> a
com.badlogic.gdx.audio.Sound -> com.a.a.b.c:
    long play(float) -> a
    void stop() -> a
    void dispose() -> c
    void stop(long) -> a
com.badlogic.gdx.backends.android.AndroidApplication -> com.a.a.c.a.a:
    com.badlogic.gdx.backends.android.AndroidGraphics graphics -> b
    com.badlogic.gdx.backends.android.AndroidInput input -> c
    com.badlogic.gdx.backends.android.AndroidAudio audio -> a
    com.badlogic.gdx.backends.android.AndroidFiles files -> d
    com.badlogic.gdx.backends.android.AndroidNet net -> e
    com.badlogic.gdx.ApplicationListener listener -> f
    android.os.Handler handler -> g
    boolean firstResume -> h
    com.badlogic.gdx.utils.Array runnables -> i
    com.badlogic.gdx.utils.Array executedRunnables -> j
    com.badlogic.gdx.utils.Array lifecycleListeners -> k
    com.badlogic.gdx.utils.Array androidEventListeners -> l
    int logLevel -> m
    boolean useImmersiveMode -> n
    boolean hideStatusBar -> o
    int wasFocusChanged -> p
    boolean isWaitingForAudio -> q
    void initialize(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> a
    void hideStatusBar(boolean) -> a
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void useImmersiveMode(boolean) -> b
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    com.badlogic.gdx.ApplicationListener getApplicationListener() -> a
    com.badlogic.gdx.Graphics getGraphics() -> b
    com.badlogic.gdx.backends.android.AndroidInput getInput() -> e
    int getType$2826c76() -> c
    com.badlogic.gdx.Preferences getPreferences(java.lang.String) -> a
    void postRunnable(java.lang.Runnable) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void exit() -> d
    void debug(java.lang.String,java.lang.String) -> c
    void log(java.lang.String,java.lang.String) -> a
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void error(java.lang.String,java.lang.String) -> b
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> b
    void setLogLevel(int) -> a
    void addLifecycleListener(com.badlogic.gdx.LifecycleListener) -> a
    void removeLifecycleListener(com.badlogic.gdx.LifecycleListener) -> b
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    android.content.Context getContext() -> f
    com.badlogic.gdx.utils.Array getRunnables() -> g
    com.badlogic.gdx.utils.Array getExecutedRunnables() -> h
    com.badlogic.gdx.utils.Array getLifecycleListeners() -> i
com.badlogic.gdx.backends.android.AndroidApplication$1 -> com.a.a.c.a.b:
    com.badlogic.gdx.backends.android.AndroidApplication this$0 -> a
    void resume() -> b
    void pause() -> a
    void dispose() -> c
com.badlogic.gdx.backends.android.AndroidApplication$2 -> com.a.a.c.a.c:
    com.badlogic.gdx.backends.android.AndroidApplication this$0 -> a
    void run() -> run
com.badlogic.gdx.backends.android.AndroidApplicationBase -> com.a.a.c.a.d:
    android.content.Context getContext() -> f
    com.badlogic.gdx.utils.Array getRunnables() -> g
    com.badlogic.gdx.utils.Array getExecutedRunnables() -> h
    void runOnUiThread(java.lang.Runnable) -> runOnUiThread
    void startActivity(android.content.Intent) -> startActivity
    com.badlogic.gdx.backends.android.AndroidInput getInput() -> e
    com.badlogic.gdx.utils.Array getLifecycleListeners() -> i
    android.view.WindowManager getWindowManager() -> getWindowManager
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration -> com.a.a.c.a.e:
    int r -> a
    int g -> b
    int b -> c
    int a -> d
    int depth -> e
    int stencil -> f
    int numSamples -> g
    boolean useAccelerometer -> h
    boolean useGyroscope -> i
    boolean useCompass -> j
    int touchSleepTime -> k
    boolean useWakelock -> l
    boolean hideStatusBar -> m
    boolean disableAudio -> n
    int maxSimultaneousSounds -> o
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> p
    boolean useImmersiveMode -> q
    boolean useGL30 -> r
    boolean useGLSurfaceView20API18 -> s
com.badlogic.gdx.backends.android.AndroidAudio -> com.a.a.c.a.f:
    android.media.SoundPool soundPool -> b
    android.media.AudioManager manager -> c
    java.util.List musics -> a
    void pause() -> a
    void resume() -> b
    com.badlogic.gdx.audio.Music newMusic(com.badlogic.gdx.files.FileHandle) -> b
    com.badlogic.gdx.audio.Sound newSound(com.badlogic.gdx.files.FileHandle) -> a
    void dispose() -> c
com.badlogic.gdx.backends.android.AndroidFileHandle -> com.a.a.c.a.g:
    android.content.res.AssetManager assets -> c
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle sibling(java.lang.String) -> b
    com.badlogic.gdx.files.FileHandle parent() -> a
    java.io.InputStream read() -> b
    com.badlogic.gdx.files.FileHandle[] list() -> c
    boolean isDirectory() -> d
    boolean exists() -> e
    long length() -> f
    java.io.File file() -> g
    android.content.res.AssetFileDescriptor getAssetFileDescriptor() -> h
com.badlogic.gdx.backends.android.AndroidFiles -> com.a.a.c.a.h:
    java.lang.String sdcard -> a
    java.lang.String localpath -> b
    android.content.res.AssetManager assets -> c
    com.badlogic.gdx.backends.android.ZipResourceFile expansionFile -> d
    com.badlogic.gdx.files.FileHandle getFileHandle(java.lang.String,com.badlogic.gdx.Files$FileType) -> a
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> b
    com.badlogic.gdx.files.FileHandle local(java.lang.String) -> c
    java.lang.String getExternalStoragePath() -> a
    java.lang.String getLocalStoragePath() -> b
com.badlogic.gdx.backends.android.AndroidGL20 -> com.a.a.c.a.i:
    void init() -> f
    void glAttachShader(int,int) -> a
    void glBindBuffer(int,int) -> b
    void glBindFramebuffer(int,int) -> c
    void glBindRenderbuffer(int,int) -> d
    void glBindTexture(int,int) -> e
    void glBlendFunc(int,int) -> f
    void glBufferData(int,int,java.nio.Buffer,int) -> a
    void glBufferSubData(int,int,int,java.nio.Buffer) -> a
    int glCheckFramebufferStatus(int) -> a
    void glClear(int) -> b
    void glClearColor(float,float,float,float) -> a
    void glCompileShader(int) -> c
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> a
    int glCreateProgram() -> a
    int glCreateShader(int) -> d
    void glDeleteBuffer(int) -> e
    void glDeleteFramebuffer(int) -> f
    void glDeleteProgram(int) -> g
    void glDeleteRenderbuffer(int) -> h
    void glDeleteShader(int) -> i
    void glDeleteTexture(int) -> j
    void glDepthMask(boolean) -> a
    void glDisable(int) -> k
    void glDisableVertexAttribArray(int) -> l
    void glDrawArrays(int,int,int) -> a
    void glDrawElements(int,int,int,java.nio.Buffer) -> b
    void glDrawElements(int,int,int,int) -> a
    void glEnable(int) -> m
    void glEnableVertexAttribArray(int) -> n
    void glFramebufferRenderbuffer(int,int,int,int) -> b
    void glFramebufferTexture2D(int,int,int,int,int) -> a
    int glGenBuffer() -> b
    void glGenerateMipmap(int) -> o
    int glGenFramebuffer() -> c
    int glGenRenderbuffer() -> d
    int glGenTexture() -> e
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer) -> a
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer) -> b
    int glGetAttribLocation(int,java.lang.String) -> a
    void glGetIntegerv(int,java.nio.IntBuffer) -> a
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> a
    java.lang.String glGetProgramInfoLog(int) -> p
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> b
    java.lang.String glGetShaderInfoLog(int) -> q
    java.lang.String glGetString(int) -> r
    int glGetUniformLocation(int,java.lang.String) -> b
    void glLinkProgram(int) -> s
    void glPixelStorei(int,int) -> g
    void glReadPixels(int,int,int,int,int,int,java.nio.Buffer) -> a
    void glRenderbufferStorage(int,int,int,int) -> c
    void glScissor(int,int,int,int) -> d
    void glShaderSource(int,java.lang.String) -> c
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glTexParameterf(int,int,float) -> a
    void glUniform1i(int,int) -> h
    void glUniformMatrix4fv(int,int,boolean,float[],int) -> a
    void glUseProgram(int) -> t
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> a
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> a
    void glViewport(int,int,int,int) -> e
com.badlogic.gdx.backends.android.AndroidGraphics -> com.a.a.c.a.j:
    boolean enforceContinuousRendering -> a
    int major -> h
    android.view.View view -> b
    int width -> i
    int height -> j
    com.badlogic.gdx.backends.android.AndroidApplicationBase app -> k
    com.badlogic.gdx.graphics.GL20 gl20 -> l
    java.lang.String extensions -> m
    long lastFrameTime -> n
    float deltaTime -> o
    long frameStart -> p
    long frameId -> q
    int frames -> r
    int fps -> s
    com.badlogic.gdx.math.WindowedMean mean -> t
    boolean created -> u
    boolean running -> c
    boolean pause -> d
    boolean resume -> e
    boolean destroy -> f
    float density -> v
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> w
    boolean isContinuous -> x
    int[] value -> y
    java.lang.Object synch -> g
    void updatePpi() -> l
    int getHeight() -> b
    int getWidth() -> a
    int getBackBufferWidth() -> c
    int getBackBufferHeight() -> d
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
    int getAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
    float getDeltaTime() -> e
    int getFramesPerSecond() -> f
    void clearManagedCaches() -> j
    void logManagedCachesStatus() -> m
    float getDensity() -> g
    com.badlogic.gdx.Graphics$DisplayMode getDisplayMode() -> h
    boolean supportsExtension(java.lang.String) -> a
    void setContinuousRendering(boolean) -> a
    boolean isContinuousRendering() -> k
    void requestRendering() -> i
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidDisplayMode -> com.a.a.c.a.k:
com.badlogic.gdx.backends.android.AndroidInput -> com.a.a.c.a.l:
    com.badlogic.gdx.utils.Pool usedKeyEvents -> j
    com.badlogic.gdx.utils.Pool usedTouchEvents -> a
    java.util.ArrayList keyListeners -> k
    java.util.ArrayList keyEvents -> l
    java.util.ArrayList touchEvents -> b
    int[] touchX -> c
    int[] touchY -> d
    int[] deltaX -> e
    int[] deltaY -> f
    boolean[] touched -> g
    int[] button -> h
    int[] realId -> i
    boolean hasMultitouch -> m
    int keyCount -> n
    boolean[] keys -> o
    boolean keyJustPressed -> p
    boolean[] justPressedKeys -> q
    android.hardware.SensorManager manager -> r
    boolean accelerometerAvailable -> s
    float[] accelerometerValues -> t
    float[] gyroscopeValues -> u
    com.badlogic.gdx.Application app -> v
    android.content.Context context -> w
    com.badlogic.gdx.backends.android.AndroidTouchHandler touchHandler -> x
    int sleepTime -> y
    boolean catchBack -> z
    boolean catchMenu -> A
    boolean compassAvailable -> B
    float[] magneticFieldValues -> C
    com.badlogic.gdx.InputProcessor processor -> D
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> E
    int nativeOrientation$5c9d456b -> F
    long currentEventTimeStamp -> G
    android.hardware.SensorEventListener accelerometerListener -> H
    android.hardware.SensorEventListener gyroscopeListener -> I
    android.hardware.SensorEventListener compassListener -> J
    boolean requestFocus -> K
    int getX() -> a
    int getY() -> b
    boolean isTouched(int) -> a
    boolean isKeyPressed(int) -> c
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> a
    void processEvents() -> d
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
    boolean isButtonPressed(int) -> b
    void registerSensorListeners() -> e
    void unregisterSensorListeners() -> f
    int getFreePointerIndex() -> g
    int[] resize(int[]) -> a
    int lookUpPointerIndex(int) -> d
    long getCurrentEventTime() -> c
com.badlogic.gdx.backends.android.AndroidInput$1 -> com.a.a.c.a.m:
    java.lang.Object newObject() -> a
com.badlogic.gdx.backends.android.AndroidInput$2 -> com.a.a.c.a.n:
    java.lang.Object newObject() -> a
com.badlogic.gdx.backends.android.AndroidInput$KeyEvent -> com.a.a.c.a.o:
    long timeStamp -> a
    int type -> b
    int keyCode -> c
    char keyChar -> d
com.badlogic.gdx.backends.android.AndroidInput$SensorListener -> com.a.a.c.a.p:
    float[] accelerometerValues -> a
    float[] magneticFieldValues -> b
    int nativeOrientation$5c9d456b -> c
    float[] gyroscopeValues -> d
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent -> com.a.a.c.a.q:
    long timeStamp -> a
    int type -> b
    int x -> c
    int y -> d
    int scrollAmount -> e
    int button -> f
    int pointer -> g
com.badlogic.gdx.backends.android.AndroidInputThreePlus -> com.a.a.c.a.r:
    java.util.ArrayList genericMotionListeners -> j
    com.badlogic.gdx.backends.android.AndroidMouseHandler mouseHandler -> k
    boolean onGenericMotion(android.view.View,android.view.MotionEvent) -> onGenericMotion
com.badlogic.gdx.backends.android.AndroidMouseHandler -> com.a.a.c.a.s:
    int deltaX -> a
    int deltaY -> b
    boolean onGenericMotion(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput) -> a
    void postTouchEvent(com.badlogic.gdx.backends.android.AndroidInput,int,int,int,int,long) -> a
com.badlogic.gdx.backends.android.AndroidMusic -> com.a.a.c.a.t:
    com.badlogic.gdx.backends.android.AndroidAudio audio -> c
    android.media.MediaPlayer player -> d
    boolean isPrepared -> e
    boolean wasPlaying -> a
    com.badlogic.gdx.audio.Music$OnCompletionListener onCompletionListener -> b
    void dispose() -> c
    boolean isPlaying() -> d
    void pause() -> e
    void play() -> a
    void setLooping(boolean) -> a
    void stop() -> b
    void setOnCompletionListener(com.badlogic.gdx.audio.Music$OnCompletionListener) -> a
    void onCompletion(android.media.MediaPlayer) -> onCompletion
com.badlogic.gdx.backends.android.AndroidMusic$1 -> com.a.a.c.a.u:
    com.badlogic.gdx.backends.android.AndroidMusic this$0 -> a
    void run() -> run
com.badlogic.gdx.backends.android.AndroidNet -> com.a.a.c.a.v:
    com.badlogic.gdx.backends.android.AndroidApplicationBase app -> a
    boolean openURI(java.lang.String) -> a
com.badlogic.gdx.backends.android.AndroidNet$1 -> com.a.a.c.a.w:
    android.net.Uri val$uri -> a
    com.badlogic.gdx.backends.android.AndroidNet this$0 -> b
    void run() -> run
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard -> com.a.a.c.a.x:
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
com.badlogic.gdx.backends.android.AndroidPreferences -> com.a.a.c.a.y:
    android.content.SharedPreferences sharedPrefs -> a
    android.content.SharedPreferences$Editor editor -> b
    com.badlogic.gdx.Preferences putBoolean(java.lang.String,boolean) -> a
    com.badlogic.gdx.Preferences putInteger(java.lang.String,int) -> a
    com.badlogic.gdx.Preferences putString(java.lang.String,java.lang.String) -> a
    boolean getBoolean(java.lang.String) -> a
    int getInteger(java.lang.String) -> b
    java.lang.String getString(java.lang.String) -> c
    boolean contains(java.lang.String) -> d
    void flush() -> a
    void edit() -> b
com.badlogic.gdx.backends.android.AndroidSound -> com.a.a.c.a.z:
    android.media.SoundPool soundPool -> a
    int soundId -> b
    com.badlogic.gdx.utils.IntArray streamIds -> c
    void dispose() -> c
    long play(float) -> a
    void stop() -> a
    void stop(long) -> a
com.badlogic.gdx.backends.android.AndroidTouchHandler -> com.a.a.c.a.A:
    void onTouch(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput) -> a
    boolean supportsMultitouch(android.content.Context) -> a
    void postTouchEvent(com.badlogic.gdx.backends.android.AndroidInput,int,int,int,int,int,long) -> a
com.badlogic.gdx.backends.android.AndroidVisibilityListener -> com.a.a.c.a.B:
com.badlogic.gdx.backends.android.ZipResourceFile -> com.a.a.c.a.C:
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 -> com.a.a.c.a.a.a:
    java.lang.String TAG -> a
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> c
    int targetGLESVersion -> b
    void onMeasure(int,int) -> onMeasure
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo) -> onCreateInputConnection
    boolean checkEglError(java.lang.String,javax.microedition.khronos.egl.EGL10) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$1 -> com.a.a.c.a.a.b:
    boolean deleteSurroundingText(int,int) -> deleteSurroundingText
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser -> com.a.a.c.a.a.c:
    int EGL_OPENGL_ES2_BIT -> a
    int[] s_configAttribs2 -> b
    int mRedSize -> c
    int mGreenSize -> d
    int mBlueSize -> e
    int mAlphaSize -> f
    int mDepthSize -> g
    int mStencilSize -> h
    int[] mValue -> i
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ContextFactory -> com.a.a.c.a.a.d:
    int EGL_CONTEXT_CLIENT_VERSION -> a
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> createContext
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> destroyContext
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18 -> com.a.a.c.a.a.e:
    java.lang.String TAG -> a
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> b
    void onMeasure(int,int) -> onMeasure
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo) -> onCreateInputConnection
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$1 -> com.a.a.c.a.a.f:
    boolean deleteSurroundingText(int,int) -> deleteSurroundingText
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 -> com.a.a.c.a.a.g:
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager sGLThreadManager -> a
    java.lang.ref.WeakReference mThisWeakRef -> b
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread mGLThread -> c
    android.opengl.GLSurfaceView$Renderer mRenderer -> d
    boolean mDetached -> e
    android.opengl.GLSurfaceView$EGLConfigChooser mEGLConfigChooser -> f
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory mEGLContextFactory -> g
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory mEGLWindowSurfaceFactory -> h
    void finalize() -> finalize
    void setRenderMode(int) -> a
    void requestRender() -> a
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void onPause() -> b
    void onResume() -> c
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.opengl.GLSurfaceView$EGLConfigChooser access$300(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> a
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory access$400(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> b
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory access$500(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> c
    com.badlogic.gdx.assets.AssetErrorListener access$600$f4baff7(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> d
    int access$700(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> e
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager access$800() -> d
    boolean access$900(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> f
    android.opengl.GLSurfaceView$Renderer access$1000(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> g
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory -> com.a.a.c.a.a.h:
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> a
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory -> com.a.a.c.a.a.i:
    javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object) -> a
    void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper -> com.a.a.c.a.a.j:
    java.lang.ref.WeakReference mGLSurfaceViewWeakRef -> e
    javax.microedition.khronos.egl.EGL10 mEgl -> a
    javax.microedition.khronos.egl.EGLDisplay mEglDisplay -> b
    javax.microedition.khronos.egl.EGLSurface mEglSurface -> c
    javax.microedition.khronos.egl.EGLConfig mEglConfig -> d
    javax.microedition.khronos.egl.EGLContext mEglContext -> f
    void start() -> a
    boolean createSurface() -> b
    javax.microedition.khronos.opengles.GL createGL() -> c
    void destroySurface() -> d
    void destroySurfaceImp() -> f
    void finish() -> e
    void throwEglException(java.lang.String,int) -> a
    void logEglErrorAsWarning(java.lang.String,java.lang.String,int) -> a
    java.lang.String formatEglError(java.lang.String,int) -> b
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread -> com.a.a.c.a.a.k:
    boolean mShouldExit -> a
    boolean mExited -> b
    boolean mRequestPaused -> c
    boolean mPaused -> d
    boolean mHasSurface -> e
    boolean mSurfaceIsBad -> f
    boolean mWaitingForSurface -> g
    boolean mHaveEglContext -> h
    boolean mHaveEglSurface -> i
    boolean mFinishedCreatingEglSurface -> j
    boolean mShouldReleaseEglContext -> k
    int mWidth -> l
    int mHeight -> m
    int mRenderMode -> n
    boolean mRequestRender -> o
    boolean mRenderComplete -> p
    java.util.ArrayList mEventQueue -> q
    boolean mSizeChanged -> r
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper mEglHelper -> s
    java.lang.ref.WeakReference mGLSurfaceViewWeakRef -> t
    void run() -> run
    void stopEglSurfaceLocked() -> i
    void stopEglContextLocked() -> j
    void guardedRun() -> k
    boolean readyToDraw() -> l
    void setRenderMode(int) -> a
    int getRenderMode() -> a
    void requestRender() -> b
    void surfaceCreated() -> c
    void surfaceDestroyed() -> d
    void onPause() -> e
    void onResume() -> f
    void onWindowResize(int,int) -> a
    void requestExitAndWait() -> g
    void requestReleaseEglContextLocked() -> h
    boolean access$1102(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread,boolean) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager -> com.a.a.c.a.a.l:
    boolean mGLESVersionCheckComplete -> a
    int mGLESVersion -> b
    boolean mGLESDriverCheckComplete -> c
    boolean mMultipleGLESContextsAllowed -> d
    boolean mLimitedGLESContexts -> e
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread mEglOwner -> f
    void threadExiting(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread) -> a
    boolean tryAcquireEglContextLocked(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread) -> b
    void releaseEglContextLocked(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread) -> c
    boolean shouldReleaseEGLContextWhenPausing() -> a
    boolean shouldTerminateEGLWhenPausing() -> b
    void checkGLDriver(javax.microedition.khronos.opengles.GL10) -> a
    void checkGLESVersion() -> c
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$LogWriter -> com.a.a.c.a.a.m:
    java.lang.StringBuilder mBuilder -> a
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser -> com.a.a.c.a.a.n:
    int mRedSize -> a
    int mGreenSize -> b
    int mBlueSize -> c
    int mAlphaSize -> d
    int mDepthSize -> e
    int mStencilSize -> f
    int mNumSamples -> g
    int[] mConfigAttribs -> h
    int[] mValue -> i
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy -> com.a.a.c.a.a.o:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension -> com.a.a.c.a.a.p:
    int width -> a
    int height -> b
com.badlogic.gdx.files.FileHandle -> com.a.a.d.a:
    java.io.File file -> a
    com.badlogic.gdx.Files$FileType type -> b
    java.lang.String path() -> i
    java.lang.String name() -> j
    java.lang.String extension() -> k
    java.lang.String nameWithoutExtension() -> l
    java.lang.String pathWithoutExtension() -> m
    com.badlogic.gdx.Files$FileType type() -> n
    java.io.File file() -> g
    java.io.InputStream read() -> b
    java.io.Reader reader() -> o
    java.io.Reader reader(java.lang.String) -> c
    java.io.BufferedReader reader(int) -> a
    byte[] readBytes() -> p
    java.io.OutputStream write(boolean) -> a
    com.badlogic.gdx.files.FileHandle[] list() -> c
    boolean isDirectory() -> d
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle sibling(java.lang.String) -> b
    com.badlogic.gdx.files.FileHandle parent() -> a
    void mkdirs() -> h
    boolean exists() -> e
    boolean delete() -> q
    void moveTo(com.badlogic.gdx.files.FileHandle) -> a
    long length() -> f
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void emptyDirectory(java.io.File,boolean) -> a
    boolean deleteDirectory(java.io.File) -> a
    void copyFile(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle) -> a
    void copyDirectory(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle) -> b
com.badlogic.gdx.files.FileHandle$1 -> com.a.a.d.b:
    int[] $SwitchMap$com$badlogic$gdx$Files$FileType -> a
com.badlogic.gdx.graphics.Camera -> com.a.a.e.a:
    com.badlogic.gdx.math.Vector3 position -> a
    com.badlogic.gdx.math.Vector3 direction -> b
    com.badlogic.gdx.math.Vector3 up -> c
    com.badlogic.gdx.math.Matrix4 projection -> d
    com.badlogic.gdx.math.Matrix4 view -> e
    com.badlogic.gdx.math.Matrix4 combined -> f
    com.badlogic.gdx.math.Matrix4 invProjectionView -> g
    float near -> h
    float far -> i
    float viewportWidth -> j
    float viewportHeight -> k
    com.badlogic.gdx.math.Frustum frustum -> l
    void update() -> a
    com.badlogic.gdx.math.Vector3 project(com.badlogic.gdx.math.Vector3,float,float,float,float) -> a
com.badlogic.gdx.graphics.Color -> com.a.a.e.b:
    com.badlogic.gdx.graphics.Color CLEAR -> a
    com.badlogic.gdx.graphics.Color BLACK -> b
    com.badlogic.gdx.graphics.Color WHITE -> c
    com.badlogic.gdx.graphics.Color LIGHT_GRAY -> d
    com.badlogic.gdx.graphics.Color GRAY -> e
    com.badlogic.gdx.graphics.Color DARK_GRAY -> f
    com.badlogic.gdx.graphics.Color BLUE -> g
    com.badlogic.gdx.graphics.Color NAVY -> h
    com.badlogic.gdx.graphics.Color ROYAL -> i
    com.badlogic.gdx.graphics.Color SLATE -> j
    com.badlogic.gdx.graphics.Color SKY -> k
    com.badlogic.gdx.graphics.Color CYAN -> l
    com.badlogic.gdx.graphics.Color TEAL -> m
    com.badlogic.gdx.graphics.Color GREEN -> n
    com.badlogic.gdx.graphics.Color CHARTREUSE -> o
    com.badlogic.gdx.graphics.Color LIME -> p
    com.badlogic.gdx.graphics.Color FOREST -> q
    com.badlogic.gdx.graphics.Color OLIVE -> r
    com.badlogic.gdx.graphics.Color YELLOW -> s
    com.badlogic.gdx.graphics.Color GOLD -> t
    com.badlogic.gdx.graphics.Color GOLDENROD -> u
    com.badlogic.gdx.graphics.Color ORANGE -> v
    com.badlogic.gdx.graphics.Color BROWN -> w
    com.badlogic.gdx.graphics.Color TAN -> x
    com.badlogic.gdx.graphics.Color FIREBRICK -> y
    com.badlogic.gdx.graphics.Color RED -> z
    com.badlogic.gdx.graphics.Color SCARLET -> A
    com.badlogic.gdx.graphics.Color CORAL -> B
    com.badlogic.gdx.graphics.Color SALMON -> C
    com.badlogic.gdx.graphics.Color PINK -> D
    com.badlogic.gdx.graphics.Color MAGENTA -> E
    com.badlogic.gdx.graphics.Color PURPLE -> F
    com.badlogic.gdx.graphics.Color VIOLET -> G
    com.badlogic.gdx.graphics.Color MAROON -> H
    float r -> I
    float g -> J
    float b -> K
    float a -> L
    com.badlogic.gdx.graphics.Color set(com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.graphics.Color mul(com.badlogic.gdx.graphics.Color) -> b
    com.badlogic.gdx.graphics.Color clamp() -> c
    com.badlogic.gdx.graphics.Color set(float,float,float,float) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    float toFloatBits() -> a
    int toIntBits() -> b
    java.lang.String toString() -> toString
    com.badlogic.gdx.graphics.Color valueOf(java.lang.String) -> a
    float toFloatBits(float,float,float,float) -> b
    int rgba8888(float,float,float,float) -> c
    void rgba8888ToColor(com.badlogic.gdx.graphics.Color,int) -> a
com.badlogic.gdx.graphics.Colors -> com.a.a.e.c:
    com.badlogic.gdx.utils.ObjectMap map -> a
    com.badlogic.gdx.graphics.Color get(java.lang.String) -> a
com.badlogic.gdx.graphics.Cubemap -> com.a.a.e.d:
    java.util.Map managedCubemaps -> g
    com.badlogic.gdx.graphics.CubemapData data -> h
    void load(com.badlogic.gdx.graphics.CubemapData) -> a
    void reload() -> a
    int getWidth() -> b
    int getHeight() -> d
    void dispose() -> c
    void clearAllCubemaps(com.badlogic.gdx.Application) -> a
    void invalidateAllCubemaps(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> e
com.badlogic.gdx.graphics.Cubemap$1 -> com.a.a.e.e:
    int val$refCount -> a
    void finishedLoading$190c2c84(com.badlogic.gdx.assets.AssetManager,java.lang.String) -> a
    com.badlogic.gdx.graphics.Pixmap readCIM(com.badlogic.gdx.files.FileHandle) -> a
    void writePNG(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap) -> a
com.badlogic.gdx.graphics.CubemapData -> com.a.a.e.f:
    com.badlogic.gdx.files.FileHandle file -> a
    int glType -> b
    int glFormat -> c
    int glInternalFormat -> d
    int pixelWidth -> e
    int pixelHeight -> f
    int pixelDepth -> g
    int numberOfArrayElements -> h
    int numberOfFaces -> i
    int numberOfMipmapLevels -> j
    int imagePos -> k
    java.nio.ByteBuffer compressedData -> l
    boolean useMipMaps -> m
    boolean isPrepared() -> a
    void prepare() -> b
    void consumeCubemapData() -> c
    int getWidth() -> d
    int getHeight() -> e
    boolean isManaged() -> f
    int getType$7ed5d6f2() -> g
    void consumeCustomData(int) -> a
    void disposePreparedData() -> h
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> i
    boolean disposePixmap() -> j
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> k
    boolean useMipMaps() -> l
com.badlogic.gdx.graphics.GL20 -> com.a.a.e.g:
    void glBindTexture(int,int) -> e
    void glBlendFunc(int,int) -> f
    void glClear(int) -> b
    void glClearColor(float,float,float,float) -> a
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glDeleteTexture(int) -> j
    void glDepthMask(boolean) -> a
    void glDisable(int) -> k
    void glDrawArrays(int,int,int) -> a
    void glDrawElements(int,int,int,java.nio.Buffer) -> b
    void glEnable(int) -> m
    int glGenTexture() -> e
    void glGetIntegerv(int,java.nio.IntBuffer) -> a
    java.lang.String glGetString(int) -> r
    void glPixelStorei(int,int) -> g
    void glReadPixels(int,int,int,int,int,int,java.nio.Buffer) -> a
    void glScissor(int,int,int,int) -> d
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glTexParameterf(int,int,float) -> a
    void glViewport(int,int,int,int) -> e
    void glAttachShader(int,int) -> a
    void glBindBuffer(int,int) -> b
    void glBindFramebuffer(int,int) -> c
    void glBindRenderbuffer(int,int) -> d
    void glBufferData(int,int,java.nio.Buffer,int) -> a
    void glBufferSubData(int,int,int,java.nio.Buffer) -> a
    int glCheckFramebufferStatus(int) -> a
    void glCompileShader(int) -> c
    int glCreateProgram() -> a
    int glCreateShader(int) -> d
    void glDeleteBuffer(int) -> e
    void glDeleteFramebuffer(int) -> f
    void glDeleteProgram(int) -> g
    void glDeleteRenderbuffer(int) -> h
    void glDeleteShader(int) -> i
    void glDisableVertexAttribArray(int) -> l
    void glDrawElements(int,int,int,int) -> a
    void glEnableVertexAttribArray(int) -> n
    void glFramebufferRenderbuffer(int,int,int,int) -> b
    void glFramebufferTexture2D(int,int,int,int,int) -> a
    int glGenBuffer() -> b
    void glGenerateMipmap(int) -> o
    int glGenFramebuffer() -> c
    int glGenRenderbuffer() -> d
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer) -> a
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer) -> b
    int glGetAttribLocation(int,java.lang.String) -> a
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> a
    java.lang.String glGetProgramInfoLog(int) -> p
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> b
    java.lang.String glGetShaderInfoLog(int) -> q
    int glGetUniformLocation(int,java.lang.String) -> b
    void glLinkProgram(int) -> s
    void glRenderbufferStorage(int,int,int,int) -> c
    void glShaderSource(int,java.lang.String) -> c
    void glUniform1i(int,int) -> h
    void glUniformMatrix4fv(int,int,boolean,float[],int) -> a
    void glUseProgram(int) -> t
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> a
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> a
com.badlogic.gdx.graphics.GL30 -> com.a.a.e.h:
    void glBindVertexArray(int) -> u
    void glDeleteVertexArrays(int,java.nio.IntBuffer) -> b
    void glGenVertexArrays(int,java.nio.IntBuffer) -> c
    boolean glIsVertexArray(int) -> v
com.badlogic.gdx.graphics.GLTexture -> com.a.a.e.i:
    int glTarget -> a
    int glHandle -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> d
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> e
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> f
    int getWidth() -> b
    int getHeight() -> d
    void reload() -> a
    void bind() -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter getMinFilter() -> g
    com.badlogic.gdx.graphics.Texture$TextureFilter getMagFilter() -> h
    com.badlogic.gdx.graphics.Texture$TextureWrap getUWrap() -> i
    com.badlogic.gdx.graphics.Texture$TextureWrap getVWrap() -> j
    int getTextureObjectHandle() -> k
    void unsafeSetWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap,boolean) -> a
    void setWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap) -> a
    void unsafeSetFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean) -> a
    void setFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter) -> a
    void delete() -> l
    void dispose() -> c
com.badlogic.gdx.graphics.Mesh -> com.a.a.e.j:
    java.util.Map meshes -> a
    com.badlogic.gdx.graphics.glutils.VertexData vertices -> b
    com.badlogic.gdx.graphics.glutils.IndexData indices -> c
    boolean autoBind -> d
    boolean isVertexArray -> e
    com.badlogic.gdx.math.Vector3 tmpV -> f
    com.badlogic.gdx.graphics.glutils.VertexData makeVertexBuffer(boolean,int,com.badlogic.gdx.graphics.VertexAttributes) -> a
    com.badlogic.gdx.graphics.Mesh setVertices(float[],int,int) -> a
    com.badlogic.gdx.graphics.Mesh setIndices(short[]) -> a
    int getNumIndices() -> f
    int getNumVertices() -> g
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int) -> a
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int) -> a
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int,boolean) -> a
    void dispose() -> c
    com.badlogic.gdx.graphics.VertexAttribute getVertexAttribute(int) -> a
    com.badlogic.gdx.graphics.VertexAttributes getVertexAttributes() -> a
    java.nio.FloatBuffer getVerticesBuffer() -> b
    com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int) -> a
    java.nio.ShortBuffer getIndicesBuffer() -> d
    void addManagedMesh(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Mesh) -> a
    void invalidateAllMeshes(com.badlogic.gdx.Application) -> a
    void clearAllMeshes(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> e
com.badlogic.gdx.graphics.Mesh$1 -> com.a.a.e.k:
    int[] $SwitchMap$com$badlogic$gdx$graphics$Mesh$VertexDataType -> a
com.badlogic.gdx.graphics.Mesh$VertexDataType -> com.a.a.e.l:
    int VertexArray$54466470 -> a
    int VertexBufferObject$54466470 -> b
    int VertexBufferObjectSubData$54466470 -> c
    int VertexBufferObjectWithVAO$54466470 -> d
    int[] $VALUES$20b2114b -> e
    int[] values$7126724a() -> a
com.badlogic.gdx.graphics.OrthographicCamera -> com.a.a.e.m:
    float zoom -> m
    com.badlogic.gdx.math.Vector3 tmp -> n
    void update() -> a
    void setToOrtho(boolean,float,float) -> a
com.badlogic.gdx.graphics.Pixmap -> com.a.a.e.n:
    int blending$7e867597 -> b
    com.badlogic.gdx.graphics.g2d.Gdx2DPixmap pixmap -> a
    int color -> c
    boolean disposed -> d
    void setBlending$e926e04(int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int,int,int) -> a
    int getWidth() -> a
    int getHeight() -> b
    void dispose() -> c
    int getGLFormat() -> d
    int getGLInternalFormat() -> e
    int getGLType() -> f
    java.nio.ByteBuffer getPixels() -> g
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> h
    int getBlending$207e460a() -> i
com.badlogic.gdx.graphics.Pixmap$Format -> com.a.a.e.o:
    com.badlogic.gdx.graphics.Pixmap$Format Alpha -> d
    com.badlogic.gdx.graphics.Pixmap$Format Intensity -> e
    com.badlogic.gdx.graphics.Pixmap$Format LuminanceAlpha -> f
    com.badlogic.gdx.graphics.Pixmap$Format RGB565 -> a
    com.badlogic.gdx.graphics.Pixmap$Format RGBA4444 -> g
    com.badlogic.gdx.graphics.Pixmap$Format RGB888 -> b
    com.badlogic.gdx.graphics.Pixmap$Format RGBA8888 -> c
    com.badlogic.gdx.graphics.Pixmap$Format valueOf(java.lang.String) -> a
    int toGdx2DPixmapFormat(com.badlogic.gdx.graphics.Pixmap$Format) -> a
    com.badlogic.gdx.graphics.Pixmap$Format fromGdx2DPixmapFormat(int) -> a
    int toGlFormat(com.badlogic.gdx.graphics.Pixmap$Format) -> b
    int toGlType(com.badlogic.gdx.graphics.Pixmap$Format) -> c
com.badlogic.gdx.graphics.PixmapIO$CIM -> com.a.a.e.p:
    byte[] readBuffer -> a
    com.badlogic.gdx.graphics.Pixmap read(com.badlogic.gdx.files.FileHandle) -> a
com.badlogic.gdx.graphics.PixmapIO$PNG -> com.a.a.e.q:
    byte[] SIGNATURE -> a
    com.badlogic.gdx.graphics.PixmapIO$PNG$ChunkBuffer buffer -> b
    java.util.zip.Deflater deflater -> c
    com.badlogic.gdx.utils.ByteArray lineOutBytes -> d
    com.badlogic.gdx.utils.ByteArray curLineBytes -> e
    com.badlogic.gdx.utils.ByteArray prevLineBytes -> f
    boolean flipY -> g
    int lastLineLen -> h
    void setFlipY(boolean) -> a
    void write(java.io.OutputStream,com.badlogic.gdx.graphics.Pixmap) -> a
    void dispose() -> c
com.badlogic.gdx.graphics.PixmapIO$PNG$ChunkBuffer -> com.a.a.e.r:
    java.io.ByteArrayOutputStream buffer -> a
    java.util.zip.CRC32 crc -> b
    void endChunk(java.io.DataOutputStream) -> a
com.badlogic.gdx.graphics.Texture -> com.a.a.e.s:
    java.util.Map managedTextures -> g
    com.badlogic.gdx.graphics.TextureData data -> h
    void load(com.badlogic.gdx.graphics.TextureData) -> a
    void reload() -> a
    int getWidth() -> b
    int getHeight() -> d
    void dispose() -> c
    void clearAllTextures(com.badlogic.gdx.Application) -> a
    void invalidateAllTextures(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> e
com.badlogic.gdx.graphics.Texture$TextureFilter -> com.a.a.e.t:
    com.badlogic.gdx.graphics.Texture$TextureFilter Nearest -> a
    com.badlogic.gdx.graphics.Texture$TextureFilter Linear -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMap -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestNearest -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearNearest -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestLinear -> g
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearLinear -> h
    int glEnum -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter valueOf(java.lang.String) -> a
    boolean isMipMap() -> a
    int getGLEnum() -> b
com.badlogic.gdx.graphics.Texture$TextureWrap -> com.a.a.e.u:
    com.badlogic.gdx.graphics.Texture$TextureWrap MirroredRepeat -> d
    com.badlogic.gdx.graphics.Texture$TextureWrap ClampToEdge -> a
    com.badlogic.gdx.graphics.Texture$TextureWrap Repeat -> b
    int glEnum -> c
    int getGLEnum() -> a
com.badlogic.gdx.graphics.TextureData -> com.a.a.e.v:
    int getType$7ed5d6f2() -> g
    boolean isPrepared() -> a
    void prepare() -> b
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> i
    boolean disposePixmap() -> j
    void consumeCustomData(int) -> a
    int getWidth() -> d
    int getHeight() -> e
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> k
    boolean useMipMaps() -> l
    boolean isManaged() -> f
com.badlogic.gdx.graphics.VertexAttribute -> com.a.a.e.w:
    int usage -> a
    int numComponents -> b
    boolean normalized -> c
    int type -> d
    int offset -> e
    java.lang.String alias -> f
    int unit -> g
    int usageIndex -> h
    com.badlogic.gdx.graphics.VertexAttribute Position() -> a
    com.badlogic.gdx.graphics.VertexAttribute TexCoords(int) -> a
    com.badlogic.gdx.graphics.VertexAttribute Normal() -> b
    com.badlogic.gdx.graphics.VertexAttribute ColorPacked() -> c
    com.badlogic.gdx.graphics.VertexAttribute ColorUnpacked() -> d
    com.badlogic.gdx.graphics.VertexAttribute Tangent() -> e
    com.badlogic.gdx.graphics.VertexAttribute Binormal() -> f
    com.badlogic.gdx.graphics.VertexAttribute BoneWeight(int) -> b
    boolean equals(java.lang.Object) -> equals
    boolean equals(com.badlogic.gdx.graphics.VertexAttribute) -> a
    int hashCode() -> hashCode
com.badlogic.gdx.graphics.VertexAttributes -> com.a.a.e.x:
    com.badlogic.gdx.graphics.VertexAttribute[] attributes -> b
    int vertexSize -> a
    long mask -> c
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable iterable -> d
    int calculateOffsets() -> b
    int size() -> a
    com.badlogic.gdx.graphics.VertexAttribute get(int) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    long getMask() -> c
    java.util.Iterator iterator() -> iterator
    int compareTo(java.lang.Object) -> compareTo
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable -> com.a.a.e.y:
    java.lang.Object[] array -> a
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator iterator1 -> b
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator iterator2 -> c
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator -> com.a.a.e.z:
    java.lang.Object[] array -> c
    int index -> a
    boolean valid -> b
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.graphics.g2d.Batch -> com.a.a.e.a.a:
    void begin() -> a
    void end() -> b
    void setColor(float,float,float,float) -> a
    void setColor(float) -> a
    com.badlogic.gdx.graphics.Color getColor() -> d
    float getPackedColor() -> e
    void draw(com.badlogic.gdx.graphics.Texture,float[],int,int) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float) -> a
    void flush() -> f
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> g
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> a
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> b
com.badlogic.gdx.graphics.g2d.BitmapFont -> com.a.a.e.a.b:
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData data -> a
    com.badlogic.gdx.utils.Array regions -> b
    com.badlogic.gdx.graphics.g2d.BitmapFontCache cache -> c
    boolean flipped -> d
    boolean integer -> e
    boolean ownsTexture -> f
    void load(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData) -> a
    com.badlogic.gdx.graphics.g2d.GlyphLayout draw(com.badlogic.gdx.graphics.g2d.Batch,java.lang.CharSequence,float,float) -> a
    com.badlogic.gdx.graphics.g2d.GlyphLayout draw(com.badlogic.gdx.graphics.g2d.Batch,java.lang.CharSequence,float,float,float,int,boolean) -> a
    com.badlogic.gdx.graphics.Color getColor() -> a
    void setColor(float,float,float,float) -> a
    float getScaleX() -> b
    float getScaleY() -> d
    float getCapHeight() -> e
    float getDescent() -> f
    boolean isFlipped() -> g
    void dispose() -> c
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData getData() -> h
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData -> com.a.a.e.a.c:
    java.lang.String[] imagePaths -> a
    com.badlogic.gdx.files.FileHandle fontFile -> b
    boolean flipped -> c
    float padTop -> q
    float padRight -> d
    float padBottom -> r
    float padLeft -> e
    float lineHeight -> f
    float capHeight -> g
    float ascent -> h
    float descent -> i
    float down -> j
    float scaleX -> k
    float scaleY -> l
    boolean markupEnabled -> m
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph[][] glyphs -> n
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph missingGlyph -> o
    float spaceWidth -> p
    float xHeight -> s
    char[] xChars -> t
    char[] capChars -> u
    void load(com.badlogic.gdx.files.FileHandle,boolean) -> a
    void setGlyphRegion(com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph,com.badlogic.gdx.graphics.g2d.TextureRegion) -> a
    void setGlyph(int,com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getFirstGlyph() -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getGlyph(char) -> b
    void getGlyphs(com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,java.lang.CharSequence,int,int,boolean) -> a
    boolean isWhitespace(char) -> a
    void setScale(float,float) -> a
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph -> com.a.a.e.a.d:
    int id -> a
    int srcX -> b
    int srcY -> c
    int width -> d
    int height -> e
    float u -> f
    float v -> g
    float u2 -> h
    float v2 -> i
    int xoffset -> j
    int yoffset -> k
    int xadvance -> l
    byte[][] kerning -> m
    int page -> n
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.BitmapFontCache -> com.a.a.e.a.e:
    com.badlogic.gdx.graphics.Color tempColor -> a
    float whiteTint -> b
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> c
    boolean integer -> d
    com.badlogic.gdx.utils.Array layouts -> e
    com.badlogic.gdx.utils.Array pooledLayouts -> f
    int glyphCount -> g
    float x -> h
    float y -> i
    com.badlogic.gdx.graphics.Color color -> j
    float currentTint -> k
    float[][] pageVertices -> l
    int[] idx -> m
    com.badlogic.gdx.utils.IntArray[] pageGlyphIndices -> n
    int[] tempGlyphCount -> o
    void setPosition(float,float) -> a
    void tint(com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.graphics.Color getColor() -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch) -> a
    void clear() -> b
    void requirePageGlyphs(int,int) -> a
    void setText(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float) -> a
    com.badlogic.gdx.graphics.g2d.GlyphLayout addText(java.lang.CharSequence,float,float,int,int,float,int,boolean,java.lang.String) -> a
    void addText(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float) -> b
    com.badlogic.gdx.graphics.g2d.BitmapFont getFont() -> c
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap -> com.a.a.e.a.f:
    long basePtr -> a
    int width -> b
    int height -> c
    int format -> d
    java.nio.ByteBuffer pixelPtr -> e
    long[] nativeData -> f
    int toGlFormat(int) -> a
    int toGlType(int) -> b
    void dispose() -> c
    void clear(int) -> c
    int getPixel(int,int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int,int,int) -> a
    java.nio.ByteBuffer getPixels() -> a
    int getHeight() -> b
    int getWidth() -> d
    int getFormat() -> e
    int getGLInternalFormat() -> f
    int getGLType() -> g
    java.nio.ByteBuffer load(long[],byte[],int,int) -> a
    java.nio.ByteBuffer newPixmap(long[],int,int,int) -> a
    void free(long) -> a
    void clear(long,int) -> a
    int getPixel(long,int,int) -> a
    void drawPixmap(long,long,int,int,int,int,int,int,int,int) -> a
    void setBlend(int) -> d
    void setScale(int) -> e
    java.lang.String getFailureReason() -> h
com.badlogic.gdx.graphics.g2d.GlyphLayout -> com.a.a.e.a.g:
    com.badlogic.gdx.utils.Array runs -> a
    float width -> b
    float height -> c
    com.badlogic.gdx.utils.Array colorStack -> d
    void setText(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence) -> a
    void setText(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,com.badlogic.gdx.graphics.Color,float,int,boolean) -> a
    void setText(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,int,int,com.badlogic.gdx.graphics.Color,float,int,boolean,java.lang.String) -> a
    void adjustLastGlyph(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun) -> a
    void reset() -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun -> com.a.a.e.a.h:
    com.badlogic.gdx.utils.Array glyphs -> a
    com.badlogic.gdx.utils.FloatArray xAdvances -> b
    float x -> c
    float y -> d
    float width -> e
    com.badlogic.gdx.graphics.Color color -> f
    void reset() -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.NinePatch -> com.a.a.e.a.i:
    com.badlogic.gdx.graphics.Color tmpDrawColor -> a
    com.badlogic.gdx.graphics.Texture texture -> b
    int bottomLeft -> c
    int bottomCenter -> d
    int bottomRight -> e
    int middleLeft -> f
    int middleCenter -> g
    int middleRight -> h
    int topLeft -> i
    int topCenter -> j
    int topRight -> k
    float leftWidth -> l
    float rightWidth -> m
    float middleWidth -> n
    float middleHeight -> o
    float topHeight -> p
    float bottomHeight -> q
    float[] vertices -> r
    int idx -> s
    com.badlogic.gdx.graphics.Color color -> t
    float padLeft -> u
    float padRight -> v
    float padTop -> w
    float padBottom -> x
    void load(com.badlogic.gdx.graphics.g2d.TextureRegion[]) -> a
    int add(com.badlogic.gdx.graphics.g2d.TextureRegion,float,boolean,boolean) -> a
    void set(int,float,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    float getTotalWidth() -> a
    float getTotalHeight() -> b
    void setPadding(float,float,float,float) -> a
    float getPadLeft() -> c
    float getPadRight() -> d
    float getPadTop() -> e
    float getPadBottom() -> f
com.badlogic.gdx.graphics.g2d.ParticleEffect -> com.a.a.e.a.j:
    com.badlogic.gdx.utils.Array emitters -> a
    boolean ownsTexture -> b
    void loadEmitters(com.badlogic.gdx.files.FileHandle) -> a
    void loadEmitterImages(com.badlogic.gdx.files.FileHandle) -> b
    void dispose() -> c
com.badlogic.gdx.graphics.g2d.ParticleEmitter -> com.a.a.e.a.k:
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue delayValue -> a
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue lifeOffsetValue -> b
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue durationValue -> c
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue lifeValue -> d
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue emissionValue -> e
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue scaleValue -> f
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue rotationValue -> g
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue velocityValue -> h
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue angleValue -> i
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue windValue -> j
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue gravityValue -> k
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue transparencyValue -> l
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue tintValue -> m
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue xOffsetValue -> n
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue yOffsetValue -> o
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue spawnWidthValue -> p
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue spawnHeightValue -> q
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue spawnShapeValue -> r
    com.badlogic.gdx.graphics.g2d.Sprite sprite -> s
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle[] particles -> t
    java.lang.String name -> u
    java.lang.String imagePath -> v
    void initialize() -> c
    void setSprite(com.badlogic.gdx.graphics.g2d.Sprite) -> a
    com.badlogic.gdx.graphics.g2d.Sprite getSprite() -> a
    java.lang.String getImagePath() -> b
    java.lang.String readString(java.lang.String) -> a
    java.lang.String readString(java.io.BufferedReader,java.lang.String) -> a
    boolean readBoolean(java.io.BufferedReader,java.lang.String) -> b
    int readInt(java.io.BufferedReader,java.lang.String) -> c
    float readFloat(java.io.BufferedReader,java.lang.String) -> d
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue -> com.a.a.e.a.l:
    float[] colors -> c
    float[] timeline -> d
    void load(java.io.BufferedReader) -> a
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle -> com.a.a.e.a.m:
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue -> com.a.a.e.a.n:
    boolean active -> a
    boolean alwaysActive -> b
    void load(java.io.BufferedReader) -> a
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue -> com.a.a.e.a.o:
    void load(java.io.BufferedReader) -> a
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue -> com.a.a.e.a.p:
    float[] scaling -> c
    float[] timeline -> d
    void load(java.io.BufferedReader) -> a
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide -> com.a.a.e.a.q:
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide both -> a
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide top -> b
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide bottom -> c
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide valueOf(java.lang.String) -> a
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape -> com.a.a.e.a.r:
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape point -> a
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape line -> c
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape square -> d
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape ellipse -> b
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape valueOf(java.lang.String) -> a
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue -> com.a.a.e.a.s:
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape shape -> c
    void load(java.io.BufferedReader) -> a
com.badlogic.gdx.graphics.g2d.PolygonRegion -> com.a.a.e.a.t:
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader -> com.a.a.e.a.u:
    com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters defaultParameters -> a
    com.badlogic.gdx.math.EarClippingTriangulator triangulator -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters) -> a
    com.badlogic.gdx.graphics.g2d.PolygonRegion load(com.badlogic.gdx.graphics.g2d.TextureRegion,com.badlogic.gdx.files.FileHandle) -> a
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters -> com.a.a.e.a.v:
    java.lang.String texturePrefix -> b
    int readerBuffer -> c
    java.lang.String[] textureExtensions -> d
com.badlogic.gdx.graphics.g2d.Sprite -> com.a.a.e.a.w:
    float[] vertices -> a
    com.badlogic.gdx.graphics.Color color -> b
    float x -> c
    float y -> d
    float width -> e
    float height -> f
    float originX -> g
    float originY -> h
    float rotation -> i
    float scaleX -> j
    float scaleY -> k
    boolean dirty -> s
    void set(com.badlogic.gdx.graphics.g2d.Sprite) -> a
    void setBounds(float,float,float,float) -> a
    void setSize(float,float) -> a
    void translate(float,float) -> b
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setColor(float,float,float,float) -> b
    void setOrigin(float,float) -> c
    void setRotation(float) -> a
    void rotate90(boolean) -> a
    void setScale(float,float) -> d
    void draw(com.badlogic.gdx.graphics.g2d.Batch) -> a
    float getX() -> a
    float getY() -> b
    float getWidth() -> c
    float getHeight() -> d
    float getOriginX() -> e
    float getOriginY() -> f
    com.badlogic.gdx.graphics.Color getColor() -> g
    void setRegion(float,float,float,float) -> c
    void flip(boolean,boolean) -> a
com.badlogic.gdx.graphics.g2d.SpriteBatch -> com.a.a.e.a.x:
    com.badlogic.gdx.graphics.Mesh mesh -> a
    float[] vertices -> b
    int idx -> c
    com.badlogic.gdx.graphics.Texture lastTexture -> d
    boolean drawing -> e
    com.badlogic.gdx.math.Matrix4 transformMatrix -> f
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> g
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> h
    boolean blendingDisabled -> i
    int blendSrcFunc -> j
    int blendDstFunc -> k
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> l
    com.badlogic.gdx.graphics.glutils.ShaderProgram customShader -> m
    boolean ownsShader -> n
    float color -> o
    com.badlogic.gdx.graphics.Color tempColor -> p
    int renderCalls -> q
    int totalRenderCalls -> r
    int maxSpritesInBatch -> s
    void begin() -> a
    void end() -> b
    void setColor(float,float,float,float) -> a
    void setColor(float) -> a
    com.badlogic.gdx.graphics.Color getColor() -> d
    float getPackedColor() -> e
    void draw(com.badlogic.gdx.graphics.Texture,float[],int,int) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float) -> a
    void flush() -> f
    void dispose() -> c
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> g
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> a
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> b
    void setupMatrices() -> h
    void switchTexture(com.badlogic.gdx.graphics.Texture) -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas -> com.a.a.e.a.y:
    java.lang.String[] tuple -> a
    com.badlogic.gdx.utils.ObjectSet textures -> c
    com.badlogic.gdx.utils.Array regions -> d
    java.util.Comparator indexComparator -> b
    void load(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData) -> a
    com.badlogic.gdx.utils.Array getRegions() -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion findRegion(java.lang.String) -> a
    void dispose() -> c
    java.lang.String readValue(java.io.BufferedReader) -> a
    int readTuple(java.io.BufferedReader) -> b
com.badlogic.gdx.graphics.g2d.TextureAtlas$1 -> com.a.a.e.a.z:
    int compare(java.lang.Object,java.lang.Object) -> compare
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion -> com.a.a.e.a.A:
    int index -> a
    java.lang.String name -> b
    float offsetX -> c
    float offsetY -> d
    int packedWidth -> e
    int packedHeight -> f
    int originalWidth -> g
    int originalHeight -> h
    boolean rotate -> i
    int[] splits -> j
    int[] pads -> k
    void flip(boolean,boolean) -> a
    float getRotatedPackedWidth() -> a
    float getRotatedPackedHeight() -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite -> com.a.a.e.a.B:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion region -> a
    float originalOffsetX -> b
    float originalOffsetY -> c
    void setBounds(float,float,float,float) -> a
    void setSize(float,float) -> a
    void setOrigin(float,float) -> c
    void flip(boolean,boolean) -> a
    void rotate90(boolean) -> a
    float getX() -> a
    float getY() -> b
    float getOriginX() -> e
    float getOriginY() -> f
    float getWidth() -> c
    float getHeight() -> d
    float getWidthRatio() -> k
    float getHeightRatio() -> l
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData -> com.a.a.e.a.C:
    com.badlogic.gdx.utils.Array pages -> a
    com.badlogic.gdx.utils.Array regions -> b
    com.badlogic.gdx.utils.Array getPages() -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page -> com.a.a.e.a.D:
    com.badlogic.gdx.files.FileHandle textureFile -> a
    com.badlogic.gdx.graphics.Texture texture -> b
    boolean useMipMaps -> c
    com.badlogic.gdx.graphics.Pixmap$Format format -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> f
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> g
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> h
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region -> com.a.a.e.a.E:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page page -> a
    int index -> b
    java.lang.String name -> c
    float offsetX -> d
    float offsetY -> e
    int originalWidth -> f
    int originalHeight -> g
    boolean rotate -> h
    int left -> i
    int top -> j
    int width -> k
    int height -> l
    boolean flip -> m
    int[] splits -> n
    int[] pads -> o
com.badlogic.gdx.graphics.g2d.TextureRegion -> com.a.a.e.a.F:
    com.badlogic.gdx.graphics.Texture texture -> l
    float u -> m
    float v -> n
    float u2 -> o
    float v2 -> p
    int regionWidth -> q
    int regionHeight -> r
    void setRegion(int,int,int,int) -> a
    void setRegion(float,float,float,float) -> c
    void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion) -> a
    com.badlogic.gdx.graphics.Texture getTexture() -> h
    int getRegionWidth() -> i
    int getRegionHeight() -> j
    void flip(boolean,boolean) -> a
com.badlogic.gdx.graphics.g3d.Attribute -> com.a.a.e.b.a:
    com.badlogic.gdx.utils.Array types -> b
    long type -> a
    int typeBit -> c
    long register(java.lang.String) -> a
    boolean equals(com.badlogic.gdx.graphics.g3d.Attribute) -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
com.badlogic.gdx.graphics.g3d.Attributes -> com.a.a.e.b.b:
    long mask -> a
    com.badlogic.gdx.utils.Array attributes -> b
    boolean sorted -> c
    void sort() -> a
    void set(com.badlogic.gdx.graphics.g3d.Attribute) -> a
    java.util.Iterator iterator() -> iterator
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compare(java.lang.Object,java.lang.Object) -> compare
    int compareTo(java.lang.Object) -> compareTo
com.badlogic.gdx.graphics.g3d.Material -> com.a.a.e.b.c:
    int counter -> b
    java.lang.String id -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.graphics.g3d.Model -> com.a.a.e.b.d:
    com.badlogic.gdx.utils.Array materials -> a
    com.badlogic.gdx.utils.Array nodes -> b
    com.badlogic.gdx.utils.Array animations -> c
    com.badlogic.gdx.utils.Array meshes -> d
    com.badlogic.gdx.utils.Array meshParts -> e
    com.badlogic.gdx.utils.Array disposables -> f
    com.badlogic.gdx.utils.ObjectMap nodePartBones -> g
    void loadAnimations(java.lang.Iterable) -> a
    void loadNodes(java.lang.Iterable) -> b
    com.badlogic.gdx.graphics.g3d.model.Node loadNode(com.badlogic.gdx.graphics.g3d.model.data.ModelNode) -> a
    void loadMeshes(java.lang.Iterable) -> c
    void loadMaterials(java.lang.Iterable,com.badlogic.gdx.graphics.g3d.utils.TextureProvider) -> a
    java.lang.Iterable getManagedDisposables() -> a
    void dispose() -> c
    void calculateTransforms() -> b
    com.badlogic.gdx.graphics.g3d.model.Node getNode(java.lang.String) -> a
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute -> com.a.a.e.b.a.a:
    long Type -> b
    boolean blended -> c
    int sourceFunction -> d
    int destFunction -> e
    float opacity -> f
    int hashCode() -> hashCode
    int compareTo(java.lang.Object) -> compareTo
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute -> com.a.a.e.b.a.b:
    long Diffuse -> b
    long Specular -> c
    long Ambient -> d
    long Emissive -> e
    long Reflection -> f
    long AmbientLight -> g
    long Fog -> h
    long Mask -> i
    com.badlogic.gdx.graphics.Color color -> j
    int hashCode() -> hashCode
    int compareTo(java.lang.Object) -> compareTo
com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute -> com.a.a.e.b.a.c:
    long Shininess -> b
    float value -> c
    int hashCode() -> hashCode
    int compareTo(java.lang.Object) -> compareTo
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute -> com.a.a.e.b.a.d:
    long Diffuse -> b
    long Specular -> c
    long Bump -> d
    long Normal -> e
    long Ambient -> f
    long Emissive -> g
    long Reflection -> h
    long Mask -> i
    com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor textureDescription -> j
    float offsetU -> k
    float offsetV -> l
    float scaleU -> m
    float scaleV -> n
    int uvIndex -> o
    int hashCode() -> hashCode
    int compareTo(java.lang.Object) -> compareTo
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader -> com.a.a.e.b.b.a:
    com.badlogic.gdx.utils.BaseJsonReader reader -> a
    com.badlogic.gdx.math.Quaternion tempQ -> b
    com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters) -> a
    void parseMaterials(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.utils.JsonValue,java.lang.String) -> a
    com.badlogic.gdx.graphics.Color parseColor(com.badlogic.gdx.utils.JsonValue) -> a
    com.badlogic.gdx.math.Vector2 readVector2(com.badlogic.gdx.utils.JsonValue,float,float) -> a
    com.badlogic.gdx.utils.Array parseNodes(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.utils.JsonValue) -> a
    com.badlogic.gdx.graphics.g3d.model.data.ModelNode parseNodesRecursively(com.badlogic.gdx.utils.JsonValue) -> b
    void parseAnimations(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.utils.JsonValue) -> b
com.badlogic.gdx.graphics.g3d.loader.MtlLoader -> com.a.a.e.b.b.b:
    com.badlogic.gdx.utils.Array materials -> a
    void load(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial getMaterial(java.lang.String) -> a
com.badlogic.gdx.graphics.g3d.loader.ObjLoader -> com.a.a.e.b.b.c:
    boolean logWarning -> a
    com.badlogic.gdx.utils.FloatArray verts -> b
    com.badlogic.gdx.utils.FloatArray norms -> c
    com.badlogic.gdx.utils.FloatArray uvs -> d
    com.badlogic.gdx.utils.Array groups -> e
    com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,boolean) -> a
    com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group setActiveGroup(java.lang.String) -> b
    int getIndex(java.lang.String,int) -> a
    com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters) -> a
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group -> com.a.a.e.b.b.d:
    java.lang.String name -> a
    java.lang.String materialName -> b
    com.badlogic.gdx.utils.Array faces -> c
    int numFaces -> d
    boolean hasNorms -> e
    boolean hasUVs -> f
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$ObjLoaderParameters -> com.a.a.e.b.b.e:
com.badlogic.gdx.graphics.g3d.model.Animation -> com.a.a.e.b.c.a:
    float duration -> a
    com.badlogic.gdx.utils.Array nodeAnimations -> b
com.badlogic.gdx.graphics.g3d.model.MeshPart -> com.a.a.e.b.c.b:
    java.lang.String id -> a
    int primitiveType -> b
    int offset -> c
    int size -> d
    com.badlogic.gdx.graphics.Mesh mesh -> e
    com.badlogic.gdx.math.Vector3 center -> f
    com.badlogic.gdx.math.Vector3 halfExtents -> g
    com.badlogic.gdx.math.collision.BoundingBox bounds -> h
    void update() -> a
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.graphics.g3d.model.Node -> com.a.a.e.b.c.c:
    java.lang.String id -> a
    boolean inheritTransform -> f
    com.badlogic.gdx.math.Vector3 translation -> b
    com.badlogic.gdx.math.Quaternion rotation -> c
    com.badlogic.gdx.math.Vector3 scale -> d
    com.badlogic.gdx.math.Matrix4 localTransform -> g
    com.badlogic.gdx.math.Matrix4 globalTransform -> h
    com.badlogic.gdx.utils.Array parts -> e
    com.badlogic.gdx.graphics.g3d.model.Node parent -> i
    com.badlogic.gdx.utils.Array children -> j
    void calculateTransforms(boolean) -> a
    void calculateBoneTransforms(boolean) -> b
    int insertChild(int,com.badlogic.gdx.graphics.g3d.model.Node) -> a
    com.badlogic.gdx.graphics.g3d.model.Node getNode(com.badlogic.gdx.utils.Array,java.lang.String,boolean,boolean) -> a
com.badlogic.gdx.graphics.g3d.model.NodeAnimation -> com.a.a.e.b.c.d:
    com.badlogic.gdx.utils.Array translation -> a
    com.badlogic.gdx.utils.Array rotation -> b
    com.badlogic.gdx.utils.Array scaling -> c
com.badlogic.gdx.graphics.g3d.model.NodeKeyframe -> com.a.a.e.b.c.e:
com.badlogic.gdx.graphics.g3d.model.NodePart -> com.a.a.e.b.c.f:
    com.badlogic.gdx.utils.ArrayMap invBoneBindTransforms -> a
com.badlogic.gdx.graphics.g3d.model.data.ModelAnimation -> com.a.a.e.b.c.a.a:
    java.lang.String id -> a
    com.badlogic.gdx.utils.Array nodeAnimations -> b
com.badlogic.gdx.graphics.g3d.model.data.ModelData -> com.a.a.e.b.c.a.b:
    short[] version -> a
    com.badlogic.gdx.utils.Array meshes -> b
    com.badlogic.gdx.utils.Array materials -> c
    com.badlogic.gdx.utils.Array nodes -> d
    com.badlogic.gdx.utils.Array animations -> e
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial -> com.a.a.e.b.c.a.c:
    java.lang.String id -> a
    com.badlogic.gdx.graphics.Color ambient -> b
    com.badlogic.gdx.graphics.Color diffuse -> c
    com.badlogic.gdx.graphics.Color specular -> d
    com.badlogic.gdx.graphics.Color emissive -> e
    com.badlogic.gdx.graphics.Color reflection -> f
    float shininess -> g
    float opacity -> h
    com.badlogic.gdx.utils.Array textures -> i
com.badlogic.gdx.graphics.g3d.model.data.ModelMesh -> com.a.a.e.b.c.a.d:
    com.badlogic.gdx.graphics.VertexAttribute[] attributes -> a
    float[] vertices -> b
    com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart[] parts -> c
com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart -> com.a.a.e.b.c.a.e:
    java.lang.String id -> a
    short[] indices -> b
    int primitiveType -> c
com.badlogic.gdx.graphics.g3d.model.data.ModelNode -> com.a.a.e.b.c.a.f:
    java.lang.String id -> a
    com.badlogic.gdx.math.Vector3 translation -> b
    com.badlogic.gdx.math.Quaternion rotation -> c
    com.badlogic.gdx.math.Vector3 scale -> d
    com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart[] parts -> e
    com.badlogic.gdx.graphics.g3d.model.data.ModelNode[] children -> f
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeAnimation -> com.a.a.e.b.c.a.g:
    java.lang.String nodeId -> a
    com.badlogic.gdx.utils.Array translation -> b
    com.badlogic.gdx.utils.Array rotation -> c
    com.badlogic.gdx.utils.Array scaling -> d
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeKeyframe -> com.a.a.e.b.c.a.h:
    float keytime -> a
    java.lang.Object value -> b
com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart -> com.a.a.e.b.c.a.i:
    java.lang.String materialId -> a
    java.lang.String meshPartId -> b
    com.badlogic.gdx.utils.ArrayMap bones -> c
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture -> com.a.a.e.b.c.a.j:
    java.lang.String fileName -> a
    com.badlogic.gdx.math.Vector2 uvTranslation -> b
    com.badlogic.gdx.math.Vector2 uvScaling -> c
    int usage -> d
com.badlogic.gdx.graphics.g3d.particles.ParticleController -> com.a.a.e.b.d.a:
    com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter emitter -> a
    com.badlogic.gdx.utils.Array influencers -> b
    com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer renderer -> c
    float deltaTime -> d
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> a
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent -> com.a.a.e.b.d.b:
    void dispose() -> c
    void load$7d2680d3() -> a
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect -> com.a.a.e.b.d.c:
    com.badlogic.gdx.utils.Array controllers -> a
    void dispose() -> c
    void setBatch(com.badlogic.gdx.utils.Array) -> a
    void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> a
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader -> com.a.a.e.b.d.d:
    com.badlogic.gdx.utils.Array items -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter) -> a
    com.badlogic.gdx.graphics.g3d.particles.ParticleEffect loadSync$748b8b69(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter -> com.a.a.e.b.d.e:
    boolean flip -> b
    boolean genMipMaps -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> e
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData bitmapFontData -> f
    java.lang.String atlasName -> g
com.badlogic.gdx.graphics.g3d.particles.ResourceData -> com.a.a.e.b.d.f:
    com.badlogic.gdx.utils.ObjectMap uniqueData -> c
    com.badlogic.gdx.utils.Array data -> d
    com.badlogic.gdx.utils.Array sharedAssets -> a
    java.lang.Object resource -> b
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> a
com.badlogic.gdx.graphics.g3d.particles.ResourceData$AssetData -> com.a.a.e.b.d.g:
    java.lang.String filename -> a
    java.lang.Class type -> b
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> a
com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData -> com.a.a.e.b.d.h:
    com.badlogic.gdx.utils.IntArray assets -> a
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> a
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter -> com.a.a.e.b.d.a.a:
com.badlogic.gdx.graphics.g3d.particles.influencers.Influencer -> com.a.a.e.b.d.b.a:
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer -> com.a.a.e.b.d.c.a:
    boolean isCompatible$70dac73c() -> b
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor -> com.a.a.e.b.e.a:
    com.badlogic.gdx.graphics.GLTexture texture -> a
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> c
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> d
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> e
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor) -> a
    int compareTo(java.lang.Object) -> compareTo
com.badlogic.gdx.graphics.g3d.utils.TextureProvider -> com.a.a.e.b.e.b:
    com.badlogic.gdx.graphics.Texture load(java.lang.String) -> a
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$AssetTextureProvider -> com.a.a.e.b.e.c:
    com.badlogic.gdx.assets.AssetManager assetManager -> a
    com.badlogic.gdx.graphics.Texture load(java.lang.String) -> a
com.badlogic.gdx.graphics.glutils.ETC1 -> com.a.a.e.c.a:
    int PKM_HEADER_SIZE -> a
    int ETC1_RGB8_OES -> b
    com.badlogic.gdx.graphics.Pixmap decodeImage(com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data,com.badlogic.gdx.graphics.Pixmap$Format) -> a
    int getWidthPKM(java.nio.ByteBuffer,int) -> a
    int getHeightPKM(java.nio.ByteBuffer,int) -> b
    boolean isValidPKM(java.nio.ByteBuffer,int) -> c
    void decodeImage(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int) -> a
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data -> com.a.a.e.c.b:
    int width -> a
    int height -> b
    java.nio.ByteBuffer compressedData -> c
    int dataOffset -> d
    void checkNPOT() -> b
    boolean hasPKMHeader() -> a
    void dispose() -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.glutils.ETC1TextureData -> com.a.a.e.c.c:
    com.badlogic.gdx.files.FileHandle file -> a
    com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data data -> b
    boolean useMipMaps -> c
    int width -> d
    int height -> e
    boolean isPrepared -> f
    int getType$7ed5d6f2() -> g
    boolean isPrepared() -> a
    void prepare() -> b
    void consumeCustomData(int) -> a
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> i
    boolean disposePixmap() -> j
    int getWidth() -> d
    int getHeight() -> e
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> k
    boolean useMipMaps() -> l
    boolean isManaged() -> f
com.badlogic.gdx.graphics.glutils.FileTextureData -> com.a.a.e.c.d:
    com.badlogic.gdx.files.FileHandle file -> a
    int width -> b
    int height -> c
    com.badlogic.gdx.graphics.Pixmap$Format format -> d
    com.badlogic.gdx.graphics.Pixmap pixmap -> e
    boolean useMipMaps -> f
    boolean isPrepared -> g
    boolean isPrepared() -> a
    void prepare() -> b
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> i
    boolean disposePixmap() -> j
    int getWidth() -> d
    int getHeight() -> e
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> k
    boolean useMipMaps() -> l
    boolean isManaged() -> f
    int getType$7ed5d6f2() -> g
    void consumeCustomData(int) -> a
com.badlogic.gdx.graphics.glutils.FrameBuffer -> com.a.a.e.c.e:
    void disposeColorTexture(com.badlogic.gdx.graphics.GLTexture) -> a
    com.badlogic.gdx.graphics.GLTexture createColorTexture() -> a
com.badlogic.gdx.graphics.glutils.GLFrameBuffer -> com.a.a.e.c.f:
    java.util.Map buffers -> d
    com.badlogic.gdx.graphics.GLTexture colorTexture -> e
    int defaultFramebufferHandle -> f
    boolean defaultFramebufferHandleInitialized -> g
    int framebufferHandle -> h
    int depthbufferHandle -> i
    int stencilbufferHandle -> j
    int depthStencilPackedBufferHandle -> k
    int width -> a
    int height -> b
    boolean hasDepth -> l
    boolean hasStencil -> m
    boolean hasDepthStencilPackedBuffer -> n
    com.badlogic.gdx.graphics.Pixmap$Format format -> c
    com.badlogic.gdx.graphics.GLTexture createColorTexture() -> a
    void disposeColorTexture(com.badlogic.gdx.graphics.GLTexture) -> a
    void dispose() -> c
    void invalidateAllFrameBuffers(com.badlogic.gdx.Application) -> a
    void clearAllFrameBuffers(com.badlogic.gdx.Application) -> b
    java.lang.StringBuilder getManagedStatus(java.lang.StringBuilder) -> a
    java.lang.String getManagedStatus() -> b
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData -> com.a.a.e.c.g:
    int width -> a
    int height -> b
    boolean isPrepared -> c
    int mipLevel -> d
    int internalFormat -> e
    int format -> f
    int type -> g
    int getType$7ed5d6f2() -> g
    boolean isPrepared() -> a
    void prepare() -> b
    void consumeCustomData(int) -> a
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> i
    boolean disposePixmap() -> j
    int getWidth() -> d
    int getHeight() -> e
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> k
    boolean useMipMaps() -> l
    boolean isManaged() -> f
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer -> com.a.a.e.c.h:
    void begin(com.badlogic.gdx.math.Matrix4,int) -> a
    void color(float,float,float,float) -> a
    void color(float) -> a
    void vertex(float,float,float) -> a
    void end() -> a
    int getNumVertices() -> b
    int getMaxVertices() -> c
    void dispose() -> d
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20 -> com.a.a.e.c.i:
    int primitiveType -> a
    int vertexIdx -> b
    int maxVertices -> c
    int numVertices -> d
    com.badlogic.gdx.graphics.Mesh mesh -> e
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> f
    boolean ownsShader -> g
    int numTexCoords -> h
    int vertexSize -> i
    int colorOffset -> j
    com.badlogic.gdx.math.Matrix4 projModelView -> k
    float[] vertices -> l
    java.lang.String[] shaderUniformNames -> m
    com.badlogic.gdx.graphics.VertexAttribute[] buildVertexAttributes(boolean,boolean,int) -> a
    void begin(com.badlogic.gdx.math.Matrix4,int) -> a
    void color(float,float,float,float) -> a
    void color(float) -> a
    void vertex(float,float,float) -> a
    void end() -> a
    int getNumVertices() -> b
    int getMaxVertices() -> c
    void dispose() -> d
    java.lang.String createVertexShader(boolean,boolean,int) -> b
    java.lang.String createFragmentShader$5fca6e8e(boolean,int) -> a
com.badlogic.gdx.graphics.glutils.IndexArray -> com.a.a.e.c.j:
    java.nio.ShortBuffer buffer -> a
    java.nio.ByteBuffer byteBuffer -> b
    boolean empty -> c
    int getNumIndices() -> a
    int getNumMaxIndices() -> b
    void setIndices(short[],int,int) -> a
    java.nio.ShortBuffer getBuffer() -> d
    void bind() -> e
    void unbind() -> f
    void invalidate() -> g
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.IndexBufferObject -> com.a.a.e.c.k:
    java.nio.ShortBuffer buffer -> a
    java.nio.ByteBuffer byteBuffer -> b
    int bufferHandle -> c
    boolean isDirty -> d
    boolean isBound -> e
    int usage -> f
    boolean empty -> g
    int getNumIndices() -> a
    int getNumMaxIndices() -> b
    void setIndices(short[],int,int) -> a
    java.nio.ShortBuffer getBuffer() -> d
    void bind() -> e
    void unbind() -> f
    void invalidate() -> g
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData -> com.a.a.e.c.l:
    java.nio.ShortBuffer buffer -> a
    java.nio.ByteBuffer byteBuffer -> b
    int bufferHandle -> c
    boolean isDirty -> d
    boolean isBound -> e
    int usage -> f
    int createBufferObject() -> h
    int getNumIndices() -> a
    int getNumMaxIndices() -> b
    void setIndices(short[],int,int) -> a
    java.nio.ShortBuffer getBuffer() -> d
    void bind() -> e
    void unbind() -> f
    void invalidate() -> g
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.IndexData -> com.a.a.e.c.m:
    int getNumIndices() -> a
    int getNumMaxIndices() -> b
    void setIndices(short[],int,int) -> a
    java.nio.ShortBuffer getBuffer() -> d
    void bind() -> e
    void unbind() -> f
    void invalidate() -> g
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.MipMapGenerator -> com.a.a.e.c.n:
    boolean useHWMipMap -> a
    void generateMipMap(int,com.badlogic.gdx.graphics.Pixmap,int,int) -> a
    void generateMipMapCPU(int,com.badlogic.gdx.graphics.Pixmap,int,int) -> b
com.badlogic.gdx.graphics.glutils.PixmapTextureData -> com.a.a.e.c.o:
    com.badlogic.gdx.graphics.Pixmap pixmap -> a
    com.badlogic.gdx.graphics.Pixmap$Format format -> b
    boolean useMipMaps -> c
    boolean disposePixmap -> d
    boolean managed -> e
    boolean disposePixmap() -> j
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> i
    int getWidth() -> d
    int getHeight() -> e
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> k
    boolean useMipMaps() -> l
    boolean isManaged() -> f
    int getType$7ed5d6f2() -> g
    void consumeCustomData(int) -> a
    boolean isPrepared() -> a
    void prepare() -> b
com.badlogic.gdx.graphics.glutils.ShaderProgram -> com.a.a.e.c.p:
    boolean pedantic -> a
    java.lang.String prependVertexCode -> b
    java.lang.String prependFragmentCode -> c
    com.badlogic.gdx.utils.ObjectMap shaders -> d
    java.lang.String log -> e
    boolean isCompiled -> f
    com.badlogic.gdx.utils.ObjectIntMap uniforms -> g
    com.badlogic.gdx.utils.ObjectIntMap uniformTypes -> h
    com.badlogic.gdx.utils.ObjectIntMap uniformSizes -> i
    java.lang.String[] uniformNames -> j
    com.badlogic.gdx.utils.ObjectIntMap attributes -> k
    com.badlogic.gdx.utils.ObjectIntMap attributeTypes -> l
    com.badlogic.gdx.utils.ObjectIntMap attributeSizes -> m
    java.lang.String[] attributeNames -> n
    int program -> o
    int vertexShaderHandle -> p
    int fragmentShaderHandle -> q
    java.lang.String vertexShaderSource -> r
    java.lang.String fragmentShaderSource -> s
    boolean invalidated -> t
    java.nio.IntBuffer params -> u
    java.nio.IntBuffer type -> v
    void compileShaders(java.lang.String,java.lang.String) -> a
    int loadShader(int,java.lang.String) -> a
    java.lang.String getLog() -> a
    boolean isCompiled() -> b
    int fetchUniformLocation(java.lang.String) -> c
    void setUniformi(java.lang.String,int) -> a
    void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4) -> a
    void setVertexAttribute(int,int,int,boolean,int,java.nio.Buffer) -> a
    void setVertexAttribute(int,int,int,boolean,int,int) -> a
    void begin() -> d
    void end() -> e
    void dispose() -> c
    void disableVertexAttribute(java.lang.String) -> a
    void disableVertexAttribute(int) -> a
    void enableVertexAttribute(int) -> b
    void checkManaged() -> g
    void invalidateAllShaderPrograms(com.badlogic.gdx.Application) -> a
    void clearAllShaderPrograms(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> f
    void fetchUniforms() -> h
    void fetchAttributes() -> i
    int getAttributeLocation(java.lang.String) -> b
com.badlogic.gdx.graphics.glutils.ShapeRenderer -> com.a.a.e.c.q:
    com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer renderer -> a
    boolean matrixDirty -> b
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> c
    com.badlogic.gdx.math.Matrix4 transformMatrix -> d
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> e
    com.badlogic.gdx.graphics.Color color -> f
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType shapeType -> g
    boolean autoShapeType -> h
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setColor(float,float,float,float) -> a
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> a
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> b
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> a
    void setAutoShapeType(boolean) -> a
    void begin() -> b
    void begin(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType) -> a
    void set(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType) -> b
    void rect(float,float,float,float) -> b
    void rect(float,float,float,float,float,float,float,float,float) -> a
    void check(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType,com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType,int) -> a
    void end() -> d
    void flush() -> e
    boolean isDrawing() -> f
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType -> com.a.a.e.c.r:
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Point -> c
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Line -> a
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Filled -> b
    int glType -> d
    int getGlType() -> a
com.badlogic.gdx.graphics.glutils.VertexArray -> com.a.a.e.c.s:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    void dispose() -> c
    java.nio.FloatBuffer getBuffer() -> a
    int getNumVertices() -> b
    void setVertices(float[],int,int) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> d
    void invalidate() -> e
com.badlogic.gdx.graphics.glutils.VertexBufferObject -> com.a.a.e.c.t:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    boolean ownsBuffer -> d
    int bufferHandle -> e
    int usage -> f
    boolean isDirty -> g
    boolean isBound -> h
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> d
    int getNumVertices() -> b
    java.nio.FloatBuffer getBuffer() -> a
    void setVertices(float[],int,int) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void invalidate() -> e
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData -> com.a.a.e.c.u:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    int bufferHandle -> d
    boolean isDirect -> e
    int usage -> f
    boolean isDirty -> g
    boolean isBound -> h
    int createBufferObject() -> f
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> d
    int getNumVertices() -> b
    java.nio.FloatBuffer getBuffer() -> a
    void setVertices(float[],int,int) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void invalidate() -> e
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO -> com.a.a.e.c.v:
    java.nio.IntBuffer tmpHandle -> a
    com.badlogic.gdx.graphics.VertexAttributes attributes -> b
    java.nio.FloatBuffer buffer -> c
    java.nio.ByteBuffer byteBuffer -> d
    int bufferHandle -> e
    int usage -> f
    boolean isDirty -> g
    boolean isBound -> h
    boolean vaoDirty -> i
    int vaoHandle -> j
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> d
    int getNumVertices() -> b
    java.nio.FloatBuffer getBuffer() -> a
    void setVertices(float[],int,int) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void invalidate() -> e
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.VertexData -> com.a.a.e.c.w:
    int getNumVertices() -> b
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> d
    void setVertices(float[],int,int) -> a
    java.nio.FloatBuffer getBuffer() -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void invalidate() -> e
    void dispose() -> c
com.badlogic.gdx.input.GestureDetector -> com.a.a.f.a:
    com.badlogic.gdx.input.GestureDetector$GestureListener listener -> l
    float tapSquareSize -> o
    long tapCountInterval -> p
    float longPressSeconds -> q
    long maxFlingDelay -> r
    boolean inTapSquare -> s
    int tapCount -> t
    long lastTapTime -> u
    float lastTapX -> v
    float lastTapY -> w
    int lastTapButton -> x
    int lastTapPointer -> y
    boolean longPressFired -> m
    boolean pinching -> z
    boolean panning -> A
    com.badlogic.gdx.input.GestureDetector$VelocityTracker tracker -> B
    float tapSquareCenterX -> C
    float tapSquareCenterY -> D
    long gestureStartTime -> E
    com.badlogic.gdx.math.Vector2 pointer1 -> n
    com.badlogic.gdx.math.Vector2 pointer2 -> F
    com.badlogic.gdx.math.Vector2 initialPointer1 -> G
    com.badlogic.gdx.math.Vector2 initialPointer2 -> H
    com.badlogic.gdx.utils.Timer$Task longPressTask -> I
    boolean touchDown(int,int,int,int) -> a
    boolean touchDown(float,float,int,int) -> a
    boolean touchDragged(int,int,int) -> a
    boolean touchDragged(float,float,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchUp(float,float,int,int) -> b
    void cancel() -> a
    boolean isPanning() -> b
    boolean isWithinTapSquare(float,float,float,float) -> a
com.badlogic.gdx.input.GestureDetector$1 -> com.a.a.f.b:
    com.badlogic.gdx.input.GestureDetector this$0 -> e
    void run() -> run
com.badlogic.gdx.input.GestureDetector$GestureAdapter -> com.a.a.f.c:
    boolean touchDown$4096cea7(float,float,int) -> a
    boolean tap(float,float,int,int) -> a
    boolean longPress(float,float) -> a
    boolean fling(float,float,int) -> b
    boolean pan(float,float,float,float) -> a
    boolean panStop$4096cea7() -> a
    boolean zoom(float,float) -> b
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
com.badlogic.gdx.input.GestureDetector$GestureListener -> com.a.a.f.d:
    boolean touchDown$4096cea7(float,float,int) -> a
    boolean tap(float,float,int,int) -> a
    boolean longPress(float,float) -> a
    boolean fling(float,float,int) -> b
    boolean pan(float,float,float,float) -> a
    boolean panStop$4096cea7() -> a
    boolean zoom(float,float) -> b
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
com.badlogic.gdx.input.GestureDetector$VelocityTracker -> com.a.a.f.e:
    int sampleSize -> d
    float lastX -> e
    float lastY -> f
    float deltaX -> a
    float deltaY -> b
    long lastTime -> c
    int numSamples -> g
    float[] meanX -> h
    float[] meanY -> i
    long[] meanTime -> j
    void start(float,float,long) -> a
    void update(float,float,long) -> b
    float getVelocityX() -> a
    float getVelocityY() -> b
    float getAverage(float[],int) -> a
    long getAverage(long[],int) -> a
com.badlogic.gdx.math.Affine2 -> com.a.a.g.a:
    float m00 -> a
    float m01 -> b
    float m02 -> c
    float m10 -> d
    float m11 -> e
    float m12 -> f
    java.lang.String toString() -> toString
com.badlogic.gdx.math.Circle -> com.a.a.g.b:
    float x -> a
    float y -> b
    float radius -> c
    void set(float,float,float) -> a
    boolean contains(float,float) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.badlogic.gdx.math.EarClippingTriangulator -> com.a.a.g.c:
    com.badlogic.gdx.utils.ShortArray indicesArray -> a
    short[] indices -> b
    float[] vertices -> c
    int vertexCount -> d
    com.badlogic.gdx.utils.IntArray vertexTypes -> e
    com.badlogic.gdx.utils.ShortArray triangles -> f
    com.badlogic.gdx.utils.ShortArray computeTriangles(float[],int,int) -> a
    int classifyVertex(int) -> a
    int previousIndex(int) -> b
    int nextIndex(int) -> c
    int computeSpannedAreaSign(float,float,float,float,float,float) -> a
com.badlogic.gdx.math.Frustum -> com.a.a.g.d:
    com.badlogic.gdx.math.Vector3[] clipSpacePlanePoints -> a
    float[] clipSpacePlanePointsArray -> b
    com.badlogic.gdx.math.Plane[] planes -> c
    com.badlogic.gdx.math.Vector3[] planePoints -> d
    float[] planePointsArray -> e
    void update(com.badlogic.gdx.math.Matrix4) -> a
com.badlogic.gdx.math.Interpolation -> com.a.a.g.e:
    com.badlogic.gdx.math.Interpolation linear -> a
    com.badlogic.gdx.math.Interpolation fade -> b
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$1 -> com.a.a.g.f:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$2 -> com.a.a.g.g:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$3 -> com.a.a.g.h:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$4 -> com.a.a.g.i:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$5 -> com.a.a.g.j:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$6 -> com.a.a.g.k:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$7 -> com.a.a.g.l:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$8 -> com.a.a.g.m:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Bounce -> com.a.a.g.n:
    float out(float) -> b
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$BounceIn -> com.a.a.g.o:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$BounceOut -> com.a.a.g.p:
    float[] widths -> c
    float[] heights -> d
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Elastic -> com.a.a.g.q:
    float value -> c
    float power -> d
    float scale -> e
    float bounces -> f
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$ElasticIn -> com.a.a.g.r:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$ElasticOut -> com.a.a.g.s:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Exp -> com.a.a.g.t:
    float value -> c
    float power -> d
    float min -> e
    float scale -> f
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$ExpIn -> com.a.a.g.u:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$ExpOut -> com.a.a.g.v:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Pow -> com.a.a.g.w:
    int power -> c
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$PowIn -> com.a.a.g.x:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$PowOut -> com.a.a.g.y:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Swing -> com.a.a.g.z:
    float scale -> c
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$SwingIn -> com.a.a.g.A:
    float scale -> c
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$SwingOut -> com.a.a.g.B:
    float scale -> c
    float apply(float) -> a
com.badlogic.gdx.math.MathUtils -> com.a.a.g.C:
    java.util.Random random -> a
    float sin(float) -> a
    float cos(float) -> b
    float sinDeg(float) -> c
    float cosDeg(float) -> d
    int random(int) -> a
    int nextPowerOfTwo(int) -> b
    boolean isPowerOfTwo(int) -> c
    float clamp(float,float,float) -> a
    boolean isEqual(float,float) -> a
com.badlogic.gdx.math.MathUtils$Sin -> com.a.a.g.D:
    float[] table -> a
com.badlogic.gdx.math.Matrix3 -> com.a.a.g.E:
    float[] val -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.math.Matrix4 -> com.a.a.g.F:
    float[] tmp -> b
    float[] val -> a
    com.badlogic.gdx.math.Vector3 l_vez -> c
    com.badlogic.gdx.math.Vector3 l_vex -> d
    com.badlogic.gdx.math.Vector3 l_vey -> e
    com.badlogic.gdx.math.Vector3 tmpVec -> f
    com.badlogic.gdx.math.Matrix4 tmpMat -> g
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Matrix4) -> a
    com.badlogic.gdx.math.Matrix4 mul(com.badlogic.gdx.math.Matrix4) -> b
    com.badlogic.gdx.math.Matrix4 idt() -> b
    com.badlogic.gdx.math.Matrix4 inv() -> a
    com.badlogic.gdx.math.Matrix4 setToOrtho2D(float,float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToOrtho(float,float,float,float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    java.lang.String toString() -> toString
    void mul(float[],float[]) -> a
    void prj(float[],float[],int,int,int) -> a
    boolean inv(float[]) -> a
    com.badlogic.gdx.math.Matrix4 translate(float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 rotate(com.badlogic.gdx.math.Quaternion) -> a
    com.badlogic.gdx.math.Matrix4 scale(float,float,float) -> b
com.badlogic.gdx.math.Plane -> com.a.a.g.G:
    com.badlogic.gdx.math.Vector3 normal -> a
    float d -> b
    void set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.math.Quaternion -> com.a.a.g.H:
    float x -> a
    float y -> b
    float z -> c
    float w -> d
    com.badlogic.gdx.math.Quaternion set(float,float,float,float) -> a
    com.badlogic.gdx.math.Quaternion set(com.badlogic.gdx.math.Quaternion) -> a
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.math.RandomXS128 -> com.a.a.g.I:
    long seed0 -> a
    long seed1 -> b
    long nextLong() -> nextLong
    int next(int) -> next
    int nextInt() -> nextInt
    int nextInt(int) -> nextInt
    double nextDouble() -> nextDouble
    float nextFloat() -> nextFloat
    boolean nextBoolean() -> nextBoolean
    void nextBytes(byte[]) -> nextBytes
    void setSeed(long) -> setSeed
    long murmurHash3(long) -> a
com.badlogic.gdx.math.Rectangle -> com.a.a.g.J:
    com.badlogic.gdx.math.Rectangle tmp -> a
    float x -> b
    float y -> c
    float width -> d
    float height -> e
    com.badlogic.gdx.math.Rectangle set(float,float,float,float) -> a
    boolean contains(float,float) -> a
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.math.Vector2 -> com.a.a.g.K:
    float x -> a
    float y -> b
    float len() -> a
    com.badlogic.gdx.math.Vector2 set(com.badlogic.gdx.math.Vector2) -> a
    com.badlogic.gdx.math.Vector2 set(float,float) -> a
    com.badlogic.gdx.math.Vector2 scl(float) -> a
    float dst(com.badlogic.gdx.math.Vector2) -> b
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.math.Vector3 -> com.a.a.g.L:
    float x -> a
    float y -> b
    float z -> c
    com.badlogic.gdx.math.Vector3 set(float,float,float) -> a
    com.badlogic.gdx.math.Vector3 set(com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.Vector3 add(com.badlogic.gdx.math.Vector3) -> b
    com.badlogic.gdx.math.Vector3 sub(com.badlogic.gdx.math.Vector3) -> c
    com.badlogic.gdx.math.Vector3 scl(float) -> a
    com.badlogic.gdx.math.Vector3 nor() -> a
    com.badlogic.gdx.math.Vector3 crs(com.badlogic.gdx.math.Vector3) -> d
    com.badlogic.gdx.math.Vector3 mul(com.badlogic.gdx.math.Matrix4) -> a
    com.badlogic.gdx.math.Vector3 prj(com.badlogic.gdx.math.Matrix4) -> b
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.math.WindowedMean -> com.a.a.g.M:
    float[] values -> a
    int added_values -> b
    int last_value -> c
    float mean -> d
    boolean dirty -> e
    void clear() -> a
    void addValue(float) -> a
    float getMean() -> b
com.badlogic.gdx.math.collision.BoundingBox -> com.a.a.g.a.a:
    com.badlogic.gdx.math.Vector3 min -> a
    com.badlogic.gdx.math.Vector3 max -> b
    com.badlogic.gdx.math.Vector3 cnt -> c
    com.badlogic.gdx.math.Vector3 dim -> d
    com.badlogic.gdx.math.Vector3 getCenter(com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.Vector3 getDimensions(com.badlogic.gdx.math.Vector3) -> b
    com.badlogic.gdx.math.collision.BoundingBox set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.collision.BoundingBox inf() -> a
    com.badlogic.gdx.math.collision.BoundingBox ext(com.badlogic.gdx.math.Vector3) -> c
    java.lang.String toString() -> toString
    float min(float,float) -> a
com.badlogic.gdx.math.collision.Ray -> com.a.a.g.a.b:
    com.badlogic.gdx.math.Vector3 origin -> a
    com.badlogic.gdx.math.Vector3 direction -> b
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.badlogic.gdx.net.NetJavaImpl -> com.a.a.h.a:
com.badlogic.gdx.scenes.scene2d.Action -> com.a.a.i.a.a:
    com.badlogic.gdx.scenes.scene2d.Actor target -> a
    boolean act$133aef() -> b
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.Actor -> com.a.a.i.a.b:
    com.badlogic.gdx.scenes.scene2d.Stage stage -> i
    com.badlogic.gdx.scenes.scene2d.Group parent -> a
    com.badlogic.gdx.utils.DelayedRemovalArray listeners -> j
    com.badlogic.gdx.utils.DelayedRemovalArray captureListeners -> k
    com.badlogic.gdx.utils.Array actions -> l
    int touchable$6af6016b -> m
    boolean visible -> n
    boolean debug -> o
    float x -> b
    float y -> c
    float width -> d
    float height -> e
    float scaleX -> f
    float scaleY -> g
    com.badlogic.gdx.graphics.Color color -> h
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void act(float) -> a
    boolean fire(com.badlogic.gdx.scenes.scene2d.Event) -> a
    boolean notify(com.badlogic.gdx.scenes.scene2d.Event,boolean) -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    boolean remove() -> a
    boolean addListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> a
    boolean addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> b
    void clear() -> b
    com.badlogic.gdx.scenes.scene2d.Stage getStage() -> c
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    boolean isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    boolean hasParent() -> d
    com.badlogic.gdx.scenes.scene2d.Group getParent() -> e
    int getTouchable$340eba36() -> f
    void setTouchable$7fd68730(int) -> a
    boolean isVisible() -> g
    void setVisible(boolean) -> a
    float getX() -> h
    float getY() -> i
    void setPosition(float,float) -> a
    void setPosition(float,float,int) -> a
    float getWidth() -> j
    void setWidth(float) -> b
    float getHeight() -> k
    void setHeight(float) -> c
    void sizeChanged() -> l
    void setSize(float,float) -> b
    void setBounds(float,float,float,float) -> a
    float getScaleX() -> m
    float getScaleY() -> n
    void setScale(float) -> d
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setColor(float,float,float,float) -> b
    com.badlogic.gdx.graphics.Color getColor() -> o
    void setZIndex(int) -> b
    com.badlogic.gdx.math.Vector2 stageToLocalCoordinates(com.badlogic.gdx.math.Vector2) -> a
    com.badlogic.gdx.math.Vector2 parentToLocalCoordinates(com.badlogic.gdx.math.Vector2) -> b
    void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> a
    void drawDebugBounds(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> b
    void setDebug(boolean) -> b
    boolean getDebug() -> p
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.Event -> com.a.a.i.a.c:
    com.badlogic.gdx.scenes.scene2d.Stage stage -> a
    com.badlogic.gdx.scenes.scene2d.Actor targetActor -> b
    com.badlogic.gdx.scenes.scene2d.Actor listenerActor -> c
    boolean bubbles -> d
    boolean handled -> e
    boolean stopped -> f
    boolean cancelled -> g
    void handle() -> b
    void stop() -> c
    void reset() -> a
    com.badlogic.gdx.scenes.scene2d.Actor getTarget() -> d
    void setTarget(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    com.badlogic.gdx.scenes.scene2d.Actor getListenerActor() -> e
    void setListenerActor(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    boolean getBubbles() -> f
    boolean isHandled() -> g
    boolean isStopped() -> h
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    com.badlogic.gdx.scenes.scene2d.Stage getStage() -> i
com.badlogic.gdx.scenes.scene2d.EventListener -> com.a.a.i.a.d:
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
com.badlogic.gdx.scenes.scene2d.Group -> com.a.a.i.a.e:
    com.badlogic.gdx.math.Vector2 tmp -> j
    com.badlogic.gdx.utils.SnapshotArray children -> i
    com.badlogic.gdx.math.Affine2 worldTransform -> k
    com.badlogic.gdx.math.Matrix4 computedTransform -> l
    com.badlogic.gdx.math.Matrix4 oldTransform -> m
    boolean transform -> n
    com.badlogic.gdx.math.Rectangle cullingArea -> o
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void drawChildren(com.badlogic.gdx.graphics.g2d.Batch,float) -> b
    void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> a
    void drawDebugChildren(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> c
    com.badlogic.gdx.math.Matrix4 computeTransform() -> q
    void applyTransform(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.math.Matrix4) -> a
    void resetTransform(com.badlogic.gdx.graphics.g2d.Batch) -> a
    void applyTransform(com.badlogic.gdx.graphics.glutils.ShapeRenderer,com.badlogic.gdx.math.Matrix4) -> a
    void resetTransform(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> d
    void setCullingArea(com.badlogic.gdx.math.Rectangle) -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    void childrenChanged() -> r
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean) -> a
    void clearChildren() -> s
    void clear() -> b
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    com.badlogic.gdx.utils.SnapshotArray getChildren() -> t
    void setTransform(boolean) -> c
    boolean isTransform() -> g_
    java.lang.String toString() -> toString
    void toString(java.lang.StringBuilder,int) -> a
com.badlogic.gdx.scenes.scene2d.InputEvent -> com.a.a.i.a.f:
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type type -> a
    float stageX -> b
    float stageY -> c
    int pointer -> d
    int button -> e
    int keyCode -> f
    int scrollAmount -> g
    char character -> h
    com.badlogic.gdx.scenes.scene2d.Actor relatedActor -> i
    void reset() -> a
    float getStageX() -> j
    void setStageX(float) -> a
    float getStageY() -> k
    void setStageY(float) -> b
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type getType() -> l
    void setType(com.badlogic.gdx.scenes.scene2d.InputEvent$Type) -> a
    int getPointer() -> m
    void setPointer(int) -> a
    int getButton() -> n
    void setButton(int) -> b
    void setKeyCode(int) -> c
    char getCharacter() -> o
    void setCharacter(char) -> a
    int getScrollAmount() -> p
    void setScrollAmount(int) -> d
    void setRelatedActor(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    com.badlogic.gdx.math.Vector2 toCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2) -> a
    boolean isTouchFocusCancel() -> q
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.InputEvent$Type -> com.a.a.i.a.g:
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchDown -> a
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchUp -> b
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchDragged -> c
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type mouseMoved -> d
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type enter -> e
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type exit -> f
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type scrolled -> g
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyDown -> h
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyUp -> i
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyTyped -> j
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type[] $VALUES -> k
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type[] values() -> a
com.badlogic.gdx.scenes.scene2d.InputListener -> com.a.a.i.a.h:
    com.badlogic.gdx.math.Vector2 tmpCoords -> a
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    boolean mouseMoved$43069385() -> a
    void enter$6049651d(int) -> a
    void exit$6049651d(int) -> b
    boolean scrolled$1dcb6a90(int) -> c
    boolean keyTyped$3bf802d6(char) -> a
com.badlogic.gdx.scenes.scene2d.InputListener$1 -> com.a.a.i.a.i:
    int[] $SwitchMap$com$badlogic$gdx$scenes$scene2d$InputEvent$Type -> a
com.badlogic.gdx.scenes.scene2d.Stage -> com.a.a.i.a.j:
    boolean debug -> l
    com.badlogic.gdx.utils.viewport.Viewport viewport -> m
    com.badlogic.gdx.graphics.g2d.Batch batch -> n
    boolean ownsBatch -> o
    com.badlogic.gdx.scenes.scene2d.Group root -> p
    com.badlogic.gdx.math.Vector2 tempCoords -> q
    com.badlogic.gdx.scenes.scene2d.Actor[] pointerOverActors -> r
    boolean[] pointerTouched -> s
    int[] pointerScreenX -> t
    int[] pointerScreenY -> u
    int mouseScreenX -> v
    int mouseScreenY -> w
    com.badlogic.gdx.scenes.scene2d.Actor mouseOverActor -> x
    com.badlogic.gdx.scenes.scene2d.Actor keyboardFocus -> y
    com.badlogic.gdx.scenes.scene2d.Actor scrollFocus -> z
    com.badlogic.gdx.utils.SnapshotArray touchFocuses -> A
    boolean actionsRequestRendering -> B
    com.badlogic.gdx.graphics.glutils.ShapeRenderer debugShapes -> C
    int debugTableUnderMouse$7abc83b0 -> D
    com.badlogic.gdx.graphics.Color debugColor -> E
    void draw() -> a
    void disableDebug(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void act() -> b
    void act(float) -> a
    com.badlogic.gdx.scenes.scene2d.Actor fireEnterAndExit(com.badlogic.gdx.scenes.scene2d.Actor,int,int,int) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchDragged(int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean mouseMoved(int,int) -> a
    boolean scrolled(int) -> c
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    void addTouchFocus(com.badlogic.gdx.scenes.scene2d.EventListener,com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,int,int) -> a
    void cancelTouchFocusExcept(com.badlogic.gdx.scenes.scene2d.EventListener,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    boolean addListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> a
    void clear() -> d
    void unfocus(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    void setScrollFocus(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    com.badlogic.gdx.utils.viewport.Viewport getViewport() -> e
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    com.badlogic.gdx.math.Vector2 screenToStageCoordinates(com.badlogic.gdx.math.Vector2) -> a
    void calculateScissors(com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> a
    boolean getActionsRequestRendering() -> f
    com.badlogic.gdx.graphics.Color getDebugColor() -> g
    void dispose() -> c
com.badlogic.gdx.scenes.scene2d.Stage$TouchFocus -> com.a.a.i.a.k:
    com.badlogic.gdx.scenes.scene2d.EventListener listener -> a
    com.badlogic.gdx.scenes.scene2d.Actor listenerActor -> b
    com.badlogic.gdx.scenes.scene2d.Actor target -> c
    int pointer -> d
    int button -> e
    void reset() -> a
com.badlogic.gdx.scenes.scene2d.ui.Cell -> com.a.a.i.a.a.a:
    java.lang.Float zerof -> J
    java.lang.Float onef -> K
    java.lang.Integer zeroi -> L
    java.lang.Integer onei -> M
    java.lang.Integer centeri -> N
    java.lang.Integer topi -> O
    java.lang.Integer lefti -> P
    java.lang.Integer righti -> Q
    com.badlogic.gdx.Files files -> R
    com.badlogic.gdx.scenes.scene2d.ui.Cell defaults -> S
    com.badlogic.gdx.scenes.scene2d.ui.Value minWidth -> a
    com.badlogic.gdx.scenes.scene2d.ui.Value minHeight -> b
    com.badlogic.gdx.scenes.scene2d.ui.Value prefWidth -> c
    com.badlogic.gdx.scenes.scene2d.ui.Value prefHeight -> d
    com.badlogic.gdx.scenes.scene2d.ui.Value maxWidth -> e
    com.badlogic.gdx.scenes.scene2d.ui.Value maxHeight -> f
    com.badlogic.gdx.scenes.scene2d.ui.Value spaceTop -> g
    com.badlogic.gdx.scenes.scene2d.ui.Value spaceLeft -> h
    com.badlogic.gdx.scenes.scene2d.ui.Value spaceBottom -> i
    com.badlogic.gdx.scenes.scene2d.ui.Value spaceRight -> j
    com.badlogic.gdx.scenes.scene2d.ui.Value padTop -> k
    com.badlogic.gdx.scenes.scene2d.ui.Value padLeft -> l
    com.badlogic.gdx.scenes.scene2d.ui.Value padBottom -> m
    com.badlogic.gdx.scenes.scene2d.ui.Value padRight -> n
    java.lang.Float fillX -> o
    java.lang.Float fillY -> p
    java.lang.Integer align -> q
    java.lang.Integer expandX -> r
    java.lang.Integer expandY -> s
    java.lang.Integer colspan -> t
    java.lang.Boolean uniformX -> u
    java.lang.Boolean uniformY -> v
    com.badlogic.gdx.scenes.scene2d.Actor actor -> w
    float actorX -> x
    float actorY -> y
    float actorWidth -> z
    float actorHeight -> A
    com.badlogic.gdx.scenes.scene2d.ui.Table table -> T
    boolean endRow -> B
    int column -> C
    int row -> D
    int cellAboveIndex -> E
    float computedPadTop -> F
    float computedPadLeft -> G
    float computedPadBottom -> H
    float computedPadRight -> I
    void setLayout(com.badlogic.gdx.scenes.scene2d.ui.Table) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Cell minWidth(float) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Cell minHeight(float) -> b
    com.badlogic.gdx.scenes.scene2d.ui.Cell prefSize(float,float) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Cell prefSize(float) -> c
    com.badlogic.gdx.scenes.scene2d.ui.Cell prefWidth(float) -> d
    com.badlogic.gdx.scenes.scene2d.ui.Cell prefHeight(float) -> e
    com.badlogic.gdx.scenes.scene2d.ui.Cell maxSize(float) -> f
    com.badlogic.gdx.scenes.scene2d.ui.Cell maxWidth(float) -> g
    com.badlogic.gdx.scenes.scene2d.ui.Cell pad(float) -> h
    com.badlogic.gdx.scenes.scene2d.ui.Cell padTop(float) -> i
    com.badlogic.gdx.scenes.scene2d.ui.Cell padLeft(float) -> j
    com.badlogic.gdx.scenes.scene2d.ui.Cell padBottom(float) -> k
    com.badlogic.gdx.scenes.scene2d.ui.Cell padRight(float) -> l
    com.badlogic.gdx.scenes.scene2d.ui.Cell fill() -> b
    com.badlogic.gdx.scenes.scene2d.ui.Cell fillX() -> c
    com.badlogic.gdx.scenes.scene2d.ui.Cell fillY() -> d
    com.badlogic.gdx.scenes.scene2d.ui.Cell align(int) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Cell center() -> e
    com.badlogic.gdx.scenes.scene2d.ui.Cell top() -> f
    com.badlogic.gdx.scenes.scene2d.ui.Cell left() -> g
    com.badlogic.gdx.scenes.scene2d.ui.Cell right() -> h
    com.badlogic.gdx.scenes.scene2d.ui.Cell expand() -> i
    com.badlogic.gdx.scenes.scene2d.ui.Cell expandX() -> j
    com.badlogic.gdx.scenes.scene2d.ui.Cell expandY() -> k
    void row() -> l
    void reset() -> a
    void set(com.badlogic.gdx.scenes.scene2d.ui.Cell) -> a
    void merge(com.badlogic.gdx.scenes.scene2d.ui.Cell) -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.ui.Image -> com.a.a.i.a.a.b:
    com.badlogic.gdx.utils.Scaling scaling -> i
    int align -> j
    float imageX -> k
    float imageY -> l
    float imageWidth -> m
    float imageHeight -> n
    com.badlogic.gdx.scenes.scene2d.utils.Drawable drawable -> o
    void layout() -> q
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void setScaling(com.badlogic.gdx.utils.Scaling) -> a
    float getMinWidth() -> d_
    float getMinHeight() -> e_
    float getPrefWidth() -> c_
    float getPrefHeight() -> u
com.badlogic.gdx.scenes.scene2d.ui.Label -> com.a.a.i.a.a.c:
    com.badlogic.gdx.graphics.Color tempColor -> i
    com.badlogic.gdx.graphics.g2d.GlyphLayout prefSizeLayout -> j
    com.badlogic.gdx.graphics.g2d.GlyphLayout layout -> k
    com.badlogic.gdx.math.Vector2 prefSize -> l
    com.badlogic.gdx.utils.StringBuilder text -> m
    com.badlogic.gdx.graphics.g2d.BitmapFontCache cache -> n
    int labelAlign -> o
    int lineAlign -> p
    boolean wrap -> q
    float lastPrefHeight -> r
    boolean prefSizeInvalid -> s
    float fontScaleX -> t
    float fontScaleY -> u
    void setText(java.lang.CharSequence) -> a
    void invalidate() -> v
    void scaleAndComputePrefSize() -> w
    void layout() -> q
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    float getPrefWidth() -> c_
    float getPrefHeight() -> u
    void setWrap(boolean) -> c
    void setAlignment(int) -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle -> com.a.a.i.a.a.d:
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar -> com.a.a.i.a.a.e:
    com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle style -> i
    float min -> j
    float max -> k
    float stepSize -> l
    float value -> m
    float animateFromValue -> n
    float position -> o
    boolean vertical -> p
    float animateTime -> q
    com.badlogic.gdx.math.Interpolation animateInterpolation -> r
    com.badlogic.gdx.math.Interpolation visualInterpolation -> s
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    float getVisualValue() -> w
    boolean setValue(float) -> e
    float getPrefWidth() -> c_
    float getPrefHeight() -> u
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle -> com.a.a.i.a.a.f:
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane -> com.a.a.i.a.a.g:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle style -> G
    com.badlogic.gdx.scenes.scene2d.Actor widget -> H
    com.badlogic.gdx.math.Rectangle hScrollBounds -> j
    com.badlogic.gdx.math.Rectangle vScrollBounds -> k
    com.badlogic.gdx.math.Rectangle hKnobBounds -> l
    com.badlogic.gdx.math.Rectangle vKnobBounds -> m
    com.badlogic.gdx.math.Rectangle widgetAreaBounds -> I
    com.badlogic.gdx.math.Rectangle widgetCullingArea -> J
    com.badlogic.gdx.math.Rectangle scissorBounds -> K
    com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener flickScrollListener -> L
    boolean scrollX -> n
    boolean scrollY -> o
    boolean vScrollOnRight -> M
    boolean hScrollOnBottom -> N
    float amountX -> p
    float amountY -> q
    float visualAmountX -> O
    float visualAmountY -> P
    float maxX -> r
    float maxY -> s
    boolean touchScrollH -> t
    boolean touchScrollV -> u
    com.badlogic.gdx.math.Vector2 lastPoint -> v
    float areaWidth -> w
    float areaHeight -> x
    boolean fadeScrollBars -> Q
    boolean smoothScrolling -> R
    float fadeAlpha -> y
    float fadeAlphaSeconds -> S
    float fadeDelay -> T
    float fadeDelaySeconds -> U
    boolean cancelTouchFocus -> z
    boolean flickScroll -> A
    float velocityX -> B
    float velocityY -> C
    float flingTimer -> D
    boolean overscrollX -> V
    boolean overscrollY -> W
    float flingTime -> E
    float overscrollDistance -> X
    float overscrollSpeedMin -> Y
    float overscrollSpeedMax -> Z
    boolean forceScrollX -> aa
    boolean forceScrollY -> ab
    boolean clamp -> ac
    boolean variableSizeKnobs -> ad
    int draggingPointer -> F
    void resetFade() -> a_
    void cancelTouchFocus() -> w
    void cancel() -> x
    void clamp() -> y
    void act(float) -> a
    void layout() -> b_
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    float getPrefWidth() -> c_
    float getPrefHeight() -> u
    float getMinWidth() -> d_
    float getMinHeight() -> e_
    void setWidget(com.badlogic.gdx.scenes.scene2d.Actor) -> d
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    void setScrollX(float) -> e
    void setScrollY(float) -> f
    float getScrollY() -> A
    void setScrollPercentX(float) -> g
    void setScrollPercentY(float) -> h
    float getMaxY() -> B
    void setForceScroll(boolean,boolean) -> a
    void setScrollBarPositions(boolean,boolean) -> b
    void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> a
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$1 -> com.a.a.i.a.a.h:
    float handlePosition -> a
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0 -> b
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    boolean mouseMoved$43069385() -> a
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$2 -> com.a.a.i.a.a.i:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0 -> e
    void pan$645d22b7(float,float) -> a
    void fling$1dcb6a94(float,float) -> b
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$3 -> com.a.a.i.a.a.j:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0 -> a
    boolean scrolled$1dcb6a90(int) -> c
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle -> com.a.a.i.a.a.k:
com.badlogic.gdx.scenes.scene2d.ui.Skin -> com.a.a.i.a.a.l:
    com.badlogic.gdx.utils.ObjectMap resources -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas atlas -> b
    void load(com.badlogic.gdx.files.FileHandle) -> a
    void addRegions(com.badlogic.gdx.graphics.g2d.TextureAtlas) -> a
    void add(java.lang.String,java.lang.Object,java.lang.Class) -> a
    java.lang.Object get(java.lang.String,java.lang.Class) -> a
    java.lang.Object optional(java.lang.String,java.lang.Class) -> b
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion(java.lang.String) -> c
    com.badlogic.gdx.graphics.g2d.NinePatch getPatch(java.lang.String) -> a
    com.badlogic.gdx.graphics.g2d.Sprite getSprite(java.lang.String) -> d
    com.badlogic.gdx.scenes.scene2d.utils.Drawable getDrawable(java.lang.String) -> b
    void dispose() -> c
com.badlogic.gdx.scenes.scene2d.ui.Skin$1 -> com.a.a.i.a.a.m:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    java.lang.Object readValue(java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$2 -> com.a.a.i.a.a.n:
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> b
    com.badlogic.gdx.scenes.scene2d.ui.Skin read$7d79b7b7(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$3 -> com.a.a.i.a.a.o:
    com.badlogic.gdx.files.FileHandle val$skinFile -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> b
    com.badlogic.gdx.graphics.g2d.BitmapFont read$86d536(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$4 -> com.a.a.i.a.a.p:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$5 -> com.a.a.i.a.a.q:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$TintedDrawable -> com.a.a.i.a.a.r:
com.badlogic.gdx.scenes.scene2d.ui.Table -> com.a.a.i.a.a.s:
    com.badlogic.gdx.graphics.Color debugTableColor -> k
    com.badlogic.gdx.graphics.Color debugCellColor -> l
    com.badlogic.gdx.graphics.Color debugActorColor -> m
    com.badlogic.gdx.utils.Pool cellPool -> n
    float[] columnWeightedWidth -> o
    float[] rowWeightedHeight -> p
    int columns -> q
    int rows -> r
    boolean implicitEndRow -> s
    com.badlogic.gdx.utils.Array cells -> t
    com.badlogic.gdx.scenes.scene2d.ui.Cell cellDefaults -> u
    com.badlogic.gdx.utils.Array columnDefaults -> v
    com.badlogic.gdx.scenes.scene2d.ui.Cell rowDefaults -> w
    boolean sizeInvalid -> x
    float[] columnMinWidth -> y
    float[] rowMinHeight -> z
    float[] columnPrefWidth -> A
    float[] rowPrefHeight -> B
    float tableMinWidth -> C
    float tableMinHeight -> D
    float tablePrefWidth -> E
    float tablePrefHeight -> F
    float[] columnWidth -> G
    float[] rowHeight -> H
    float[] expandWidth -> I
    float[] expandHeight -> J
    com.badlogic.gdx.scenes.scene2d.ui.Value padTop -> K
    com.badlogic.gdx.scenes.scene2d.ui.Value padLeft -> L
    com.badlogic.gdx.scenes.scene2d.ui.Value padBottom -> M
    com.badlogic.gdx.scenes.scene2d.ui.Value padRight -> N
    int align -> O
    int debug$7abc83b0 -> P
    com.badlogic.gdx.utils.Array debugRects -> Q
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> j
    boolean round -> R
    com.badlogic.gdx.scenes.scene2d.ui.Value backgroundTop -> S
    com.badlogic.gdx.scenes.scene2d.ui.Value backgroundLeft -> T
    com.badlogic.gdx.scenes.scene2d.ui.Value backgroundBottom -> U
    com.badlogic.gdx.scenes.scene2d.ui.Value backgroundRight -> V
    com.badlogic.gdx.scenes.scene2d.ui.Cell obtainCell() -> A
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void drawBackground(com.badlogic.gdx.graphics.g2d.Batch,float,float,float) -> a
    void setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    void invalidate() -> v
    com.badlogic.gdx.scenes.scene2d.ui.Cell add(com.badlogic.gdx.scenes.scene2d.Actor) -> d
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean) -> a
    void clearChildren() -> s
    com.badlogic.gdx.scenes.scene2d.ui.Cell row() -> w
    void endRow() -> B
    float getPrefWidth() -> c_
    float getPrefHeight() -> u
    float getMinWidth() -> d_
    float getMinHeight() -> e_
    com.badlogic.gdx.scenes.scene2d.ui.Cell defaults() -> x
    void setDebug(boolean) -> b
    com.badlogic.gdx.scenes.scene2d.ui.Table debug$76d8090(int) -> c
    float getPadTop() -> C
    float getPadLeft() -> D
    float getPadBottom() -> E
    float getPadRight() -> F
    float[] ensureSize(float[],int) -> a
    void layout() -> b_
    void computeSize() -> G
    void clearDebugRects() -> H
    void addDebugRect(float,float,float,float,com.badlogic.gdx.graphics.Color) -> a
    void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> a
    void drawDebugBounds(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> b
    void drawDebugRects(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> e
com.badlogic.gdx.scenes.scene2d.ui.Table$1 -> com.a.a.i.a.a.t:
    java.lang.Object newObject() -> a
com.badlogic.gdx.scenes.scene2d.ui.Table$2 -> com.a.a.i.a.a.u:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Table$3 -> com.a.a.i.a.a.v:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Table$4 -> com.a.a.i.a.a.w:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Table$5 -> com.a.a.i.a.a.x:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Table$DebugRect -> com.a.a.i.a.a.y:
    com.badlogic.gdx.utils.Pool pool -> f
    com.badlogic.gdx.graphics.Color color -> g
com.badlogic.gdx.scenes.scene2d.ui.Touchpad -> com.a.a.i.a.a.z:
    com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle style -> k
    boolean touched -> i
    boolean resetOnTouchUp -> j
    float deadzoneRadius -> l
    com.badlogic.gdx.math.Circle knobBounds -> m
    com.badlogic.gdx.math.Circle touchBounds -> n
    com.badlogic.gdx.math.Circle deadzoneBounds -> o
    com.badlogic.gdx.math.Vector2 knobPosition -> p
    com.badlogic.gdx.math.Vector2 knobPercent -> q
    void calculatePositionAndValue(float,float,boolean) -> b
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    void layout() -> q
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    float getPrefWidth() -> c_
    float getPrefHeight() -> u
    void setDeadzone(float) -> e
    float getKnobPercentX() -> w
    float getKnobPercentY() -> x
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$1 -> com.a.a.i.a.a.A:
    com.badlogic.gdx.scenes.scene2d.ui.Touchpad this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle -> com.a.a.i.a.a.B:
com.badlogic.gdx.scenes.scene2d.ui.Value -> com.a.a.i.a.a.C:
    com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed zero -> a
    com.badlogic.gdx.scenes.scene2d.ui.Value minWidth -> b
    com.badlogic.gdx.scenes.scene2d.ui.Value minHeight -> c
    com.badlogic.gdx.scenes.scene2d.ui.Value prefWidth -> d
    com.badlogic.gdx.scenes.scene2d.ui.Value prefHeight -> e
    com.badlogic.gdx.scenes.scene2d.ui.Value maxWidth -> f
    com.badlogic.gdx.scenes.scene2d.ui.Value maxHeight -> g
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$1 -> com.a.a.i.a.a.D:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$2 -> com.a.a.i.a.a.E:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$3 -> com.a.a.i.a.a.F:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$4 -> com.a.a.i.a.a.G:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$5 -> com.a.a.i.a.a.H:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$6 -> com.a.a.i.a.a.I:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed -> com.a.a.i.a.a.J:
    float value -> h
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Widget -> com.a.a.i.a.a.K:
    boolean needsLayout -> i
    boolean layoutEnabled -> j
    float getMinWidth() -> d_
    float getMinHeight() -> e_
    float getPrefWidth() -> c_
    float getPrefHeight() -> u
    void validate() -> f_
    void invalidate() -> v
    void invalidateHierarchy() -> z
    void sizeChanged() -> l
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void layout() -> q
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup -> com.a.a.i.a.a.L:
    boolean needsLayout -> j
    boolean layoutEnabled -> k
    float getMinWidth() -> d_
    float getMinHeight() -> e_
    float getPrefWidth() -> c_
    float getPrefHeight() -> u
    void validate() -> f_
    void invalidate() -> v
    void invalidateHierarchy() -> z
    void childrenChanged() -> r
    void sizeChanged() -> l
    void layout() -> b_
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener -> com.a.a.i.a.b.a:
    com.badlogic.gdx.math.Vector2 tmpCoords -> a
    com.badlogic.gdx.math.Vector2 tmpCoords2 -> b
    com.badlogic.gdx.input.GestureDetector detector -> e
    com.badlogic.gdx.scenes.scene2d.InputEvent event -> c
    com.badlogic.gdx.scenes.scene2d.Actor actor -> d
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
    void tap$645e8b17() -> a
    boolean longPress$12ecde08() -> b
    void fling$1dcb6a94(float,float) -> b
    void pan$645d22b7(float,float) -> a
    void zoom$43069389() -> c
    void pinch$31308d89() -> d
    com.badlogic.gdx.input.GestureDetector getGestureDetector() -> e
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1 -> com.a.a.i.a.b.b:
    com.badlogic.gdx.math.Vector2 initialPointer1 -> a
    com.badlogic.gdx.math.Vector2 initialPointer2 -> b
    com.badlogic.gdx.math.Vector2 pointer1 -> c
    com.badlogic.gdx.math.Vector2 pointer2 -> d
    com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener this$0 -> e
    boolean tap(float,float,int,int) -> a
    boolean longPress(float,float) -> a
    boolean fling(float,float,int) -> b
    boolean pan(float,float,float,float) -> a
    boolean zoom(float,float) -> b
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
    void stageToLocalAmount(com.badlogic.gdx.math.Vector2) -> a
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$2 -> com.a.a.i.a.b.c:
    int[] $SwitchMap$com$badlogic$gdx$scenes$scene2d$InputEvent$Type -> a
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable -> com.a.a.i.a.b.d:
    java.lang.String name -> a
    float leftWidth -> b
    float rightWidth -> c
    float topHeight -> d
    float bottomHeight -> e
    float minWidth -> f
    float minHeight -> g
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    float getLeftWidth() -> a
    void setLeftWidth(float) -> a
    float getRightWidth() -> b
    void setRightWidth(float) -> b
    float getTopHeight() -> c
    void setTopHeight(float) -> c
    float getBottomHeight() -> d
    void setBottomHeight(float) -> d
    float getMinWidth() -> e
    void setMinWidth(float) -> e
    float getMinHeight() -> f
    void setMinHeight(float) -> f
    java.lang.String getName() -> g
    void setName(java.lang.String) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.utils.ChangeListener -> com.a.a.i.a.b.e:
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
    void changed$d8a80ea() -> a
com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent -> com.a.a.i.a.b.f:
com.badlogic.gdx.scenes.scene2d.utils.ClickListener -> com.a.a.i.a.b.g:
    float visualPressedDuration -> a
    float tapSquareSize -> b
    float touchDownX -> c
    float touchDownY -> d
    int pressedPointer -> e
    boolean pressed -> f
    boolean cancelled -> g
    long tapCountInterval -> h
    int tapCount -> i
    long lastTapTime -> j
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    void enter$6049651d(int) -> a
    void exit$6049651d(int) -> b
    void clicked$43069389() -> b
    boolean isOver(com.badlogic.gdx.scenes.scene2d.Actor,float,float) -> a
com.badlogic.gdx.scenes.scene2d.utils.Cullable -> com.a.a.i.a.b.h:
    void setCullingArea(com.badlogic.gdx.math.Rectangle) -> a
com.badlogic.gdx.scenes.scene2d.utils.Drawable -> com.a.a.i.a.b.i:
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    float getLeftWidth() -> a
    float getRightWidth() -> b
    float getTopHeight() -> c
    float getBottomHeight() -> d
    float getMinWidth() -> e
    float getMinHeight() -> f
com.badlogic.gdx.scenes.scene2d.utils.FocusListener -> com.a.a.i.a.b.j:
    com.badlogic.gdx.assets.loaders.FileHandleResolver resolver -> a
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$1 -> com.a.a.i.a.b.k:
    int[] $SwitchMap$com$badlogic$gdx$scenes$scene2d$utils$FocusListener$FocusEvent$Type -> a
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent -> com.a.a.i.a.b.l:
    boolean focused -> a
    int type$17f4cb42 -> b
    void reset() -> a
    void setFocused(boolean) -> a
    void setType$6dbd4563(int) -> a
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type -> com.a.a.i.a.b.m:
    int keyboard$17f4cb42 -> a
    int scroll$17f4cb42 -> b
    int[] $VALUES$1fcd8d43 -> c
    int[] values$22867a7c() -> a
com.badlogic.gdx.scenes.scene2d.utils.Layout -> com.a.a.i.a.b.n:
    void invalidateHierarchy() -> z
    void validate() -> f_
    float getMinWidth() -> d_
    float getMinHeight() -> e_
    float getPrefWidth() -> c_
    float getPrefHeight() -> u
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable -> com.a.a.i.a.b.o:
    com.badlogic.gdx.graphics.g2d.NinePatch patch -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    void setPatch(com.badlogic.gdx.graphics.g2d.NinePatch) -> a
    com.badlogic.gdx.graphics.g2d.NinePatch getPatch() -> h
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack -> com.a.a.i.a.b.p:
    com.badlogic.gdx.utils.Array scissors -> a
    com.badlogic.gdx.math.Vector3 tmp -> b
    boolean pushScissors(com.badlogic.gdx.math.Rectangle) -> a
    com.badlogic.gdx.math.Rectangle popScissors() -> a
    void calculateScissors(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> a
    void calculateScissors(com.badlogic.gdx.graphics.Camera,float,float,float,float,com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> a
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable -> com.a.a.i.a.b.q:
    com.badlogic.gdx.graphics.g2d.Sprite sprite -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float) -> a
    com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable tint(com.badlogic.gdx.graphics.Color) -> a
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable -> com.a.a.i.a.b.r:
    com.badlogic.gdx.graphics.g2d.TextureRegion region -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float) -> a
    com.badlogic.gdx.scenes.scene2d.utils.Drawable tint(com.badlogic.gdx.graphics.Color) -> a
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable -> com.a.a.i.a.b.s:
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float) -> a
com.badlogic.gdx.utils.Array -> com.a.a.j.a:
    java.lang.Object[] items -> a
    int size -> b
    boolean ordered -> c
    com.badlogic.gdx.utils.Array$ArrayIterable iterable -> d
    void add(java.lang.Object) -> a
    void addAll(com.badlogic.gdx.utils.Array) -> a
    void addAll(com.badlogic.gdx.utils.Array,int,int) -> a
    java.lang.Object get(int) -> a
    void set(int,java.lang.Object) -> a
    void insert(int,java.lang.Object) -> b
    boolean contains(java.lang.Object,boolean) -> a
    int indexOf(java.lang.Object,boolean) -> b
    boolean removeValue(java.lang.Object,boolean) -> c
    java.lang.Object removeIndex(int) -> b
    void removeRange(int,int) -> a
    java.lang.Object pop() -> a
    java.lang.Object peek() -> b
    java.lang.Object first() -> c
    void clear() -> d
    java.lang.Object[] ensureCapacity(int) -> c
    java.lang.Object[] resize(int) -> d
    void sort(java.util.Comparator) -> a
    java.util.Iterator iterator() -> iterator
    void truncate(int) -> e
    java.lang.Object[] toArray(java.lang.Class) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    com.badlogic.gdx.utils.Array with(java.lang.Object[]) -> a
com.badlogic.gdx.utils.Array$ArrayIterable -> com.a.a.j.b:
    com.badlogic.gdx.utils.Array array -> a
    boolean allowRemove -> b
    com.badlogic.gdx.utils.Array$ArrayIterator iterator1 -> c
    com.badlogic.gdx.utils.Array$ArrayIterator iterator2 -> d
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.Array$ArrayIterator -> com.a.a.j.c:
    com.badlogic.gdx.utils.Array array -> c
    boolean allowRemove -> d
    int index -> a
    boolean valid -> b
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ArrayMap -> com.a.a.j.d:
    java.lang.Object[] keys -> a
    java.lang.Object[] values -> b
    int size -> c
    boolean ordered -> d
    com.badlogic.gdx.utils.ArrayMap$Entries entries1 -> e
    com.badlogic.gdx.utils.ArrayMap$Entries entries2 -> f
    int put(java.lang.Object,java.lang.Object) -> a
    java.lang.Object get(java.lang.Object) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.ArrayMap$Entries entries() -> a
com.badlogic.gdx.utils.ArrayMap$Entries -> com.a.a.j.e:
    com.badlogic.gdx.utils.ArrayMap map -> c
    com.badlogic.gdx.utils.ObjectMap$Entry entry -> d
    int index -> a
    boolean valid -> b
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    java.lang.Object next() -> next
com.badlogic.gdx.utils.BaseJsonReader -> com.a.a.j.f:
    com.badlogic.gdx.utils.JsonValue parse(com.badlogic.gdx.files.FileHandle) -> a
com.badlogic.gdx.utils.BufferUtils -> com.a.a.j.g:
    com.badlogic.gdx.utils.Array unsafeBuffers -> a
    int allocatedUnsafe -> b
    void copy(float[],java.nio.Buffer,int,int) -> a
    java.nio.FloatBuffer newFloatBuffer(int) -> a
    java.nio.ByteBuffer newByteBuffer(int) -> b
    java.nio.IntBuffer newIntBuffer(int) -> c
    void disposeUnsafeByteBuffer(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer newUnsafeByteBuffer(int) -> d
    void freeMemory(java.nio.ByteBuffer) -> b
    java.nio.ByteBuffer newDisposableByteBuffer(int) -> e
    void copyJni(float[],java.nio.Buffer,int,int) -> b
com.badlogic.gdx.utils.ByteArray -> com.a.a.j.h:
    byte[] items -> a
    boolean ordered -> b
    byte[] ensureCapacity(int) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.DelayedRemovalArray -> com.a.a.j.i:
    int iterating -> d
    com.badlogic.gdx.utils.IntArray remove -> e
    void begin() -> e
    void end() -> f
    void remove(int) -> f
    boolean removeValue(java.lang.Object,boolean) -> c
    java.lang.Object removeIndex(int) -> b
    void removeRange(int,int) -> a
    void set(int,java.lang.Object) -> a
    void insert(int,java.lang.Object) -> b
    java.lang.Object pop() -> a
    void clear() -> d
    void sort(java.util.Comparator) -> a
    void truncate(int) -> e
com.badlogic.gdx.utils.Disposable -> com.a.a.j.j:
    void dispose() -> c
com.badlogic.gdx.utils.FloatArray -> com.a.a.j.k:
    float[] items -> a
    int size -> b
    boolean ordered -> c
    void add(float) -> a
    void addAll(com.badlogic.gdx.utils.FloatArray,int,int) -> a
    float get(int) -> a
    void set(int,float) -> a
    float[] ensureCapacity(int) -> b
    float[] resize(int) -> c
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.GdxNativesLoader -> com.a.a.j.l:
    boolean disableNativesLoading -> a
    boolean nativesLoaded -> b
    void load() -> a
com.badlogic.gdx.utils.GdxRuntimeException -> com.a.a.j.m:
com.badlogic.gdx.utils.I18NBundle -> com.a.a.j.n:
    java.util.Locale ROOT_LOCALE -> a
    boolean simpleFormatter -> b
    java.util.Locale locale -> c
    com.badlogic.gdx.utils.ObjectMap properties -> d
    com.badlogic.gdx.utils.I18NBundle createBundle(com.badlogic.gdx.files.FileHandle,java.util.Locale) -> a
    com.badlogic.gdx.utils.I18NBundle createBundle(com.badlogic.gdx.files.FileHandle,java.util.Locale,java.lang.String) -> a
    com.badlogic.gdx.utils.I18NBundle createBundleImpl(com.badlogic.gdx.files.FileHandle,java.util.Locale,java.lang.String) -> b
    com.badlogic.gdx.utils.I18NBundle loadBundleChain(com.badlogic.gdx.files.FileHandle,java.lang.String,java.util.List,int,com.badlogic.gdx.utils.I18NBundle) -> a
    com.badlogic.gdx.utils.I18NBundle loadBundle(com.badlogic.gdx.files.FileHandle,java.lang.String,java.util.Locale) -> a
    boolean checkFileExistence(com.badlogic.gdx.files.FileHandle) -> a
com.badlogic.gdx.utils.IntArray -> com.a.a.j.o:
    int[] items -> a
    int size -> b
    boolean ordered -> c
    void add(int) -> a
    void addAll(int[],int,int) -> a
    int get(int) -> b
    void insert(int,int) -> a
    int pop() -> a
    int[] ensureCapacity(int) -> c
    int[] resize(int) -> d
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.Json -> com.a.a.j.p:
    java.lang.String typeName -> a
    boolean enumNames -> b
    com.badlogic.gdx.utils.ObjectMap typeToFields -> c
    com.badlogic.gdx.utils.ObjectMap tagToClass -> d
    com.badlogic.gdx.utils.ObjectMap classToSerializer -> e
    void setTypeName(java.lang.String) -> a
    void setSerializer(java.lang.Class,com.badlogic.gdx.utils.Json$Serializer) -> a
    com.badlogic.gdx.utils.OrderedMap getFields(java.lang.Class) -> a
    java.lang.Object fromJson(java.lang.Class,com.badlogic.gdx.files.FileHandle) -> a
    java.lang.Object readValue(java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Object,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object readValue(java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object newInstance(java.lang.Class) -> b
com.badlogic.gdx.utils.Json$FieldMetadata -> com.a.a.j.q:
    com.badlogic.gdx.utils.reflect.Field field -> a
    java.lang.Class elementType -> b
com.badlogic.gdx.utils.Json$Serializable -> com.a.a.j.r:
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> a
com.badlogic.gdx.utils.Json$Serializer -> com.a.a.j.s:
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
com.badlogic.gdx.utils.JsonReader -> com.a.a.j.t:
    byte[] _json_actions -> a
    short[] _json_key_offsets -> b
    char[] _json_trans_keys -> c
    byte[] _json_single_lengths -> d
    byte[] _json_range_lengths -> e
    short[] _json_index_offsets -> f
    byte[] _json_indicies -> g
    byte[] _json_trans_targs -> h
    byte[] _json_trans_actions -> i
    byte[] _json_eof_actions -> j
    com.badlogic.gdx.utils.Array elements -> k
    com.badlogic.gdx.utils.Array lastChild -> l
    com.badlogic.gdx.utils.JsonValue root -> m
    com.badlogic.gdx.utils.JsonValue current -> n
    com.badlogic.gdx.utils.JsonValue parse(java.io.Reader) -> a
    com.badlogic.gdx.utils.JsonValue parse(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.utils.JsonValue parse(char[],int,int) -> a
    void addChild(java.lang.String,com.badlogic.gdx.utils.JsonValue) -> a
    void pop() -> a
    void string(java.lang.String,java.lang.String) -> a
    void number(java.lang.String,double,java.lang.String) -> a
    void number(java.lang.String,long,java.lang.String) -> a
    void bool(java.lang.String,boolean) -> a
    java.lang.String unescape(java.lang.String) -> a
com.badlogic.gdx.utils.JsonValue -> com.a.a.j.u:
    com.badlogic.gdx.utils.JsonValue$ValueType type -> g
    java.lang.String stringValue -> h
    double doubleValue -> i
    long longValue -> j
    java.lang.String name -> a
    com.badlogic.gdx.utils.JsonValue child -> b
    com.badlogic.gdx.utils.JsonValue next -> c
    com.badlogic.gdx.utils.JsonValue prev -> d
    com.badlogic.gdx.utils.JsonValue parent -> e
    int size -> f
    com.badlogic.gdx.utils.JsonValue get(int) -> c
    com.badlogic.gdx.utils.JsonValue get(java.lang.String) -> a
    com.badlogic.gdx.utils.JsonValue require(java.lang.String) -> b
    java.lang.String asString() -> a
    float asFloat() -> b
    double asDouble() -> c
    long asLong() -> d
    int asInt() -> e
    boolean asBoolean() -> f
    byte asByte() -> g
    short asShort() -> h
    float[] asFloatArray() -> i
    short[] asShortArray() -> j
    java.lang.String getString(java.lang.String,java.lang.String) -> a
    float getFloat(java.lang.String,float) -> a
    java.lang.String getString(java.lang.String) -> c
    float getFloat(int) -> a
    short getShort(int) -> b
    boolean isArray() -> k
    boolean isObject() -> l
    boolean isString() -> m
    boolean isNumber() -> n
    boolean isBoolean() -> o
    boolean isNull() -> q
    boolean isValue() -> r
    void set(double,java.lang.String) -> a
    void set(long,java.lang.String) -> a
    java.lang.String toString() -> toString
    void prettyPrint(com.badlogic.gdx.utils.JsonValue,com.badlogic.gdx.utils.StringBuilder,int,com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings) -> a
    boolean isFlat(com.badlogic.gdx.utils.JsonValue) -> a
    void indent(int,com.badlogic.gdx.utils.StringBuilder) -> a
    java.lang.String trace() -> p
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.JsonValue$1 -> com.a.a.j.v:
    int[] $SwitchMap$com$badlogic$gdx$utils$JsonValue$ValueType -> a
com.badlogic.gdx.utils.JsonValue$JsonIterator -> com.a.a.j.w:
    com.badlogic.gdx.utils.JsonValue entry -> a
    com.badlogic.gdx.utils.JsonValue current -> b
    com.badlogic.gdx.utils.JsonValue this$0 -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.util.Iterator iterator() -> iterator
    java.lang.Object next() -> next
com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings -> com.a.a.j.x:
    com.badlogic.gdx.utils.JsonWriter$OutputType outputType -> a
    int singleLineColumns -> b
com.badlogic.gdx.utils.JsonValue$ValueType -> com.a.a.j.y:
    com.badlogic.gdx.utils.JsonValue$ValueType object -> a
    com.badlogic.gdx.utils.JsonValue$ValueType array -> b
    com.badlogic.gdx.utils.JsonValue$ValueType stringValue -> c
    com.badlogic.gdx.utils.JsonValue$ValueType doubleValue -> d
    com.badlogic.gdx.utils.JsonValue$ValueType longValue -> e
    com.badlogic.gdx.utils.JsonValue$ValueType booleanValue -> f
    com.badlogic.gdx.utils.JsonValue$ValueType nullValue -> g
    com.badlogic.gdx.utils.JsonValue$ValueType[] $VALUES -> h
    com.badlogic.gdx.utils.JsonValue$ValueType[] values() -> a
com.badlogic.gdx.utils.JsonWriter -> com.a.a.j.z:
    java.io.Writer writer -> a
    com.badlogic.gdx.utils.Array stack -> b
    void write(char[],int,int) -> write
    void flush() -> flush
    void close() -> close
com.badlogic.gdx.utils.JsonWriter$1 -> com.a.a.j.A:
    int[] $SwitchMap$com$badlogic$gdx$utils$JsonWriter$OutputType -> a
com.badlogic.gdx.utils.JsonWriter$JsonObject -> com.a.a.j.B:
    boolean array -> a
    com.badlogic.gdx.utils.JsonWriter this$0 -> b
com.badlogic.gdx.utils.JsonWriter$OutputType -> com.a.a.j.C:
    com.badlogic.gdx.utils.JsonWriter$OutputType json -> c
    com.badlogic.gdx.utils.JsonWriter$OutputType javascript -> a
    com.badlogic.gdx.utils.JsonWriter$OutputType minimal -> b
    java.util.regex.Pattern javascriptPattern -> d
    java.util.regex.Pattern minimalNamePattern -> e
    java.util.regex.Pattern minimalValuePattern -> f
    com.badlogic.gdx.utils.JsonWriter$OutputType[] $VALUES -> g
    com.badlogic.gdx.utils.JsonWriter$OutputType[] values() -> a
    java.lang.String quoteValue(java.lang.Object) -> a
    java.lang.String quoteName(java.lang.String) -> a
com.badlogic.gdx.utils.Logger -> com.a.a.j.D:
    java.lang.String tag -> a
    int level -> b
    void debug(java.lang.String) -> a
    void info(java.lang.String) -> b
    void error(java.lang.String,java.lang.Throwable) -> a
    int getLevel() -> a
com.badlogic.gdx.utils.ObjectIntMap -> com.a.a.j.E:
    int size -> a
    java.lang.Object[] keyTable -> b
    int[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    float loadFactor -> f
    int hashShift -> g
    int mask -> h
    int threshold -> i
    int stashCapacity -> j
    int pushIterations -> k
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries1 -> l
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries2 -> m
    void put(java.lang.Object,int) -> a
    void push(java.lang.Object,int,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> a
    int get(java.lang.Object,int) -> b
    void clear() -> a
    void resize(int) -> a
    int hash2(int) -> b
    int hash3(int) -> c
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectIntMap$Entries -> com.a.a.j.F:
    com.badlogic.gdx.utils.ObjectIntMap$Entry entry -> f
    boolean hasNext() -> hasNext
    void remove() -> remove
    void reset() -> a
    java.util.Iterator iterator() -> iterator
    java.lang.Object next() -> next
com.badlogic.gdx.utils.ObjectIntMap$Entry -> com.a.a.j.G:
    java.lang.Object key -> a
    int value -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectIntMap$MapIterator -> com.a.a.j.H:
    boolean hasNext -> a
    com.badlogic.gdx.utils.ObjectIntMap map -> b
    int nextIndex -> c
    int currentIndex -> d
    boolean valid -> e
    void reset() -> a
    void findNextIndex() -> b
    void remove() -> remove
com.badlogic.gdx.utils.ObjectMap -> com.a.a.j.I:
    int size -> a
    java.lang.Object[] keyTable -> b
    java.lang.Object[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    float loadFactor -> f
    int hashShift -> g
    int mask -> h
    int threshold -> i
    int stashCapacity -> j
    int pushIterations -> k
    com.badlogic.gdx.utils.ObjectMap$Entries entries1 -> l
    com.badlogic.gdx.utils.ObjectMap$Entries entries2 -> m
    com.badlogic.gdx.utils.ObjectMap$Values values1 -> n
    com.badlogic.gdx.utils.ObjectMap$Values values2 -> o
    com.badlogic.gdx.utils.ObjectMap$Keys keys1 -> p
    com.badlogic.gdx.utils.ObjectMap$Keys keys2 -> q
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    java.lang.Object put_internal(java.lang.Object,java.lang.Object) -> b
    void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> a
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object remove(java.lang.Object) -> b
    void removeStashIndex(int) -> a
    void clear() -> a
    boolean containsKey(java.lang.Object) -> c
    void resize(int) -> b
    int hash2(int) -> c
    int hash3(int) -> d
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    com.badlogic.gdx.utils.ObjectMap$Entries iterator() -> b
    com.badlogic.gdx.utils.ObjectMap$Entries entries() -> c
    com.badlogic.gdx.utils.ObjectMap$Values values() -> d
    com.badlogic.gdx.utils.ObjectMap$Keys keys() -> e
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectMap$Entries -> com.a.a.j.J:
    com.badlogic.gdx.utils.ObjectMap$Entry entry -> a
    com.badlogic.gdx.utils.ObjectMap$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    void reset() -> b
    java.util.Iterator iterator() -> iterator
    java.lang.Object next() -> next
com.badlogic.gdx.utils.ObjectMap$Entry -> com.a.a.j.K:
    java.lang.Object key -> a
    java.lang.Object value -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectMap$Keys -> com.a.a.j.L:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    com.badlogic.gdx.utils.Array toArray() -> a
    void remove() -> remove
    void reset() -> b
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectMap$MapIterator -> com.a.a.j.M:
    boolean hasNext -> b
    com.badlogic.gdx.utils.ObjectMap map -> c
    int nextIndex -> d
    int currentIndex -> e
    boolean valid -> f
    void reset() -> b
    void findNextIndex() -> c
    void remove() -> remove
com.badlogic.gdx.utils.ObjectMap$Values -> com.a.a.j.N:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    void reset() -> b
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectSet -> com.a.a.j.O:
    int size -> a
    java.lang.Object[] keyTable -> b
    int capacity -> c
    int stashSize -> d
    float loadFactor -> e
    int hashShift -> f
    int mask -> g
    int threshold -> h
    int stashCapacity -> i
    int pushIterations -> j
    com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator1 -> k
    com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator2 -> l
    boolean add(java.lang.Object) -> a
    void push(java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> a
    void clear() -> a
    boolean contains(java.lang.Object) -> b
    void resize(int) -> a
    int hash2(int) -> b
    int hash3(int) -> c
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> a
    com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator() -> b
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator -> com.a.a.j.P:
    boolean hasNext -> b
    com.badlogic.gdx.utils.ObjectSet set -> c
    int nextIndex -> d
    int currentIndex -> e
    boolean valid -> a
    void reset() -> a
    void findNextIndex() -> b
    void remove() -> remove
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.OrderedMap -> com.a.a.j.Q:
    com.badlogic.gdx.utils.Array keys -> f
    com.badlogic.gdx.utils.ObjectMap$Entries entries1 -> g
    com.badlogic.gdx.utils.ObjectMap$Entries entries2 -> h
    com.badlogic.gdx.utils.ObjectMap$Values values1 -> i
    com.badlogic.gdx.utils.ObjectMap$Values values2 -> j
    com.badlogic.gdx.utils.ObjectMap$Keys keys1 -> k
    com.badlogic.gdx.utils.ObjectMap$Keys keys2 -> l
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    java.lang.Object remove(java.lang.Object) -> b
    void clear() -> a
    com.badlogic.gdx.utils.ObjectMap$Entries iterator() -> b
    com.badlogic.gdx.utils.ObjectMap$Entries entries() -> c
    com.badlogic.gdx.utils.ObjectMap$Values values() -> d
    com.badlogic.gdx.utils.ObjectMap$Keys keys() -> e
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.OrderedMap$OrderedMapEntries -> com.a.a.j.R:
    com.badlogic.gdx.utils.Array keys -> g
    void reset() -> b
    com.badlogic.gdx.utils.ObjectMap$Entry next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
com.badlogic.gdx.utils.OrderedMap$OrderedMapKeys -> com.a.a.j.S:
    com.badlogic.gdx.utils.Array keys -> a
    void reset() -> b
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.OrderedMap$OrderedMapValues -> com.a.a.j.T:
    com.badlogic.gdx.utils.Array keys -> a
    void reset() -> b
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.Pool -> com.a.a.j.U:
    int max -> a
    int peak -> b
    com.badlogic.gdx.utils.Array freeObjects -> c
    java.lang.Object newObject() -> a
    java.lang.Object obtain() -> b
    void free(java.lang.Object) -> a
    void reset(java.lang.Object) -> b
    void freeAll(com.badlogic.gdx.utils.Array) -> a
com.badlogic.gdx.utils.Pool$Poolable -> com.a.a.j.V:
    void reset() -> a
com.badlogic.gdx.utils.Pools -> com.a.a.j.W:
    com.badlogic.gdx.utils.ObjectMap typePools -> a
    com.badlogic.gdx.utils.Pool get(java.lang.Class) -> a
    java.lang.Object obtain(java.lang.Class) -> b
    void free(java.lang.Object) -> a
    void freeAll(com.badlogic.gdx.utils.Array,boolean) -> a
com.badlogic.gdx.utils.Queue -> com.a.a.j.X:
    java.lang.Object[] values -> b
    int head -> c
    int tail -> d
    int size -> a
    com.badlogic.gdx.utils.Queue$QueueIterable iterable -> e
    void addLast(java.lang.Object) -> a
    java.lang.Object removeIndex(int) -> a
    java.lang.Object get(int) -> b
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.utils.Queue$QueueIterable -> com.a.a.j.Y:
    com.badlogic.gdx.utils.Queue queue -> a
    boolean allowRemove -> b
    com.badlogic.gdx.utils.Queue$QueueIterator iterator1 -> c
    com.badlogic.gdx.utils.Queue$QueueIterator iterator2 -> d
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.Queue$QueueIterator -> com.a.a.j.Z:
    com.badlogic.gdx.utils.Queue queue -> c
    boolean allowRemove -> d
    int index -> a
    boolean valid -> b
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ReflectionPool -> com.a.a.j.aa:
    com.badlogic.gdx.utils.reflect.Constructor constructor -> a
    com.badlogic.gdx.utils.reflect.Constructor findConstructor(java.lang.Class) -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.utils.Scaling -> com.a.a.j.ab:
    com.badlogic.gdx.utils.Scaling fit -> a
    com.badlogic.gdx.utils.Scaling fill -> b
    com.badlogic.gdx.utils.Scaling fillX -> c
    com.badlogic.gdx.utils.Scaling fillY -> d
    com.badlogic.gdx.utils.Scaling stretch -> e
    com.badlogic.gdx.utils.Scaling stretchX -> f
    com.badlogic.gdx.utils.Scaling stretchY -> g
    com.badlogic.gdx.utils.Scaling none -> h
    com.badlogic.gdx.math.Vector2 temp -> i
    com.badlogic.gdx.utils.Scaling[] $VALUES -> j
    com.badlogic.gdx.utils.Scaling[] values() -> a
    com.badlogic.gdx.math.Vector2 apply(float,float,float,float) -> a
com.badlogic.gdx.utils.Scaling$1 -> com.a.a.j.ac:
    int[] $SwitchMap$com$badlogic$gdx$utils$Scaling -> a
com.badlogic.gdx.utils.SerializationException -> com.a.a.j.ad:
    java.lang.StringBuffer trace -> a
    java.lang.String getMessage() -> getMessage
    void addTrace(java.lang.String) -> a
com.badlogic.gdx.utils.SharedLibraryLoader -> com.a.a.j.ae:
    boolean isWindows -> a
    boolean isLinux -> b
    boolean isMac -> c
    boolean isIos -> d
    boolean isAndroid -> e
    boolean isARM -> f
    boolean is64Bit -> g
    java.lang.String abi -> h
    java.util.HashSet loadedLibraries -> i
    java.lang.String crc(java.io.InputStream) -> a
    void load(java.lang.String) -> a
    java.io.InputStream readFile(java.lang.String) -> b
    java.io.File extractFile(java.lang.String,java.lang.String,java.io.File) -> a
    java.lang.Throwable loadFile(java.lang.String,java.lang.String,java.io.File) -> b
com.badlogic.gdx.utils.ShortArray -> com.a.a.j.af:
    short[] items -> a
    int size -> b
    boolean ordered -> c
    void add(short) -> a
    short[] ensureCapacity(int) -> a
    short[] resize(int) -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.SnapshotArray -> com.a.a.j.ag:
    java.lang.Object[] snapshot -> d
    java.lang.Object[] recycled -> e
    int snapshots -> f
    java.lang.Object[] begin() -> e
    void end() -> f
    void modified() -> g
    void set(int,java.lang.Object) -> a
    void insert(int,java.lang.Object) -> b
    boolean removeValue(java.lang.Object,boolean) -> c
    java.lang.Object removeIndex(int) -> b
    void removeRange(int,int) -> a
    java.lang.Object pop() -> a
    void clear() -> d
    void sort(java.util.Comparator) -> a
    void truncate(int) -> e
com.badlogic.gdx.utils.Sort -> com.a.a.j.ah:
    com.badlogic.gdx.utils.Sort instance -> a
    com.badlogic.gdx.utils.TimSort timSort -> b
    void sort(java.lang.Object[],java.util.Comparator,int,int) -> a
    com.badlogic.gdx.utils.Sort instance() -> a
com.badlogic.gdx.utils.StreamUtils -> com.a.a.j.ai:
    void copyStream(java.io.InputStream,java.io.OutputStream) -> a
    byte[] copyStreamToByteArray(java.io.InputStream,int) -> a
    void closeQuietly(java.io.Closeable) -> a
com.badlogic.gdx.utils.StreamUtils$OptimizedByteArrayOutputStream -> com.a.a.j.aj:
    byte[] toByteArray() -> toByteArray
com.badlogic.gdx.utils.StringBuilder -> com.a.a.j.ak:
    char[] chars -> a
    int length -> b
    char[] digits -> c
    void enlargeBuffer(int) -> c
    void appendNull() -> a
    void append0(char[]) -> a
    void append0(char[],int,int) -> a
    void append0(char) -> b
    void append0(java.lang.String) -> a
    char charAt(int) -> charAt
    int length() -> length
    void move(int,int) -> a
    void setCharAt(int,char) -> a
    void setLength(int) -> a
    java.lang.String toString() -> toString
    java.lang.CharSequence subSequence(int,int) -> subSequence
    com.badlogic.gdx.utils.StringBuilder append(char) -> a
    com.badlogic.gdx.utils.StringBuilder append(int) -> b
    com.badlogic.gdx.utils.StringBuilder append(long,int,char) -> a
    com.badlogic.gdx.utils.StringBuilder append(float) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.Object) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.String) -> b
    com.badlogic.gdx.utils.StringBuilder append(java.lang.CharSequence) -> a
    com.badlogic.gdx.utils.StringBuilder append(com.badlogic.gdx.utils.StringBuilder) -> a
    com.badlogic.gdx.utils.StringBuilder replace(char,java.lang.String) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Appendable append(char) -> append
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
com.badlogic.gdx.utils.TextFormatter -> com.a.a.j.al:
com.badlogic.gdx.utils.TimSort -> com.a.a.j.am:
    java.lang.Object[] a -> a
    java.util.Comparator c -> b
    int minGallop -> c
    java.lang.Object[] tmp -> d
    int tmpCount -> e
    int stackSize -> f
    int[] runBase -> g
    int[] runLen -> h
    void doSort(java.lang.Object[],java.util.Comparator,int,int) -> a
    void binarySort(java.lang.Object[],int,int,int,java.util.Comparator) -> a
    int countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator) -> a
    int minRunLength(int) -> a
    void mergeCollapse() -> a
    void mergeForceCollapse() -> b
    void mergeAt(int) -> b
    int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator) -> a
    int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator) -> b
    void mergeHi(int,int,int,int) -> a
    java.lang.Object[] ensureCapacity(int) -> c
com.badlogic.gdx.utils.Timer -> com.a.a.j.an:
    com.badlogic.gdx.utils.Array instances -> a
    com.badlogic.gdx.utils.Timer$TimerThread thread -> b
    com.badlogic.gdx.utils.Timer instance -> c
    com.badlogic.gdx.utils.Array tasks -> d
    com.badlogic.gdx.utils.Timer$Task scheduleTask(com.badlogic.gdx.utils.Timer$Task,float,float,int) -> a
    long update(long,long) -> a
    void delay(long) -> a
    void wake() -> a
    com.badlogic.gdx.utils.Timer$Task schedule(com.badlogic.gdx.utils.Timer$Task,float) -> a
com.badlogic.gdx.utils.Timer$Task -> com.a.a.j.ao:
    long executeTimeMillis -> a
    long intervalMillis -> b
    int repeatCount -> c
    com.badlogic.gdx.Application app -> d
    void cancel() -> a
    boolean isScheduled() -> b
com.badlogic.gdx.utils.Timer$TimerThread -> com.a.a.j.ap:
    com.badlogic.gdx.Files files -> a
    long pauseMillis -> b
    void run() -> run
    void resume() -> b
    void pause() -> a
    void dispose() -> c
com.badlogic.gdx.utils.UBJsonReader -> com.a.a.j.aq:
    boolean oldFormat -> a
    com.badlogic.gdx.utils.JsonValue parse(java.io.InputStream) -> a
    com.badlogic.gdx.utils.JsonValue parse(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.utils.JsonValue parse(java.io.DataInputStream) -> a
    com.badlogic.gdx.utils.JsonValue parse(java.io.DataInputStream,byte) -> a
    java.lang.String parseString(java.io.DataInputStream,boolean,byte) -> a
    long parseSize(java.io.DataInputStream,boolean,long) -> a
    long parseSize(java.io.DataInputStream,byte,boolean,long) -> a
    short readUChar(java.io.DataInputStream) -> b
    long readUInt(java.io.DataInputStream) -> c
com.badlogic.gdx.utils.async.AsyncExecutor -> com.a.a.j.a.a:
    java.util.concurrent.ExecutorService executor -> a
    com.badlogic.gdx.utils.async.AsyncResult submit(com.badlogic.gdx.utils.async.AsyncTask) -> a
    void dispose() -> c
com.badlogic.gdx.utils.async.AsyncExecutor$1 -> com.a.a.j.a.b:
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.badlogic.gdx.utils.async.AsyncExecutor$2 -> com.a.a.j.a.c:
    com.badlogic.gdx.utils.async.AsyncTask val$task -> a
    java.lang.Object call() -> call
com.badlogic.gdx.utils.async.AsyncResult -> com.a.a.j.a.d:
    java.util.concurrent.Future future -> a
    boolean isDone() -> a
    java.lang.Object get() -> b
com.badlogic.gdx.utils.async.AsyncTask -> com.a.a.j.a.e:
    java.lang.Object call() -> b
com.badlogic.gdx.utils.reflect.ClassReflection -> com.a.a.j.b.a:
    com.badlogic.gdx.utils.Array processors -> a
    java.lang.Class forName(java.lang.String) -> a
    java.lang.Object newInstance(java.lang.Class) -> a
    com.badlogic.gdx.utils.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> a
    com.badlogic.gdx.utils.reflect.Constructor getDeclaredConstructor(java.lang.Class,java.lang.Class[]) -> b
    com.badlogic.gdx.utils.reflect.Field[] getDeclaredFields(java.lang.Class) -> b
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
    boolean mouseMoved(int,int) -> a
    boolean scrolled(int) -> c
com.badlogic.gdx.utils.reflect.Constructor -> com.a.a.j.b.b:
    java.lang.reflect.Constructor constructor -> a
    java.lang.Class getDeclaringClass() -> a
    void setAccessible(boolean) -> a
    java.lang.Object newInstance(java.lang.Object[]) -> a
com.badlogic.gdx.utils.reflect.Field -> com.a.a.j.b.c:
    java.lang.reflect.Field field -> a
    java.lang.String getName() -> a
    java.lang.Class getType() -> b
    boolean isAccessible() -> c
    void setAccessible(boolean) -> a
    boolean isStatic() -> d
    boolean isTransient() -> e
    boolean isSynthetic() -> f
    java.lang.Class getElementType(int) -> a
    void set(java.lang.Object,java.lang.Object) -> a
com.badlogic.gdx.utils.reflect.ReflectionException -> com.a.a.j.b.d:
com.badlogic.gdx.utils.viewport.ScalingViewport -> com.a.a.j.c.a:
    com.badlogic.gdx.utils.Scaling scaling -> a
    void update(int,int,boolean) -> a
com.badlogic.gdx.utils.viewport.ScreenViewport -> com.a.a.j.c.b:
    float unitsPerPixel -> a
    void update(int,int,boolean) -> a
com.badlogic.gdx.utils.viewport.Viewport -> com.a.a.j.c.c:
    com.badlogic.gdx.graphics.Camera camera -> a
    float worldWidth -> b
    float worldHeight -> c
    int screenX -> d
    int screenY -> e
    int screenWidth -> f
    int screenHeight -> g
    com.badlogic.gdx.math.Vector3 tmp -> h
    void apply(boolean) -> a
    void update(int,int,boolean) -> a
    com.badlogic.gdx.math.Vector2 unproject(com.badlogic.gdx.math.Vector2) -> a
    void calculateScissors(com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> a
    com.badlogic.gdx.graphics.Camera getCamera() -> a
    void setCamera(com.badlogic.gdx.graphics.Camera) -> a
    float getWorldWidth() -> b
    float getWorldHeight() -> c
    void setWorldSize(float,float) -> a
    int getScreenX() -> d
    int getScreenY() -> e
    int getScreenWidth() -> f
    int getScreenHeight() -> g
    void setScreenBounds(int,int,int,int) -> a
com.esotericsoftware.kryo.ClassResolver -> com.b.a.a:
    void setKryo(com.esotericsoftware.kryo.Kryo) -> a
    com.esotericsoftware.kryo.Registration register(com.esotericsoftware.kryo.Registration) -> a
    com.esotericsoftware.kryo.Registration registerImplicit(java.lang.Class) -> a
    com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class) -> b
    com.esotericsoftware.kryo.Registration getRegistration(int) -> a
    com.esotericsoftware.kryo.Registration writeClass(com.esotericsoftware.kryo.io.Output,java.lang.Class) -> a
    com.esotericsoftware.kryo.Registration readClass(com.esotericsoftware.kryo.io.Input) -> a
    void reset() -> a
com.esotericsoftware.kryo.DefaultSerializer -> com.b.a.b:
    java.lang.Class value() -> a
com.esotericsoftware.kryo.Generics -> com.b.a.c:
    java.util.Map typeVar2class -> a
    com.esotericsoftware.kryo.Generics parentScope -> b
    void add(java.lang.String,java.lang.Class) -> a
    java.lang.Class getConcreteClass(java.lang.String) -> a
    void setParentScope(com.esotericsoftware.kryo.Generics) -> a
    com.esotericsoftware.kryo.Generics getParentScope() -> a
    java.util.Map getMappings() -> b
    java.lang.String toString() -> toString
    void resetParentScope() -> c
com.esotericsoftware.kryo.Kryo -> com.b.a.d:
    com.esotericsoftware.kryo.factories.SerializerFactory defaultSerializer -> a
    java.util.ArrayList defaultSerializers -> b
    int lowPriorityDefaultSerializerCount -> c
    com.esotericsoftware.kryo.ClassResolver classResolver -> d
    int nextRegisterID -> e
    java.lang.ClassLoader classLoader -> f
    org.objenesis.strategy.InstantiatorStrategy strategy -> g
    int depth -> h
    int maxDepth -> i
    boolean autoReset -> j
    java.lang.Thread thread -> k
    com.esotericsoftware.kryo.util.ObjectMap context -> l
    com.esotericsoftware.kryo.ReferenceResolver referenceResolver -> m
    com.esotericsoftware.kryo.util.IntArray readReferenceIds -> n
    boolean references -> o
    java.lang.Object readObject -> p
    int copyDepth -> q
    com.esotericsoftware.kryo.Generics genericsScope -> r
    void addDefaultSerializer(java.lang.Class,java.lang.Class) -> a
    com.esotericsoftware.kryo.Serializer getDefaultSerializer(java.lang.Class) -> a
    com.esotericsoftware.kryo.Registration register(java.lang.Class,com.esotericsoftware.kryo.Serializer) -> a
    int getNextRegistrationId() -> h
    com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class) -> b
    com.esotericsoftware.kryo.Serializer getSerializer(java.lang.Class) -> c
    com.esotericsoftware.kryo.Registration writeClass(com.esotericsoftware.kryo.io.Output,java.lang.Class) -> a
    void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
    void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer) -> a
    void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class) -> a
    void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,com.esotericsoftware.kryo.Serializer) -> b
    void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object) -> b
    boolean writeReferenceOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,boolean) -> a
    com.esotericsoftware.kryo.Registration readClass(com.esotericsoftware.kryo.io.Input) -> a
    java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer) -> a
    java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class) -> b
    java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,com.esotericsoftware.kryo.Serializer) -> b
    java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input) -> b
    int readReferenceOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class,boolean) -> a
    void reference(java.lang.Object) -> a
    void reset() -> i
    void beginObject() -> j
    com.esotericsoftware.kryo.ReferenceResolver getReferenceResolver() -> a
    java.lang.ClassLoader getClassLoader() -> b
    boolean getReferences() -> c
    java.lang.Object newInstance(java.lang.Class) -> d
    com.esotericsoftware.kryo.util.ObjectMap getContext() -> d
    int getDepth() -> e
    boolean isFinal(java.lang.Class) -> e
    void pushGenericsScope(java.lang.Class,com.esotericsoftware.kryo.Generics) -> a
    void popGenericsScope() -> f
    com.esotericsoftware.kryo.Generics getGenericsScope() -> g
com.esotericsoftware.kryo.Kryo$Closure -> com.b.a.e:
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy -> com.b.a.f:
    org.objenesis.instantiator.ObjectInstantiator newInstantiatorOf(java.lang.Class) -> a
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$1 -> com.b.a.g:
    com.esotericsoftware.reflectasm.ConstructorAccess val$access -> a
    java.lang.Class val$type -> b
    java.lang.Object newInstance() -> a
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$2 -> com.b.a.h:
    java.lang.reflect.Constructor val$constructor -> a
    java.lang.Class val$type -> b
    java.lang.Object newInstance() -> a
com.esotericsoftware.kryo.Kryo$DefaultSerializerEntry -> com.b.a.i:
    java.lang.Class type -> a
    com.esotericsoftware.kryo.factories.SerializerFactory serializerFactory -> b
com.esotericsoftware.kryo.KryoException -> com.b.a.j:
    java.lang.StringBuffer trace -> a
    java.lang.String getMessage() -> getMessage
    void addTrace(java.lang.String) -> a
com.esotericsoftware.kryo.KryoSerializable -> com.b.a.k:
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output) -> a
    void read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input) -> a
com.esotericsoftware.kryo.ReferenceResolver -> com.b.a.l:
    int getWrittenId(java.lang.Object) -> a
    int addWrittenObject(java.lang.Object) -> b
    int nextReadId$1b2d8ba5() -> a
    void setReadObject(int,java.lang.Object) -> a
    java.lang.Object getReadObject$295d4f7(int) -> a
    void reset() -> b
    boolean useReferences(java.lang.Class) -> a
com.esotericsoftware.kryo.Registration -> com.b.a.m:
    java.lang.Class type -> a
    int id -> b
    com.esotericsoftware.kryo.Serializer serializer -> c
    org.objenesis.instantiator.ObjectInstantiator instantiator -> d
    java.lang.Class getType() -> a
    int getId() -> b
    com.esotericsoftware.kryo.Serializer getSerializer() -> c
    void setSerializer(com.esotericsoftware.kryo.Serializer) -> a
    org.objenesis.instantiator.ObjectInstantiator getInstantiator() -> d
    void setInstantiator(org.objenesis.instantiator.ObjectInstantiator) -> a
    java.lang.String toString() -> toString
com.esotericsoftware.kryo.Serializer -> com.b.a.n:
    boolean acceptsNull -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    boolean getAcceptsNull() -> a
    void setAcceptsNull(boolean) -> a
    void setGenerics(com.esotericsoftware.kryo.Kryo,java.lang.Class[]) -> a
com.esotericsoftware.kryo.StreamFactory -> com.b.a.o:
com.esotericsoftware.kryo.factories.ReflectionSerializerFactory -> com.b.a.a.a:
    java.lang.Class serializerClass -> a
    com.esotericsoftware.kryo.Serializer makeSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class) -> a
    com.esotericsoftware.kryo.Serializer makeSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class,java.lang.Class) -> a
com.esotericsoftware.kryo.factories.SerializerFactory -> com.b.a.a.b:
    com.esotericsoftware.kryo.Serializer makeSerializer(com.esotericsoftware.kryo.Kryo,java.lang.Class) -> a
com.esotericsoftware.kryo.io.Input -> com.b.a.b.a:
    byte[] buffer -> a
    int position -> b
    int capacity -> c
    int limit -> d
    long total -> e
    char[] chars -> f
    java.io.InputStream inputStream -> g
    int position() -> a
    int fill(byte[],int,int) -> a
    int require(int) -> f
    int optional(int) -> g
    int available() -> available
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    void close() -> close
    byte readByte() -> b
    byte[] readBytes(int) -> a
    int readInt() -> c
    int readInt(boolean) -> a
    int readVarInt(boolean) -> b
    java.lang.String readString() -> d
    int readUtf8Length(int) -> h
    int readUtf8Length_slow(int) -> i
    void readUtf8(int) -> j
    java.lang.String readAscii() -> l
    java.lang.StringBuilder readStringBuilder() -> e
    float readFloat() -> f
    short readShort() -> g
    long readLong() -> h
    long readLong(boolean) -> c
    boolean readBoolean() -> i
    char readChar() -> j
    double readDouble() -> k
    int[] readInts(int,boolean) -> a
    long[] readLongs(int,boolean) -> b
    float[] readFloats(int) -> b
    short[] readShorts(int) -> c
    char[] readChars(int) -> d
    double[] readDoubles(int) -> e
com.esotericsoftware.kryo.io.Output -> com.b.a.b.b:
    int maxCapacity -> a
    long total -> b
    int position -> c
    int capacity -> d
    byte[] buffer -> e
    java.io.OutputStream outputStream -> f
    int position() -> a
    boolean require(int) -> d
    void flush() -> flush
    void close() -> close
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void writeByte(byte) -> a
    void writeByte(int) -> a
    void writeBytes(byte[]) -> a
    void writeBytes(byte[],int,int) -> a
    void writeInt(int) -> b
    int writeInt(int,boolean) -> a
    int writeVarInt(int,boolean) -> b
    void writeString(java.lang.String) -> a
    void writeString(java.lang.CharSequence) -> a
    void writeAscii(java.lang.String) -> b
    void writeUtf8Length(int) -> e
    void writeString_slow(java.lang.CharSequence,int,int) -> a
    void writeAscii_slow(java.lang.String,int) -> a
    void writeFloat(float) -> a
    void writeShort(int) -> c
    void writeLong(long) -> a
    int writeLong(long,boolean) -> a
    void writeBoolean(boolean) -> a
    void writeChar(char) -> a
    void writeDouble(double) -> a
    void writeInts(int[],boolean) -> a
    void writeLongs(long[],boolean) -> a
    void writeFloats(float[]) -> a
    void writeShorts(short[]) -> a
    void writeChars(char[]) -> a
    void writeDoubles(double[]) -> a
com.esotericsoftware.kryo.serializers.AsmCacheFields -> com.b.a.c.a:
    com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField createCachedField$6c6b935f(java.lang.Class,com.esotericsoftware.kryo.serializers.FieldSerializer) -> a
    void processAnnotatedFields(com.esotericsoftware.kryo.serializers.FieldSerializer) -> a
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmBooleanField -> com.b.a.c.b:
    void write(com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
    void read(com.esotericsoftware.kryo.io.Input,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmByteField -> com.b.a.c.c:
    void write(com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
    void read(com.esotericsoftware.kryo.io.Input,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmCachedField -> com.b.a.c.d:
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmCharField -> com.b.a.c.e:
    void write(com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
    void read(com.esotericsoftware.kryo.io.Input,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmDoubleField -> com.b.a.c.f:
    void write(com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
    void read(com.esotericsoftware.kryo.io.Input,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmFloatField -> com.b.a.c.g:
    void write(com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
    void read(com.esotericsoftware.kryo.io.Input,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmIntField -> com.b.a.c.h:
    void write(com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
    void read(com.esotericsoftware.kryo.io.Input,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmLongField -> com.b.a.c.i:
    void write(com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
    void read(com.esotericsoftware.kryo.io.Input,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmObjectField -> com.b.a.c.j:
    java.lang.Object getField(java.lang.Object) -> a
    void setField(java.lang.Object,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmShortField -> com.b.a.c.k:
    void write(com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
    void read(com.esotericsoftware.kryo.io.Input,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.AsmCacheFields$AsmStringField -> com.b.a.c.l:
    void write(com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
    void read(com.esotericsoftware.kryo.io.Input,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.CollectionSerializer -> com.b.a.c.m:
    boolean elementsCanBeNull -> a
    com.esotericsoftware.kryo.Serializer serializer -> b
    java.lang.Class elementClass -> c
    java.lang.Class genericType -> d
    void setElementsCanBeNull(boolean) -> b
    void setElementClass(java.lang.Class,com.esotericsoftware.kryo.Serializer) -> a
    void setGenerics(com.esotericsoftware.kryo.Kryo,java.lang.Class[]) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Collection) -> a
    java.util.Collection create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> b
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.CollectionSerializer$BindCollection -> com.b.a.c.n:
    java.lang.Class elementSerializer() -> a
    java.lang.Class elementClass() -> b
    boolean elementsCanBeNull() -> c
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer -> com.b.a.c.o:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer -> com.b.a.c.p:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer -> com.b.a.c.q:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer -> com.b.a.c.r:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer -> com.b.a.c.s:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer -> com.b.a.c.t:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer -> com.b.a.c.u:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer -> com.b.a.c.v:
    java.lang.Class[] generics -> a
    void setGenerics(com.esotericsoftware.kryo.Kryo,java.lang.Class[]) -> a
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer -> com.b.a.c.w:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer -> com.b.a.c.x:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer -> com.b.a.c.y:
    com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer bigIntegerSerializer -> a
    java.math.BigDecimal read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> b
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer -> com.b.a.c.z:
    void write$58da89eb(com.esotericsoftware.kryo.io.Output,java.math.BigInteger) -> a
    java.math.BigInteger read$51c1ac81(com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer -> com.b.a.c.A:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer -> com.b.a.c.B:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer -> com.b.a.c.C:
    com.esotericsoftware.kryo.serializers.DefaultSerializers$TimeZoneSerializer timeZoneSerializer -> a
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer -> com.b.a.c.D:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer -> com.b.a.c.E:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsEmptyListSerializer -> com.b.a.c.F:
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsEmptyMapSerializer -> com.b.a.c.G:
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsEmptySetSerializer -> com.b.a.c.H:
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonListSerializer -> com.b.a.c.I:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonMapSerializer -> com.b.a.c.J:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonSetSerializer -> com.b.a.c.K:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$CurrencySerializer -> com.b.a.c.L:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer -> com.b.a.c.M:
    java.util.Date create(com.esotericsoftware.kryo.Kryo,java.lang.Class,long) -> a
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer -> com.b.a.c.N:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer -> com.b.a.c.O:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer -> com.b.a.c.P:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer -> com.b.a.c.Q:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer -> com.b.a.c.R:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$KryoSerializableSerializer -> com.b.a.c.S:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer -> com.b.a.c.T:
    java.util.Locale SPANISH -> a
    java.util.Locale SPAIN -> b
    boolean isSameLocale(java.util.Locale,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer -> com.b.a.c.U:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer -> com.b.a.c.V:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBufferSerializer -> com.b.a.c.W:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBuilderSerializer -> com.b.a.c.X:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$StringSerializer -> com.b.a.c.Y:
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$TimeZoneSerializer -> com.b.a.c.Z:
    void write$11f3d24a(com.esotericsoftware.kryo.io.Output,java.util.TimeZone) -> a
    java.util.TimeZone read$2d7fc2a0(com.esotericsoftware.kryo.io.Input) -> a
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeMapSerializer -> com.b.a.c.aa:
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map) -> a
    java.util.Map create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> b
    java.util.TreeMap createTreeMap(java.lang.Class,java.util.Comparator) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeSetSerializer -> com.b.a.c.ab:
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Collection) -> a
    java.util.TreeSet createTreeSet(java.lang.Class,java.util.Comparator) -> a
    java.util.Collection create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> b
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.DefaultSerializers$VoidSerializer -> com.b.a.c.ac:
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
com.esotericsoftware.kryo.serializers.FieldSerializer -> com.b.a.c.ad:
    com.esotericsoftware.kryo.Kryo kryo -> a
    java.lang.Class type -> b
    java.lang.reflect.TypeVariable[] typeParameters -> c
    java.lang.Class componentType -> d
    com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField[] fields -> e
    com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField[] transientFields -> f
    java.lang.Object access -> g
    java.lang.Class[] generics -> h
    com.esotericsoftware.kryo.Generics genericsScope -> i
    com.esotericsoftware.kryo.serializers.FieldSerializer$CachedFieldFactory asmFieldFactory -> j
    com.esotericsoftware.kryo.serializers.FieldSerializer$CachedFieldFactory unsafeFieldFactory -> k
    boolean unsafeAvailable -> l
    java.lang.Class unsafeUtilClass -> m
    java.lang.reflect.Method sortFieldsByOffsetMethod -> n
    void rebuildCachedFields() -> d
    void rebuildCachedFields(boolean) -> b
    java.util.List buildValidFieldsFromCachedFields(com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField[],com.esotericsoftware.kryo.util.IntArray) -> a
    java.util.List buildValidFields(boolean,java.util.List,com.esotericsoftware.kryo.util.ObjectMap,com.esotericsoftware.kryo.util.IntArray) -> a
    void createCachedFields(com.esotericsoftware.kryo.util.IntArray,java.util.List,java.util.List,int) -> a
    void setGenerics(com.esotericsoftware.kryo.Kryo,java.lang.Class[]) -> a
    com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField newMatchingCachedField(java.lang.reflect.Field,int,java.lang.Class,java.lang.reflect.Type,java.lang.Class[]) -> a
    com.esotericsoftware.kryo.serializers.FieldSerializer$CachedFieldFactory getUnsafeFieldFactory() -> e
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void removeField(com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField) -> a
    com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField[] getFields() -> b
    com.esotericsoftware.kryo.Generics getGenericsScope() -> c
    int compare(java.lang.Object,java.lang.Object) -> compare
com.esotericsoftware.kryo.serializers.FieldSerializer$Bind -> com.b.a.c.ae:
    java.lang.Class value() -> a
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField -> com.b.a.c.af:
    java.lang.reflect.Field field -> a
    com.esotericsoftware.reflectasm.FieldAccess access -> b
    java.lang.Class valueClass -> c
    com.esotericsoftware.kryo.Serializer serializer -> d
    boolean canBeNull -> e
    int accessIndex -> f
    boolean varIntsEnabled -> g
    java.lang.String toString() -> toString
    void write(com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
    void read(com.esotericsoftware.kryo.io.Input,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedFieldFactory -> com.b.a.c.ag:
    com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField createCachedField$6c6b935f(java.lang.Class,com.esotericsoftware.kryo.serializers.FieldSerializer) -> a
com.esotericsoftware.kryo.serializers.FieldSerializer$Optional -> com.b.a.c.ah:
    java.lang.String value() -> a
com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil -> com.b.a.c.ai:
    com.esotericsoftware.kryo.Generics buildGenericsScope(java.lang.Class,java.lang.Class[]) -> a
    java.lang.Class[] computeFieldGenerics(java.lang.reflect.Type,java.lang.reflect.Field,java.lang.Class[]) -> a
    java.lang.Class[] getGenerics(java.lang.reflect.Type,com.esotericsoftware.kryo.Kryo) -> a
com.esotericsoftware.kryo.serializers.MapSerializer -> com.b.a.c.aj:
    java.lang.Class keyClass -> a
    java.lang.Class valueClass -> b
    com.esotericsoftware.kryo.Serializer keySerializer -> c
    com.esotericsoftware.kryo.Serializer valueSerializer -> d
    boolean keysCanBeNull -> e
    boolean valuesCanBeNull -> f
    java.lang.Class keyGenericType -> g
    java.lang.Class valueGenericType -> h
    void setKeysCanBeNull(boolean) -> b
    void setKeyClass(java.lang.Class,com.esotericsoftware.kryo.Serializer) -> a
    void setValueClass(java.lang.Class,com.esotericsoftware.kryo.Serializer) -> b
    void setValuesCanBeNull(boolean) -> c
    void setGenerics(com.esotericsoftware.kryo.Kryo,java.lang.Class[]) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.util.Map) -> a
    java.util.Map create(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> b
    java.lang.Object read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
com.esotericsoftware.kryo.serializers.MapSerializer$BindMap -> com.b.a.c.ak:
    java.lang.Class keySerializer() -> a
    java.lang.Class valueSerializer() -> b
    java.lang.Class keyClass() -> c
    java.lang.Class valueClass() -> d
    boolean keysCanBeNull() -> e
    boolean valuesCanBeNull() -> f
com.esotericsoftware.kryo.serializers.ObjectField -> com.b.a.c.al:
    java.lang.Class[] generics -> h
    java.lang.Class type -> i
    com.esotericsoftware.kryo.Kryo kryo -> j
    java.lang.Object getField(java.lang.Object) -> a
    void setField(java.lang.Object,java.lang.Object) -> a
    void write(com.esotericsoftware.kryo.io.Output,java.lang.Object) -> a
    void read(com.esotericsoftware.kryo.io.Input,java.lang.Object) -> a
com.esotericsoftware.kryo.util.DefaultClassResolver -> com.b.a.d.a:
    com.esotericsoftware.kryo.Kryo kryo -> a
    com.esotericsoftware.kryo.util.IntMap idToRegistration -> b
    com.esotericsoftware.kryo.util.ObjectMap classToRegistration -> c
    com.esotericsoftware.kryo.util.IdentityObjectIntMap classToNameId -> d
    com.esotericsoftware.kryo.util.IntMap nameIdToClass -> e
    com.esotericsoftware.kryo.util.ObjectMap nameToClass -> f
    int nextNameId -> g
    int memoizedClassId -> h
    com.esotericsoftware.kryo.Registration memoizedClassIdValue -> i
    java.lang.Class memoizedClass -> j
    com.esotericsoftware.kryo.Registration memoizedClassValue -> k
    void setKryo(com.esotericsoftware.kryo.Kryo) -> a
    com.esotericsoftware.kryo.Registration register(com.esotericsoftware.kryo.Registration) -> a
    com.esotericsoftware.kryo.Registration registerImplicit(java.lang.Class) -> a
    com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class) -> b
    com.esotericsoftware.kryo.Registration getRegistration(int) -> a
    com.esotericsoftware.kryo.Registration writeClass(com.esotericsoftware.kryo.io.Output,java.lang.Class) -> a
    com.esotericsoftware.kryo.Registration readClass(com.esotericsoftware.kryo.io.Input) -> a
    com.esotericsoftware.kryo.Registration readName(com.esotericsoftware.kryo.io.Input) -> b
    void reset() -> a
com.esotericsoftware.kryo.util.IdentityObjectIntMap -> com.b.a.d.b:
    int size -> a
    java.lang.Object[] keyTable -> b
    int[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    float loadFactor -> f
    int hashShift -> g
    int mask -> h
    int threshold -> i
    int stashCapacity -> j
    int pushIterations -> k
    void put(java.lang.Object,int) -> a
    void push(java.lang.Object,int,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> a
    int get(java.lang.Object,int) -> b
    void clear() -> a
    void resize(int) -> a
    int hash2(int) -> b
    int hash3(int) -> c
    java.lang.String toString() -> toString
com.esotericsoftware.kryo.util.IntArray -> com.b.a.d.c:
    int[] items -> a
    int size -> b
    void add(int) -> a
    java.lang.String toString() -> toString
com.esotericsoftware.kryo.util.IntMap -> com.b.a.d.d:
    int size -> a
    int[] keyTable -> b
    java.lang.Object[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    java.lang.Object zeroValue -> f
    boolean hasZeroValue -> g
    float loadFactor -> h
    int hashShift -> i
    int mask -> j
    int threshold -> k
    int stashCapacity -> l
    int pushIterations -> m
    java.lang.Object put(int,java.lang.Object) -> a
    void push(int,java.lang.Object,int,int,int,int,int,int) -> a
    java.lang.Object get(int) -> a
    void resize(int) -> b
    int hash2(int) -> c
    int hash3(int) -> d
    java.lang.String toString() -> toString
com.esotericsoftware.kryo.util.MapReferenceResolver -> com.b.a.d.e:
    com.esotericsoftware.kryo.util.IdentityObjectIntMap writtenObjects -> a
    java.util.ArrayList readObjects -> b
    int addWrittenObject(java.lang.Object) -> b
    int getWrittenId(java.lang.Object) -> a
    int nextReadId$1b2d8ba5() -> a
    void setReadObject(int,java.lang.Object) -> a
    java.lang.Object getReadObject$295d4f7(int) -> a
    void reset() -> b
    boolean useReferences(java.lang.Class) -> a
com.esotericsoftware.kryo.util.ObjectMap -> com.b.a.d.f:
    java.util.Random random -> a
    int size -> b
    java.lang.Object[] keyTable -> c
    java.lang.Object[] valueTable -> d
    int capacity -> e
    int stashSize -> f
    float loadFactor -> g
    int hashShift -> h
    int mask -> i
    int threshold -> j
    int stashCapacity -> k
    int pushIterations -> l
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    java.lang.Object put_internal(java.lang.Object,java.lang.Object) -> b
    void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> a
    java.lang.Object get(java.lang.Object) -> a
    boolean containsKey(java.lang.Object) -> b
    void resize(int) -> b
    int hash2(int) -> c
    int hash3(int) -> d
    java.lang.String toString() -> toString
    int nextPowerOfTwo(int) -> a
com.esotericsoftware.kryo.util.Util -> com.b.a.d.g:
    boolean isAndroid -> a
    java.lang.Class getWrapperClass(java.lang.Class) -> a
    boolean isWrapperClass(java.lang.Class) -> b
    void log(java.lang.String,java.lang.Object) -> a
    java.lang.String string(java.lang.Object) -> a
    java.lang.String className(java.lang.Class) -> c
    int getDimensionCount(java.lang.Class) -> e
    java.lang.Class getElementClass(java.lang.Class) -> d
com.esotericsoftware.minlog.Log -> com.b.b.a:
    int level -> c
    boolean DEBUG -> a
    boolean TRACE -> b
    com.esotericsoftware.minlog.Log$Logger logger -> d
    void debug(java.lang.String,java.lang.String) -> a
    void trace(java.lang.String,java.lang.String) -> b
com.esotericsoftware.minlog.Log$Logger -> com.b.b.b:
    long firstLogTime -> a
    void log(int,java.lang.String,java.lang.String,java.lang.Throwable) -> a
com.esotericsoftware.reflectasm.AccessClassLoader -> com.b.c.a:
    java.util.WeakHashMap accessClassLoaders -> a
    java.lang.ClassLoader selfContextParentClassLoader -> b
    com.esotericsoftware.reflectasm.AccessClassLoader selfContextAccessClassLoader -> c
    java.lang.reflect.Method defineClassMethod -> d
    com.esotericsoftware.reflectasm.AccessClassLoader get(java.lang.Class) -> a
    java.lang.Class loadClass(java.lang.String,boolean) -> loadClass
    java.lang.Class defineClass(java.lang.String,byte[]) -> a
    boolean areInSameRuntimeClassLoader(java.lang.Class,java.lang.Class) -> a
    java.lang.ClassLoader getParentClassLoader(java.lang.Class) -> b
    java.lang.reflect.Method getDefineClassMethod() -> a
com.esotericsoftware.reflectasm.ConstructorAccess -> com.b.c.b:
    java.lang.Object newInstance() -> a
    com.esotericsoftware.reflectasm.ConstructorAccess get(java.lang.Class) -> a
com.esotericsoftware.reflectasm.FieldAccess -> com.b.c.c:
    java.lang.String[] fieldNames -> a
    int getIndex(java.lang.String) -> a
    java.lang.Object get$1fb5a060() -> a
    java.lang.String getString$12787dce() -> b
    char getChar$4cfcfcff() -> c
    boolean getBoolean$4cfcfd16() -> d
    byte getByte$4cfcfcfe() -> e
    short getShort$4cfcfd0f() -> f
    int getInt$4cfcfd05() -> g
    long getLong$4cfcfd06() -> h
    double getDouble$4cfcfd00() -> i
    float getFloat$4cfcfd02() -> j
com.esotericsoftware.reflectasm.MethodAccess -> com.b.c.d:
com.esotericsoftware.reflectasm.PublicConstructorAccess -> com.b.c.e:
com.mcminos.game.Audio -> com.mcminos.game.a:
    java.lang.String[] soundNames -> a
    java.lang.String[] musicNames -> e
    boolean sound -> b
    boolean music -> c
    com.badlogic.gdx.audio.Music musicPlayed -> f
    int currentMusicType$6adff062 -> g
    java.lang.String currentMusic -> h
    java.util.Random randomGenerator -> i
    java.util.HashMap soundList -> d
    void scheduleLoads(com.badlogic.gdx.assets.AssetManager) -> a
    void soundPlay(java.lang.String) -> a
    void setSound(boolean) -> a
    void setMusic(boolean) -> b
    void musicFixed(int) -> a
    void musicStop() -> a
    void musicRandom() -> b
    void selectAndPlayNext() -> c
    void access$000(com.mcminos.game.Audio) -> a
com.mcminos.game.Audio$1 -> com.mcminos.game.b:
    com.mcminos.game.Audio this$0 -> a
    void onCompletion$7c7c7bcc() -> a
com.mcminos.game.Audio$MySound -> com.mcminos.game.c:
    com.badlogic.gdx.audio.Sound snd -> a
    long[] ids -> b
    int idPtr -> c
    void stop() -> a
    void play() -> b
    void dispose() -> c
com.mcminos.game.BackroundDrawer -> com.mcminos.game.d:
    com.badlogic.gdx.graphics.g2d.TextureRegion background -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    float getLeftWidth() -> a
    float getRightWidth() -> b
    float getTopHeight() -> c
    float getBottomHeight() -> d
    float getMinWidth() -> e
    float getMinHeight() -> f
com.mcminos.game.Congrats -> com.mcminos.game.e:
    com.mcminos.game.Main main -> a
    com.mcminos.game.LevelCategory category -> b
    com.mcminos.game.LevelConfig levelConfig -> c
    com.badlogic.gdx.scenes.scene2d.Stage stage -> d
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> e
    com.mcminos.game.Preferences preferences -> f
    com.mcminos.game.Fader fader -> g
    void rebuild() -> c
    void render(float) -> a
    void resize(int,int) -> b
    void pause() -> h_
    void dispose() -> b
    com.mcminos.game.LevelConfig access$000(com.mcminos.game.Congrats) -> a
    com.mcminos.game.Main access$100(com.mcminos.game.Congrats) -> b
com.mcminos.game.Congrats$1 -> com.mcminos.game.f:
    com.mcminos.game.Congrats this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.Congrats$2 -> com.mcminos.game.g:
    com.mcminos.game.Congrats this$0 -> a
    boolean keyTyped$3bf802d6(char) -> a
com.mcminos.game.Credits -> com.mcminos.game.h:
    com.mcminos.game.Main main -> a
    com.badlogic.gdx.scenes.scene2d.Stage stage -> b
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> c
    com.mcminos.game.LevelConfig levelConfig -> d
    com.mcminos.game.Preferences preferences -> e
    com.mcminos.game.Fader fader -> f
    java.lang.String credits -> g
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane scroller -> h
    long realTimePassed -> i
    long lastDeltaTimeLeft -> j
    void rebuild() -> b
    void render(float) -> a
    void resize(int,int) -> b
    void pause() -> h_
    com.mcminos.game.LevelConfig access$000(com.mcminos.game.Credits) -> a
    com.mcminos.game.Main access$100(com.mcminos.game.Credits) -> b
com.mcminos.game.Credits$1 -> com.mcminos.game.i:
    com.mcminos.game.Credits this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.Credits$2 -> com.mcminos.game.j:
    com.mcminos.game.Credits this$0 -> a
    boolean keyTyped$3bf802d6(char) -> a
com.mcminos.game.Entities -> com.mcminos.game.k:
    com.mcminos.game.Graphics fields_field_speed_default -> bT
    com.mcminos.game.Graphics ghosts_zarathustra -> a
    com.mcminos.game.Graphics menu_symbol_restart -> b
    com.mcminos.game.Graphics extras_dynamite_default -> c
    com.mcminos.game.Graphics walls_indestructable -> d
    com.mcminos.game.Graphics pills_power_pill_cookie -> e
    com.mcminos.game.Graphics walls_default_10 -> f
    com.mcminos.game.Graphics menu_symbol_game_load -> g
    com.mcminos.game.Graphics menu_symbol_flag_en -> h
    com.mcminos.game.Graphics extras_bomb_exploding -> i
    com.mcminos.game.Graphics extras_wrap_around_vertical -> j
    com.mcminos.game.Graphics level_symbol_door_closed -> bU
    com.mcminos.game.Graphics arrows_rotatable_down -> k
    com.mcminos.game.Graphics mcminos_cheering -> l
    com.mcminos.game.Graphics pills_power_pill_mushroom -> m
    com.mcminos.game.Graphics toolbox_key_selected_up -> bV
    com.mcminos.game.Graphics level_set_symbol_level_up -> bW
    com.mcminos.game.Graphics walls_destroyed_15 -> n
    com.mcminos.game.Graphics walls_default_01 -> o
    com.mcminos.game.Graphics extras_rock -> p
    com.mcminos.game.Graphics arrows_rotatable_up -> q
    com.mcminos.game.Graphics mcminos_drunk_right -> r
    com.mcminos.game.Graphics arrows_static_up -> s
    com.mcminos.game.Graphics extras_rock_me -> t
    com.mcminos.game.Graphics walls_default_08 -> u
    com.mcminos.game.Graphics mcminos_drunk_front -> v
    com.mcminos.game.Graphics walls_default_09 -> w
    com.mcminos.game.Graphics mcminos_dying -> x
    com.mcminos.game.Graphics walls_door_destroyed_vertical -> y
    com.mcminos.game.Graphics walls_destroyed_08 -> z
    com.mcminos.game.Graphics walls_destroyed_09 -> A
    com.mcminos.game.Graphics menu_symbol_toolbar_zoom_in -> B
    com.mcminos.game.Graphics walls_destroyed_04 -> C
    com.mcminos.game.Graphics walls_destroyed_05 -> D
    com.mcminos.game.Graphics walls_destroyed_06 -> E
    com.mcminos.game.Graphics walls_destroyed_07 -> F
    com.mcminos.game.Graphics walls_destroyed_00 -> G
    com.mcminos.game.Graphics walls_destroyed_01 -> H
    com.mcminos.game.Graphics walls_destroyed_02 -> I
    com.mcminos.game.Graphics walls_destroyed_03 -> J
    com.mcminos.game.Graphics walls_default_04 -> K
    com.mcminos.game.Graphics mcminos_default_up -> L
    com.mcminos.game.Graphics walls_default_05 -> M
    com.mcminos.game.Graphics toolbox_return -> bX
    com.mcminos.game.Graphics walls_default_06 -> N
    com.mcminos.game.Graphics pills_pill_default -> O
    com.mcminos.game.Graphics extras_umbrella -> P
    com.mcminos.game.Graphics mcminos_drunk_down -> Q
    com.mcminos.game.Graphics castle_default -> R
    com.mcminos.game.Graphics walls_default_00 -> S
    com.mcminos.game.Graphics arrows_static_down -> T
    com.mcminos.game.Graphics toolbox_key_selected_down -> bY
    com.mcminos.game.Graphics mcminos_drunk_up -> U
    com.mcminos.game.Graphics fields_field_kill_all_ghosts -> V
    com.mcminos.game.Graphics walls_default_02 -> W
    com.mcminos.game.Graphics arrows_static_left -> X
    com.mcminos.game.Graphics level_set_symbol_yellow_list -> bZ
    com.mcminos.game.Graphics walls_default_03 -> Y
    com.mcminos.game.Graphics menu_symbol_sound_on -> Z
    com.mcminos.game.Graphics mcminos_default_front -> aa
    com.mcminos.game.Graphics extras_dynamite_fused -> ab
    com.mcminos.game.Graphics level_symbol_castle -> ca
    com.mcminos.game.Graphics walls_default_15 -> ac
    com.mcminos.game.Graphics walls_default_14 -> ad
    com.mcminos.game.Graphics walls_default_13 -> ae
    com.mcminos.game.Graphics walls_default_12 -> af
    com.mcminos.game.Graphics walls_default_11 -> ag
    com.mcminos.game.Graphics extras_letter -> cb
    com.mcminos.game.Graphics walls_destroyed_13 -> ah
    com.mcminos.game.Graphics walls_destroyed_12 -> ai
    com.mcminos.game.Graphics walls_destroyed_11 -> aj
    com.mcminos.game.Graphics walls_destroyed_10 -> ak
    com.mcminos.game.Graphics walls_gravestone -> al
    com.mcminos.game.Graphics backgrounds_meadow_flowers -> am
    com.mcminos.game.Graphics fields_field_speed_down -> an
    com.mcminos.game.Graphics walls_destroyed_14 -> ao
    com.mcminos.game.Graphics menu_symbol_settings -> ap
    com.mcminos.game.Graphics backgrounds_gravel_01 -> aq
    com.mcminos.game.Graphics menu_symbol_toolbar_zoom_out -> ar
    com.mcminos.game.Graphics walls_destroyed_crater -> cc
    com.mcminos.game.Graphics walls_door_closed_vertical -> as
    com.mcminos.game.Graphics level_symbol_explosion -> cd
    com.mcminos.game.Graphics mcminos_powered_right -> at
    com.mcminos.game.Graphics level_set_symbol_blue_list -> ce
    com.mcminos.game.Graphics level_symbol_dynamite_fused -> cf
    com.mcminos.game.Graphics ghosts_perry -> au
    com.mcminos.game.Graphics walls_door_open_horizontal -> av
    com.mcminos.game.Graphics mcminos_frightened -> aw
    com.mcminos.game.Graphics fields_field_skull -> ax
    com.mcminos.game.Graphics toolbox_abort -> ay
    com.mcminos.game.Graphics toolbox_key_option_right -> az
    com.mcminos.game.Graphics extras_poison -> aA
    com.mcminos.game.Graphics toolbox_key_option_down -> aB
    com.mcminos.game.Graphics toolbox_key_selected_right -> cg
    com.mcminos.game.Graphics arrows_static_right -> aC
    com.mcminos.game.Graphics extras_rock_destroyed -> aD
    com.mcminos.game.Graphics mcminos_default_right -> aE
    com.mcminos.game.Graphics mcminos_default_down -> aF
    com.mcminos.game.Graphics ghosts_jumpingpill -> aG
    com.mcminos.game.Graphics menu_button_info -> aH
    com.mcminos.game.Graphics holes_3 -> aI
    com.mcminos.game.Graphics menu_symbol_music_off -> aJ
    com.mcminos.game.Graphics mcminos_powered_down -> aK
    com.mcminos.game.Graphics menu_symbol_touchpad_on -> aL
    com.mcminos.game.Graphics mcminos_powered_front -> aM
    com.mcminos.game.Graphics level_set_symbol_alive -> ch
    com.mcminos.game.Graphics menu_symbol_touchpad_off -> aN
    com.mcminos.game.Graphics mcminos_powered_left -> aO
    com.mcminos.game.Graphics destination -> aP
    com.mcminos.game.Graphics extras_skull -> aQ
    com.mcminos.game.Graphics fields_warp_hole -> aR
    com.mcminos.game.Graphics backgrounds_amoeboid_01 -> aS
    com.mcminos.game.Graphics menu_symbol_music_on -> aT
    com.mcminos.game.Graphics menu_symbol_flag_german -> ci
    com.mcminos.game.Graphics mcminos_powered_up -> aU
    com.mcminos.game.Graphics backgrounds_soil_01 -> aV
    com.mcminos.game.Graphics level_score -> cj
    com.mcminos.game.Graphics backgrounds_punched_plate_03 -> ck
    com.mcminos.game.Graphics mcminos_poisoned_front -> aW
    com.mcminos.game.Graphics arrows_rotatable_right -> aX
    com.mcminos.game.Graphics fields_field_speed_up -> aY
    com.mcminos.game.Graphics pills_power_pill_chocolate -> aZ
    com.mcminos.game.Graphics extras_bonus2 -> ba
    com.mcminos.game.Graphics extras_bonus3 -> bb
    com.mcminos.game.Graphics extras_bonus1 -> bc
    com.mcminos.game.Graphics extras_mirror -> bd
    com.mcminos.game.Graphics menu_symbol_game_save -> be
    com.mcminos.game.Graphics level_mcminos_outline -> cl
    com.mcminos.game.Graphics extras_bomb_default -> bf
    com.mcminos.game.Graphics pills_power_pill_milk -> bg
    com.mcminos.game.Graphics arrows_rotatable_left -> bh
    com.mcminos.game.Graphics extras_whisky -> bi
    com.mcminos.game.Graphics extras_bomb_fused -> bj
    com.mcminos.game.Graphics menu_symbol_zoom_in -> bk
    com.mcminos.game.Graphics menu_button_empty_top -> bl
    com.mcminos.game.Graphics extras_medicine -> bm
    com.mcminos.game.Graphics menu_symbol_zoom_out -> bn
    com.mcminos.game.Graphics level_set_symbol_teaser -> cm
    com.mcminos.game.Graphics menu_symbol_flag_german_dach -> bo
    com.mcminos.game.Graphics pills_heart -> bp
    com.mcminos.game.Graphics extras_missing -> cn
    com.mcminos.game.Graphics level_set_symbol_testing -> co
    com.mcminos.game.Graphics backgrounds_black -> bq
    com.mcminos.game.Graphics mcminos_default_left -> br
    com.mcminos.game.Graphics backgrounds_sand_01_sand -> bs
    com.mcminos.game.Graphics extras_key -> bt
    com.mcminos.game.Graphics extras_kill_all_ghosts -> bu
    com.mcminos.game.Graphics fields_field_level_up -> bv
    com.mcminos.game.Graphics backgrounds_pavement_01 -> bw
    com.mcminos.game.Graphics level_set_symbol_ultimate -> cp
    com.mcminos.game.Graphics menu_symbol_pause -> bx
    com.mcminos.game.Graphics walls_door_closed_horizontal -> by
    com.mcminos.game.Graphics extras_land_mine_default -> bz
    com.mcminos.game.Graphics menu_symbol_stop -> bA
    com.mcminos.game.Graphics ghosts_hanky -> bB
    com.mcminos.game.Graphics mcminos_drunk_left -> bC
    com.mcminos.game.Graphics menu_button_empty_bottom -> bD
    com.mcminos.game.Graphics menu_symbol_play -> bE
    com.mcminos.game.Graphics level_set_symbol_level_forge -> cq
    com.mcminos.game.Graphics toolbox_key_option_left -> bF
    com.mcminos.game.Graphics toolbox_play_blinking_play -> cr
    com.mcminos.game.Graphics extras_wrap_around_horizontal -> bG
    com.mcminos.game.Graphics toolbox_key_selected_left -> cs
    com.mcminos.game.Graphics extras_land_mine_active -> bH
    com.mcminos.game.Graphics toolbox_key_option_up -> bI
    com.mcminos.game.Graphics holes_2 -> bJ
    com.mcminos.game.Graphics holes_1 -> bK
    com.mcminos.game.Graphics holes_0 -> bL
    com.mcminos.game.Graphics menu_symbol_checked -> bM
    com.mcminos.game.Graphics walls_door_destroyed_horizontal -> bN
    com.mcminos.game.Graphics holes_4 -> bO
    com.mcminos.game.Graphics level_set_symbol_green_list -> ct
    com.mcminos.game.Graphics level_set_symbol_black_daddy -> cu
    com.mcminos.game.Graphics walls_door_open_vertical -> bP
    com.mcminos.game.Graphics level_set_symbol_tutorial -> cv
    com.mcminos.game.Graphics menu_symbol_sound_off -> bQ
    com.mcminos.game.Graphics menu_button_exit_variant -> bR
    com.mcminos.game.Graphics walls_default_07 -> bS
    void scheduleLoad(com.badlogic.gdx.assets.AssetManager) -> a
    void finishLoad(com.badlogic.gdx.graphics.g2d.TextureAtlas) -> a
com.mcminos.game.EventManager -> com.mcminos.game.l:
    long lastFrame -> a
    long nowFrame -> b
    java.util.ArrayList tasks -> c
    com.mcminos.game.Game game -> d
    com.mcminos.game.McMinos mcminos -> e
    com.mcminos.game.Audio audio -> f
    com.mcminos.game.Level level -> g
    com.mcminos.game.Ghosts ghosts -> h
    com.mcminos.game.Graphics[] destroyedWalls -> i
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output) -> a
    void read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input) -> a
    void init(com.mcminos.game.Game) -> a
    void initAfterKryoLoad(com.mcminos.game.Game) -> b
    void schedule$1441db79(com.mcminos.game.Game,int,com.mcminos.game.LevelBlock,int,int) -> a
    void update() -> a
    com.mcminos.game.LevelBlock[] computeArea(com.mcminos.game.LevelBlock) -> a
    void destroyLiving(com.mcminos.game.LevelBlock) -> b
    void disposeAllTasks() -> b
com.mcminos.game.EventManager$1 -> com.mcminos.game.m:
    int[] $SwitchMap$com$mcminos$game$EventManager$Types -> a
    int[] $SwitchMap$com$mcminos$game$LevelObject$Types -> b
com.mcminos.game.EventManager$Task -> com.mcminos.game.n:
    int type$21261fbf -> a
    long scheduleFrame -> b
    com.mcminos.game.LevelObject animation -> c
    int compareTo(java.lang.Object) -> compareTo
com.mcminos.game.EventManager$Types -> com.mcminos.game.o:
    int FuseDynamite$21261fbf -> a
    int FuseBomb$21261fbf -> b
    int ExplosionLight$21261fbf -> c
    int ExplosionHeavy$21261fbf -> d
    int Death$21261fbf -> e
    int Win$21261fbf -> f
    int DeathRestart$21261fbf -> g
    int Fall$21261fbf -> h
    int[] $VALUES$467c33bc -> i
    int[] values$78a6f77b() -> a
com.mcminos.game.FadeExit -> com.mcminos.game.p:
    com.mcminos.game.Main main -> a
    com.mcminos.game.Fader fader -> b
    int lingerTime -> c
    void render(float) -> a
    void resize(int,int) -> b
    void pause() -> h_
com.mcminos.game.Fader -> com.mcminos.game.q:
    com.mcminos.game.Audio audio -> a
    int width -> b
    int height -> c
    com.badlogic.gdx.graphics.glutils.ShapeRenderer box -> d
    long fadeFramesLeft -> e
    float fadeStep -> f
    float fadeValue -> g
    boolean fadingIn -> h
    boolean outInActive -> i
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> j
    com.badlogic.gdx.graphics.g2d.TextureRegion lastScreen -> k
    int playMusicFixedType -> l
    void fadeOut() -> a
    void fadeOutIn() -> b
    void dispose() -> c
    boolean isActive() -> d
    void render() -> e
    void resize(int,int) -> a
    void fadeOutInMusicFixed(int) -> a
com.mcminos.game.Game -> com.mcminos.game.r:
    int timeResolutionExponent -> a
    com.mcminos.game.Main main -> b
    com.mcminos.game.Play playScreen -> c
    com.mcminos.game.Audio audio -> d
    com.mcminos.game.Level level -> e
    com.mcminos.game.McMinos mcminos -> f
    com.mcminos.game.Ghosts ghosts -> g
    com.mcminos.game.EventManager eventManager -> h
    java.util.ArrayList movers -> i
    boolean movement -> j
    long timerFrame -> k
    boolean timer -> l
    long animationFrame -> m
    long realGameTime -> n
    long lastDeltaTimeLeft -> o
    java.security.Key secretKey -> p
    javax.crypto.Cipher cipher -> q
    com.esotericsoftware.kryo.Kryo kryo -> r
    boolean updateTime() -> a
    void initEventManager() -> b
    long getTimerFrame() -> c
    long getAnimationFrame() -> d
    void disposeEventManagerTasks() -> e
    void dispose() -> f
    void reset() -> g
    com.mcminos.game.McMinos getMcMinos() -> h
    com.mcminos.game.Level getLevel() -> i
    com.mcminos.game.Ghosts getGhosts() -> j
    void addMover(com.mcminos.game.Mover) -> a
    void removeMover(com.mcminos.game.Mover) -> b
    long getRealGameTime() -> k
    void schedule$654ca270(int,com.mcminos.game.LevelObject) -> a
    void schedule$6ae792f4(int,com.mcminos.game.LevelBlock) -> a
    com.mcminos.game.Audio getAudio() -> l
    java.util.ArrayList getMovers() -> m
    com.mcminos.game.Play getPlayScreen() -> n
    void startMovement() -> o
    void stopMovement() -> p
    void startTimer() -> q
    void stopTimer() -> r
    com.mcminos.game.Level levelNew(com.mcminos.game.LevelConfig) -> a
    void reload() -> s
    void initAfterLoad() -> t
    void saveGame(int) -> a
    com.badlogic.gdx.files.FileHandle getSaveFileHandle(int) -> b
    boolean loadGame(int) -> c
com.mcminos.game.GhostMover -> com.mcminos.game.s:
    com.mcminos.game.Game game -> g
    com.mcminos.game.Ghosts ghosts -> h
    com.mcminos.game.Audio audio -> i
    com.mcminos.game.Level level -> j
    com.mcminos.game.McMinos mcminos -> k
    com.mcminos.game.LevelBlock rememberedBlock -> l
    java.util.ArrayList currentItems -> m
    int[] dirList -> n
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output) -> a
    void read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input) -> a
    void initAfterKryoLoad(com.mcminos.game.Game,com.mcminos.game.LevelObject) -> a
    com.mcminos.game.LevelBlock chooseDirection() -> a
    boolean checkCollisions() -> b
com.mcminos.game.GhostMover$1 -> com.mcminos.game.t:
    int[] $SwitchMap$com$mcminos$game$LevelObject$Types -> a
com.mcminos.game.Ghosts -> com.mcminos.game.u:
    com.mcminos.game.Game game -> a
    com.mcminos.game.McMinos mcminos -> b
    com.mcminos.game.Level level -> c
    int[] ghostSpeed -> d
    int[] ghostsActive -> e
    int[] ghostSpawnCounter -> f
    com.mcminos.game.LevelObject$Types[] ghostTypes -> g
    com.mcminos.game.Graphics[] ghostEntities -> h
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output) -> a
    void read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input) -> a
    void initAfterKryoLoad(com.mcminos.game.Game) -> a
    com.mcminos.game.LevelObject create(com.mcminos.game.LevelBlock,int) -> a
    void checkSpawn() -> a
    void decreaseGhosts(int) -> a
    void setSpeedFactor(int) -> b
    boolean evalAgility(int) -> c
    void init() -> b
    void removeAll(boolean) -> a
    void killall() -> c
    void dispose() -> d
com.mcminos.game.Graphics -> com.mcminos.game.v:
    int numberImagesLoaded -> a
    int anchorX -> b
    int anchorY -> c
    int zIndex -> d
    int blockWidth -> e
    int blockHeight -> f
    int totalAnimationFrames -> g
    int currentResolution -> h
    java.lang.String name -> i
    int currentResolutionBitsLeftShifter -> j
    java.util.ArrayList allGraphics -> k
    java.util.HashMap allGraphicsByName -> l
    int[] timeList -> m
    java.util.HashMap resolutionList -> n
    java.util.ArrayList stepList -> o
    com.badlogic.gdx.graphics.g2d.TextureRegion[] currentTextures -> p
    int getWidth() -> a
    int getHeight() -> b
    void finishInit() -> c
    void addImage$61e91420(com.badlogic.gdx.graphics.g2d.TextureAtlas,java.lang.String,int) -> a
    void addAnimationStep(int,int) -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion getTextureDirectStep(int,int) -> b
    com.badlogic.gdx.graphics.g2d.TextureRegion getTexture(int,long) -> a
    int vPixelToScreen(int,int,int,int) -> a
    void draw(com.mcminos.game.PlayWindow,com.mcminos.game.Level,int,int,int) -> a
    int virtualToMiniX$36d2e966(com.mcminos.game.PlayWindow,int,int) -> a
    int virtualToMiniY$36d2e966(com.mcminos.game.PlayWindow,int,int) -> b
    void drawMini$6b1fe3cc(com.mcminos.game.PlayWindow,com.mcminos.game.Level,com.badlogic.gdx.graphics.g2d.SpriteBatch,int,int) -> a
    void setResolutionAll(com.mcminos.game.PlayWindow,int,int) -> c
    int getzIndex() -> d
    int getAnimationFramesLength() -> e
    java.lang.String getName() -> f
    com.mcminos.game.Graphics getByName(java.lang.String) -> a
com.mcminos.game.IntPair -> com.mcminos.game.w:
    int first -> a
    long second -> b
com.mcminos.game.KeyValue -> com.mcminos.game.x:
    java.lang.String key -> a
    java.lang.String value -> b
com.mcminos.game.Level -> com.mcminos.game.y:
    java.util.ArrayList allLevelObjects -> a
    com.mcminos.game.Game game -> b
    int pillsNumber -> c
    int rockmeNumber -> d
    com.mcminos.game.LevelBlock[][] field -> e
    java.util.ArrayList warpHoleBlocks -> f
    java.util.ArrayList castleList -> g
    java.util.ArrayList[] ghostStart -> h
    com.mcminos.game.LevelBlock mcminosStart -> i
    com.mcminos.game.LevelConfig levelConfig -> j
    boolean finished -> k
    int levelCategory -> l
    int levelNr -> m
    java.util.Random randomGenerator -> n
    int width -> o
    int vPixelsWidth -> p
    int height -> q
    int vPixelsHeight -> r
    boolean scrollX -> s
    boolean scrollY -> t
    int ghostPillDrop -> u
    void draw(com.mcminos.game.PlayWindow,boolean) -> a
    void drawMini(com.mcminos.game.PlayWindow,com.badlogic.gdx.graphics.g2d.SpriteBatch) -> a
    void dispose() -> a
    void addToAllLevelObjects(com.mcminos.game.LevelObject) -> a
    void load(com.mcminos.game.LevelConfig,boolean) -> a
    void parseLevelLine(int,java.lang.String) -> a
    com.mcminos.game.LevelBlock get(int,int) -> a
    com.mcminos.game.LevelBlock getLevelBlockFromVPixel(int,int) -> b
    com.mcminos.game.LevelBlock getLevelBlockFromVPixelRounded(int,int) -> c
    com.mcminos.game.LevelBlock getDown(int,int) -> d
    com.mcminos.game.LevelBlock getDown2(int,int) -> e
    com.mcminos.game.LevelBlock getRight(int,int) -> f
    com.mcminos.game.LevelBlock getRight2(int,int) -> g
    com.mcminos.game.LevelBlock getUp(int,int) -> h
    com.mcminos.game.LevelBlock getUp2(int,int) -> i
    com.mcminos.game.LevelBlock getLeft(int,int) -> j
    com.mcminos.game.LevelBlock getLeft2(int,int) -> k
    int getVPixelsWidth() -> b
    int getVPixelsHeight() -> c
    int getVisibleWidth() -> d
    int getVisibleHeight() -> e
    boolean getScrollX() -> f
    boolean getScrollY() -> g
    int getWidth() -> h
    int getHeight() -> i
    void increasePills() -> j
    void decreasePills() -> k
    void increaseRockmes() -> l
    void decreaseRockmes() -> m
    int getRockmesNumber() -> n
    int getPillsNumber() -> o
    void addWarpHole(com.mcminos.game.LevelBlock) -> a
    com.mcminos.game.LevelBlock getFreeWarpHole(com.mcminos.game.LevelBlock) -> b
    void addCastle(com.mcminos.game.LevelObject) -> b
    com.mcminos.game.LevelBlock getRandomCastleBlock() -> p
    com.mcminos.game.Game getGame() -> q
    void killRestart(boolean) -> a
    void resetGhostsStart(com.mcminos.game.Ghosts) -> a
    com.mcminos.game.LevelConfig getLevelConfig() -> r
    void removeFromAllLevelObjects(com.mcminos.game.LevelObject) -> c
    void finish() -> s
    boolean isFinished() -> t
    int getGhostPillDrop() -> u
    void decreaseGhostPillDrop() -> v
    int getGhostPillFreq() -> w
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output) -> a
    void read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input) -> a
    void initAfterKryoLoad(com.mcminos.game.Main,com.mcminos.game.Game) -> a
    com.mcminos.game.LevelObject getFirstLevelObjectFromList(com.mcminos.game.LevelObject$Types) -> a
    int getGhostTranswall(int) -> a
    int getGhostMax(int) -> b
    int getGhostTime(int) -> c
    int getGhostAgility(int) -> d
    int random(int) -> e
com.mcminos.game.Level$1 -> com.mcminos.game.z:
    int[] $SwitchMap$com$mcminos$game$LevelObject$Types -> a
com.mcminos.game.LevelBlock -> com.mcminos.game.A:
    int x -> a
    int y -> b
    com.mcminos.game.Level level -> c
    com.mcminos.game.LevelObject wall -> d
    int wallIndex -> e
    com.mcminos.game.LevelObject rock -> f
    com.mcminos.game.LevelObject pill -> g
    com.mcminos.game.LevelObject castle -> h
    com.mcminos.game.LevelObject hole -> i
    com.mcminos.game.LevelObject oneWay -> j
    int oneWayType -> k
    java.util.ArrayList movables -> l
    java.util.ArrayList collectibles -> m
    com.mcminos.game.LevelObject door -> n
    boolean rockme -> o
    com.mcminos.game.Graphics[] walls -> p
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output) -> a
    void read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input) -> a
    boolean dirPossible(com.mcminos.game.LevelBlock,com.mcminos.game.LevelBlock,boolean,boolean) -> a
    int getUnblockedDirs(int,boolean,boolean,boolean) -> a
    int getUnblockedDirs(boolean,boolean) -> a
    void removePill() -> a
    int getOneWayType() -> b
    boolean hasCollectibles() -> c
    java.util.ArrayList getMovables() -> d
    boolean remove(com.mcminos.game.LevelObject) -> a
    void add(com.mcminos.game.LevelObject) -> b
    void updateWall() -> e
    void updateDoor() -> f
    boolean hasWall() -> g
    void makeWall() -> h
    void makeIndestructableWall() -> i
    void makeMcMinos(com.mcminos.game.McMinos) -> a
    void makePill() -> j
    void makePowerPill1() -> k
    void makePowerPill2() -> l
    void makePowerPill3() -> m
    void makeCastle(com.mcminos.game.Game) -> a
    void updateCastle$42cf731a() -> n
    boolean hasCastle() -> aq
    void makeLive() -> o
    void makeSkull() -> p
    void makeSkullField() -> q
    void makeBomb() -> r
    void makeDynamite() -> s
    void makeLandMine() -> t
    void makeLandMineActivated() -> u
    void makeKey() -> v
    void makeUmbrella() -> w
    void makeRock() -> x
    void makeRockMe() -> y
    void makeDoorClosed() -> z
    void makeDoorOpened() -> A
    boolean hasRock() -> B
    com.mcminos.game.LevelObject getRock() -> C
    boolean hasPill() -> D
    void makeHole(int) -> a
    boolean hasClosedDoor() -> E
    boolean hasDoor() -> F
    void makeSpeedUpField() -> G
    void makeSpeedDownField() -> H
    void makeWarpHole() -> I
    void makeKillAllPill() -> J
    void makeKillAllField() -> K
    void makeExit() -> L
    void makeBonus1() -> M
    void makeBonus2() -> N
    void makeBonus3() -> O
    void makeWhisky() -> P
    void makeMirror() -> Q
    void makePoison() -> R
    void makeMedicine() -> S
    void makeOneWay(int) -> b
    java.util.ArrayList getCollectibles() -> T
    void makeChocolate() -> U
    boolean isRockme() -> V
    com.mcminos.game.LevelBlock up() -> W
    com.mcminos.game.LevelBlock up2() -> X
    com.mcminos.game.LevelBlock right() -> Y
    com.mcminos.game.LevelBlock right2() -> Z
    com.mcminos.game.LevelBlock down() -> aa
    com.mcminos.game.LevelBlock down2() -> ab
    com.mcminos.game.LevelBlock left() -> ac
    com.mcminos.game.LevelBlock left2() -> ad
    void toggleDoor() -> ae
    int getX() -> af
    int getY() -> ag
    int getVX() -> ah
    int getVY() -> ai
    com.mcminos.game.LevelObject getWall() -> aj
    void setWall(com.mcminos.game.LevelObject) -> c
    int getWallIndex() -> ak
    com.mcminos.game.LevelObject getDoor() -> al
    void setDoor(com.mcminos.game.LevelObject) -> d
    boolean hasHole() -> am
    com.mcminos.game.LevelObject getHole() -> an
    com.mcminos.game.Level getLevel() -> ao
    boolean hasOneWay() -> ap
    boolean turnOneWay(com.mcminos.game.Audio) -> a
com.mcminos.game.LevelBlock$1 -> com.mcminos.game.B:
    int[] $SwitchMap$com$mcminos$game$LevelObject$Types -> a
com.mcminos.game.LevelCategory -> com.mcminos.game.C:
    java.lang.String name -> a
    java.lang.String id -> b
    java.util.HashMap endmessage -> c
    java.util.ArrayList levels -> d
    int nr -> e
    com.mcminos.game.Graphics gfx -> f
    int gfxStep -> g
    java.lang.String activated -> h
    java.lang.String getName() -> a
    java.lang.String getId() -> b
    com.mcminos.game.LevelConfig get(int) -> a
    int size() -> c
    int getNr() -> d
    void add(com.mcminos.game.LevelConfig) -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion getTexture(int) -> b
    java.lang.String getActivated() -> e
    com.mcminos.game.LevelConfig getLevel(java.lang.String) -> a
    java.lang.String getEndMessage(java.lang.String) -> b
com.mcminos.game.LevelConfig -> com.mcminos.game.D:
    int symbolStep -> i
    com.mcminos.game.Graphics symbol -> j
    java.lang.String id -> k
    java.util.HashMap title -> l
    java.util.HashMap body -> m
    com.mcminos.game.LevelCategory category -> n
    int nr -> o
    com.mcminos.game.LevelsConfig levelsConfig -> p
    java.lang.String author -> q
    int width -> r
    int height -> s
    int visibleWidth -> t
    int visibleHeight -> u
    boolean scrollX -> v
    boolean scrollY -> w
    com.mcminos.game.Graphics background -> x
    int restart -> y
    int mcminosSpeed -> a
    int[] ghostMax -> b
    int[] ghostTime -> c
    int[] ghostSpeed -> d
    int[] ghostAgility -> e
    int ghostPillDrop -> f
    int ghostPillFreq -> g
    int[] ghostTranswall -> h
    java.lang.String levelData -> z
    java.lang.String getTitle(java.lang.String) -> a
    boolean hasTitle(java.lang.String) -> c
    java.lang.String getBody(java.lang.String) -> b
    boolean hasBody(java.lang.String) -> d
    java.lang.String getId() -> a
    java.lang.String getName() -> b
    int getCategoryNr() -> c
    int getNr() -> d
    com.mcminos.game.LevelConfig getNextLevel() -> e
    int getWidth() -> f
    int getHeight() -> g
    java.lang.String getLevelData() -> h
    com.mcminos.game.Graphics getBackground() -> i
    boolean getScrollX() -> j
    boolean getScrollY() -> k
    int getRestart() -> l
    java.lang.String getAuthor() -> m
    int getVisibleWidth() -> n
    int getVisibleHeight() -> o
    com.badlogic.gdx.graphics.g2d.TextureRegion getSymbol(int) -> a
    com.mcminos.game.LevelCategory getCategory() -> p
com.mcminos.game.LevelObject -> com.mcminos.game.E:
    int x -> a
    int y -> b
    com.mcminos.game.LevelBlock levelBlock -> c
    com.mcminos.game.Graphics gfx -> d
    int zIndex -> e
    com.mcminos.game.Mover mover -> f
    com.mcminos.game.Level level -> g
    int holeLevel -> h
    int animDelta -> i
    com.mcminos.game.LevelObject$Types type -> j
    com.mcminos.game.LevelObject$DoorTypes doorType -> k
    int initOneWayType -> l
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output) -> a
    void read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input) -> a
    void initAfterKryoLoad(com.mcminos.game.Game) -> a
    int getInitOneWayType() -> a
    void construct(com.mcminos.game.LevelBlock,int,com.mcminos.game.LevelObject$Types) -> a
    void setGfx(com.mcminos.game.Graphics) -> a
    void draw(com.mcminos.game.PlayWindow) -> a
    void drawMini(com.mcminos.game.PlayWindow,com.badlogic.gdx.graphics.g2d.SpriteBatch) -> a
    com.mcminos.game.LevelBlock moveTo(int,int,com.mcminos.game.LevelBlock) -> a
    void setXY(int,int) -> a
    boolean hasGfx() -> b
    void setMover(com.mcminos.game.Mover) -> a
    com.mcminos.game.Mover getMover() -> c
    void dispose() -> d
    boolean isIndestructable() -> e
    boolean isInvisible() -> f
    void setHoleLevel(int) -> a
    boolean increaseHole(com.mcminos.game.Audio) -> a
    int getVX() -> g
    int getVY() -> h
    void setDoorType(com.mcminos.game.LevelObject$DoorTypes) -> a
    com.mcminos.game.LevelObject$DoorTypes getDoorType() -> i
    com.mcminos.game.LevelObject$Types getType() -> j
    com.mcminos.game.LevelBlock getLevelBlock() -> k
    void animationStartNow(com.mcminos.game.Game) -> b
    void animationStartRandom() -> l
    boolean fullOnBlock() -> m
    boolean holeIsMax() -> n
    void setOneWayGfx(int) -> b
    void setLevelBlock(com.mcminos.game.LevelBlock) -> a
    int getGhostNr() -> o
    int getzIndex() -> p
    int compareTo(java.lang.Object) -> compareTo
com.mcminos.game.LevelObject$DoorTypes -> com.mcminos.game.F:
    com.mcminos.game.LevelObject$DoorTypes None -> a
    com.mcminos.game.LevelObject$DoorTypes HorizontalOpened -> b
    com.mcminos.game.LevelObject$DoorTypes HorizontalClosed -> c
    com.mcminos.game.LevelObject$DoorTypes VerticalOpened -> d
    com.mcminos.game.LevelObject$DoorTypes VerticalClosed -> e
com.mcminos.game.LevelObject$Types -> com.mcminos.game.G:
    com.mcminos.game.LevelObject$Types Unspecified -> a
    com.mcminos.game.LevelObject$Types Power1 -> b
    com.mcminos.game.LevelObject$Types Power2 -> c
    com.mcminos.game.LevelObject$Types Power3 -> d
    com.mcminos.game.LevelObject$Types IndestructableWall -> e
    com.mcminos.game.LevelObject$Types InvisibleWall -> f
    com.mcminos.game.LevelObject$Types Rockme -> g
    com.mcminos.game.LevelObject$Types Live -> h
    com.mcminos.game.LevelObject$Types Letter -> aa
    com.mcminos.game.LevelObject$Types Skull -> i
    com.mcminos.game.LevelObject$Types Bomb -> j
    com.mcminos.game.LevelObject$Types Dynamite -> k
    com.mcminos.game.LevelObject$Types Rock -> l
    com.mcminos.game.LevelObject$Types Pill -> m
    com.mcminos.game.LevelObject$Types Castle -> n
    com.mcminos.game.LevelObject$Types McMinos -> o
    com.mcminos.game.LevelObject$Types Wall -> p
    com.mcminos.game.LevelObject$Types Background -> q
    com.mcminos.game.LevelObject$Types Key -> r
    com.mcminos.game.LevelObject$Types Umbrella -> s
    com.mcminos.game.LevelObject$Types DoorClosed -> t
    com.mcminos.game.LevelObject$Types DoorOpened -> u
    com.mcminos.game.LevelObject$Types SpeedUpField -> v
    com.mcminos.game.LevelObject$Types SpeedDownField -> w
    com.mcminos.game.LevelObject$Types WarpHole -> x
    com.mcminos.game.LevelObject$Types KillAllField -> y
    com.mcminos.game.LevelObject$Types OneWay -> z
    com.mcminos.game.LevelObject$Types Chocolate -> A
    com.mcminos.game.LevelObject$Types LandMine -> B
    com.mcminos.game.LevelObject$Types LandMineActive -> C
    com.mcminos.game.LevelObject$Types LandMineExplosion -> ab
    com.mcminos.game.LevelObject$Types BombFused -> D
    com.mcminos.game.LevelObject$Types DynamiteExplosion -> ac
    com.mcminos.game.LevelObject$Types BombExplosion -> E
    com.mcminos.game.LevelObject$Types DestroyedWall -> F
    com.mcminos.game.LevelObject$Types Ghost1 -> G
    com.mcminos.game.LevelObject$Types Ghost2 -> H
    com.mcminos.game.LevelObject$Types Ghost3 -> I
    com.mcminos.game.LevelObject$Types Ghost4 -> J
    com.mcminos.game.LevelObject$Types KillAllPill -> K
    com.mcminos.game.LevelObject$Types Exit -> L
    com.mcminos.game.LevelObject$Types Bonus1 -> M
    com.mcminos.game.LevelObject$Types Bonus2 -> N
    com.mcminos.game.LevelObject$Types Bonus3 -> O
    com.mcminos.game.LevelObject$Types Whisky -> P
    com.mcminos.game.LevelObject$Types Mirror -> Q
    com.mcminos.game.LevelObject$Types Poison -> R
    com.mcminos.game.LevelObject$Types Medicine -> S
    com.mcminos.game.LevelObject$Types SkullField -> T
    com.mcminos.game.LevelObject$Types Destination -> U
    com.mcminos.game.LevelObject$Types DynamiteFused -> V
    com.mcminos.game.LevelObject$Types McMinosDying -> W
    com.mcminos.game.LevelObject$Types McMinosFalling -> X
    com.mcminos.game.LevelObject$Types McMinosWinning -> Y
    com.mcminos.game.LevelObject$Types Hole -> Z
    com.mcminos.game.LevelObject$Types[] $VALUES -> ad
    com.mcminos.game.LevelObject$Types[] values() -> a
com.mcminos.game.LevelStatistics -> com.mcminos.game.H:
    boolean activated -> a
    boolean isActivated() -> a
com.mcminos.game.LevelsConfig -> com.mcminos.game.I:
    java.util.ArrayList categories -> a
    int size() -> a
    com.mcminos.game.LevelCategory get(int) -> a
    com.mcminos.game.LevelCategory getCategory(java.lang.String) -> a
    com.mcminos.game.LevelConfig getLevel(java.lang.String) -> b
    void add(com.mcminos.game.LevelCategory) -> a
com.mcminos.game.Load -> com.mcminos.game.J:
    com.badlogic.gdx.scenes.scene2d.Stage stage -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin -> b
    com.badlogic.gdx.graphics.Texture loadscreen -> c
    com.badlogic.gdx.scenes.scene2d.ui.Image loadimage -> d
    com.mcminos.game.Main main -> e
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> f
    com.mcminos.game.Audio audio -> g
    int step -> h
    com.badlogic.gdx.assets.AssetManager manager -> i
    com.badlogic.gdx.scenes.scene2d.ui.ProgressBar bar -> j
    float progress -> k
    com.mcminos.game.LevelsConfig levelsConfig -> l
    void render(float) -> a
    void resize(int,int) -> b
    void pause() -> h_
com.mcminos.game.Main -> com.mcminos.game.K:
    com.mcminos.game.Audio audio -> a
    java.util.HashMap levelFontList -> b
    java.util.HashMap menuFontList -> c
    java.util.HashMap levelSkinList -> d
    java.util.HashMap menuSkinList -> e
    java.lang.String versionString -> f
    com.mcminos.game.LevelsConfig levelsConfig -> g
    com.mcminos.game.MainMenu mainMenu -> h
    com.mcminos.game.Statistics statistics -> i
    com.mcminos.game.Preferences preferences -> j
    com.mcminos.game.LevelsConfig getLevelsConfig() -> d
    void create() -> a
    void initLevelsConfig(com.mcminos.game.LevelsConfig) -> a
    void initMainMenu(com.mcminos.game.MainMenu) -> a
    void loadSkinAndFont(int) -> a
    void loadUserStats() -> e
    com.mcminos.game.Statistics getStatistics() -> f
    com.badlogic.gdx.scenes.scene2d.ui.Skin createSkinWithFont(com.badlogic.gdx.graphics.g2d.BitmapFont) -> a
    void resize(int,int) -> a
    void render() -> b
    void pause() -> c
    void preDispose() -> g
    com.badlogic.gdx.graphics.g2d.BitmapFont getLevelFont(int) -> b
    com.badlogic.gdx.scenes.scene2d.ui.Skin getLevelSkin(int) -> c
    com.badlogic.gdx.scenes.scene2d.ui.Skin getMenuSkin(int) -> d
    com.mcminos.game.Audio getAudio() -> h
    java.lang.String getVersionString() -> i
    void activateMainMenu(com.mcminos.game.LevelConfig) -> a
    com.mcminos.game.Preferences getPreferences() -> j
com.mcminos.game.MainMenu -> com.mcminos.game.L:
    com.mcminos.game.LevelsConfig levelsConfig -> a
    com.mcminos.game.Statistics statistics -> b
    com.mcminos.game.Audio audio -> c
    com.mcminos.game.Preferences preferences -> d
    boolean resumeRequested -> e
    com.badlogic.gdx.scenes.scene2d.ui.Skin levelSkin -> f
    com.badlogic.gdx.scenes.scene2d.ui.Skin bigLevelSkin -> g
    com.badlogic.gdx.scenes.scene2d.Stage stage -> h
    com.badlogic.gdx.scenes.scene2d.ui.Table table -> i
    com.badlogic.gdx.graphics.g2d.TextureRegion bg -> j
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> k
    com.mcminos.game.Main main -> l
    com.badlogic.gdx.scenes.scene2d.ui.Table rootTable -> m
    com.mcminos.game.Fader fader -> n
    boolean fullscreen -> o
    com.mcminos.game.LevelConfig selectedLevel -> p
    int activatedCategory -> q
    java.lang.String language -> r
    com.badlogic.gdx.graphics.g2d.BitmapFont levelFont -> s
    java.util.HashMap textureCache -> t
    com.badlogic.gdx.scenes.scene2d.ui.Table currentDialog -> u
    com.mcminos.game.SymbolButton soundButton -> v
    com.mcminos.game.SymbolButton musicButton -> w
    void switchLevelCategory(int,com.badlogic.gdx.scenes.scene2d.ui.Label,com.badlogic.gdx.scenes.scene2d.ui.Table,com.badlogic.gdx.scenes.scene2d.ui.ScrollPane,com.mcminos.game.SymbolButton[],com.badlogic.gdx.scenes.scene2d.ui.ScrollPane,int) -> a
    void activateLevel(com.mcminos.game.LevelConfig) -> a
    void init() -> b
    void rebuildMenu() -> h
    void render(float) -> a
    void resize() -> c
    void resize(int,int) -> b
    void restoreInputProcessor() -> d
    void pause() -> h_
    void dispose() -> e
    void setSymbolResolution(int) -> a
    void increaseSymbolResolution() -> f
    void decreaseSymbolResolution() -> g
    void access$000(com.mcminos.game.MainMenu,int,com.badlogic.gdx.scenes.scene2d.ui.Label,com.badlogic.gdx.scenes.scene2d.ui.Table,com.badlogic.gdx.scenes.scene2d.ui.ScrollPane,com.mcminos.game.SymbolButton[],com.badlogic.gdx.scenes.scene2d.ui.ScrollPane,int) -> a
    void access$100(com.mcminos.game.MainMenu,com.mcminos.game.LevelConfig) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Table access$200(com.mcminos.game.MainMenu) -> a
    void access$300(com.mcminos.game.MainMenu) -> b
    void access$400(com.mcminos.game.MainMenu) -> c
    com.mcminos.game.Main access$500(com.mcminos.game.MainMenu) -> d
    com.mcminos.game.LevelConfig access$600(com.mcminos.game.MainMenu) -> e
    void access$700(com.mcminos.game.MainMenu) -> f
    com.mcminos.game.Preferences access$800(com.mcminos.game.MainMenu) -> g
    com.mcminos.game.SymbolButton access$900(com.mcminos.game.MainMenu) -> h
    com.mcminos.game.SymbolButton access$1000(com.mcminos.game.MainMenu) -> i
    void access$1100(com.mcminos.game.MainMenu) -> j
com.mcminos.game.MainMenu$1 -> com.mcminos.game.M:
    com.mcminos.game.MainMenu this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.MainMenu$10 -> com.mcminos.game.N:
    com.mcminos.game.MainMenu this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.MainMenu$11 -> com.mcminos.game.O:
    com.mcminos.game.MainMenu this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.MainMenu$12 -> com.mcminos.game.P:
    com.mcminos.game.MainMenu this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.MainMenu$2 -> com.mcminos.game.Q:
    com.mcminos.game.MainMenu this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.MainMenu$3 -> com.mcminos.game.R:
    void clicked$43069389() -> b
com.mcminos.game.MainMenu$4 -> com.mcminos.game.S:
    com.mcminos.game.MainMenu this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.MainMenu$5 -> com.mcminos.game.T:
    com.mcminos.game.MainMenu this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.MainMenu$6 -> com.mcminos.game.U:
    com.mcminos.game.MainMenu this$0 -> a
    boolean keyTyped$3bf802d6(char) -> a
com.mcminos.game.MainMenu$7 -> com.mcminos.game.V:
    com.mcminos.game.MainMenu this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.MainMenu$8 -> com.mcminos.game.W:
    com.mcminos.game.MainMenu this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.MainMenu$9 -> com.mcminos.game.X:
    com.mcminos.game.MainMenu this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.MainMenu$CategoryClickListener -> com.mcminos.game.Y:
    com.badlogic.gdx.scenes.scene2d.ui.Table twoColumns -> a
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane categorySelector -> b
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane levelSelector -> c
    int resolution -> d
    com.mcminos.game.SymbolButton[] categorySelectorButtons -> e
    com.badlogic.gdx.scenes.scene2d.ui.Label categoryLabel -> f
    int category -> g
    com.mcminos.game.MainMenu this$0 -> h
    void clicked$43069389() -> b
com.mcminos.game.MainMenu$LevelClickListener -> com.mcminos.game.Z:
    com.mcminos.game.LevelConfig level -> a
    com.mcminos.game.MainMenu this$0 -> b
    void clicked$43069389() -> b
com.mcminos.game.McMinos -> com.mcminos.game.aa:
    com.mcminos.game.Game game -> a
    com.mcminos.game.Level level -> b
    com.mcminos.game.McMinosMover mover -> c
    int powerDuration -> d
    int umbrellaDuration -> e
    int poisonDuration -> f
    int drunkLevel -> g
    int umbrellas -> h
    int chocolates -> i
    int bombs -> j
    int dynamites -> k
    int keys -> l
    int landmines -> m
    int medicines -> n
    int lives -> o
    int score -> p
    com.mcminos.game.Audio audio -> q
    com.mcminos.game.LevelObject levelObject -> r
    boolean killed -> s
    boolean winning -> t
    com.mcminos.game.LevelObject destination -> u
    boolean destinationSet -> v
    boolean falling -> w
    com.mcminos.game.LevelBlock startBlock -> x
    boolean destinationEnabled -> y
    boolean mirrored -> z
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output) -> a
    void read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input) -> a
    void initAfterKryoLoad(com.mcminos.game.Game,com.mcminos.game.McMinos) -> a
    void initLevelBlockAndObject(com.mcminos.game.Level,int,int) -> a
    void gfxPowered() -> ar
    void gfxPoisoned() -> as
    void gfxDrunk() -> at
    void gfxSelect() -> a
    com.mcminos.game.LevelObject getLevelObject() -> b
    void updateDurations() -> c
    void setPowerPillValues(int,int,int) -> a
    void move() -> d
    boolean hasKey() -> e
    void decreaseKeys() -> f
    void increaseKeys() -> g
    boolean hasChocolate() -> h
    void decreaseChocolates() -> i
    void increaseChocolates() -> j
    boolean hasUmbrella() -> k
    void increaseUmbrellas() -> l
    boolean hasBomb() -> m
    void decreaseBombs() -> n
    void increaseBombs() -> o
    boolean hasDynamite() -> p
    void decreaseDynamites() -> q
    void increaseDynamites() -> r
    boolean hasLandmine() -> s
    void decreaseLandmines() -> t
    void increaseLandmines() -> u
    com.mcminos.game.LevelBlock getLevelBlock() -> v
    com.mcminos.game.LevelBlock getFromLevelBlock() -> w
    int getVX() -> x
    int getVY() -> y
    boolean isPowered() -> z
    boolean fullOnBlock() -> A
    boolean umbrellaActive() -> B
    void increaseLives() -> C
    void consumeUmbrella() -> D
    int getUmbrellas() -> E
    int getChocolates() -> F
    int getBombs() -> G
    int getDynamites() -> H
    int getKeys() -> I
    int getLandmines() -> J
    int getLives() -> K
    int getScore() -> L
    int getPowerDuration() -> M
    int getUmbrellaDuration() -> N
    void setMover(com.mcminos.game.McMinosMover) -> a
    void teleportToBlock(com.mcminos.game.LevelBlock) -> a
    void dispose() -> O
    void kill$1ab8729d(java.lang.String,boolean) -> a
    void executeDeath(boolean) -> a
    void fall() -> P
    void executeFall() -> Q
    void poison() -> R
    void makeDrunk() -> S
    void stop() -> au
    boolean isKilled() -> T
    void win() -> U
    boolean isWinning() -> V
    void setDestination$525f6b18(int,int) -> a
    boolean isDestinationSet() -> W
    com.mcminos.game.LevelObject getDestination() -> X
    void hideDestination() -> Y
    void unsetDestination() -> Z
    void initDestination() -> aa
    boolean isFalling() -> ab
    int getPoisonDuration() -> ac
    boolean hasMedicine() -> ad
    void increaseMedicines() -> ae
    int getMedicines() -> af
    void consumeMedicine() -> ag
    void clearInventory() -> ah
    void reset() -> ai
    boolean updateKeyDirections() -> aj
    int getKeyDirections() -> ak
    int updateTouchpadDirections(float,float) -> a
    int getDrunkLevel() -> al
    void setSpeedAccelerated(boolean) -> b
    boolean isMirrored() -> am
    void toggleMirrored() -> an
    void initMover() -> ao
    int getSpeed() -> ap
    void setScore(int) -> a
    void setLives(int) -> b
    com.mcminos.game.McMinosMover getMover() -> aq
com.mcminos.game.McMinosMover -> com.mcminos.game.ab:
    com.mcminos.game.Game game -> g
    com.mcminos.game.McMinos mcminos -> h
    com.mcminos.game.Audio audio -> i
    com.mcminos.game.Level level -> j
    com.mcminos.game.Ghosts ghosts -> k
    int keyDirections -> l
    int touchpadDirections -> m
    java.util.ArrayList currentItemlist -> n
    com.mcminos.game.McMinosMover$MazeBlock[][] mazeBlocks -> o
    int[] mirrorTransform -> p
    void initFromGame() -> m
    com.mcminos.game.LevelBlock chooseDirection() -> a
    int distanceWithScroll(boolean,int,int,int) -> a
    void recurseMazeFromHere(int,int,int,int,int,int) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output) -> a
    void read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input) -> a
    void initAfterKryoLoad(com.mcminos.game.Game,com.mcminos.game.LevelObject) -> a
    boolean checkCollisions() -> b
    void checkGhosts(com.mcminos.game.LevelBlock) -> b
    boolean updateKeyDirections() -> c
    int getKeyDirections() -> d
    int updateTouchpadDirections(float,float) -> a
com.mcminos.game.McMinosMover$1 -> com.mcminos.game.ac:
    int[] $SwitchMap$com$mcminos$game$LevelObject$Types -> a
com.mcminos.game.McMinosMover$MazeBlock -> com.mcminos.game.ad:
    int directions -> a
    int distance -> b
    int mhDistanceToDestination -> c
    int fromX -> d
    int fromY -> e
    int fromDir -> f
com.mcminos.game.Mover -> com.mcminos.game.ae:
    com.mcminos.game.Graphics gfxRight -> g
    com.mcminos.game.Graphics gfxUp -> h
    com.mcminos.game.Graphics gfxStill -> i
    com.mcminos.game.Graphics gfxDown -> j
    com.mcminos.game.Graphics gfxLeft -> k
    int vPixelSpeed -> l
    int pixelSpeedAnder -> m
    int speedFactor -> n
    int currentDirection -> a
    com.mcminos.game.LevelObject levelObject -> b
    com.mcminos.game.LevelBlock currentLevelBlock -> c
    boolean canMoveRocks -> o
    int transWall -> d
    com.mcminos.game.LevelBlock lastBlock -> e
    com.mcminos.game.LevelBlock headingTo -> f
    boolean accelerated -> p
    int baseSpeed -> q
    void computeSpeeds() -> c
    int getVPixelSpeed() -> e
    void setSpeedFactor(int) -> a
    void setSpeedAccelerated(boolean) -> a
    boolean isAccelerated() -> f
    void setGfx(com.mcminos.game.Graphics,com.mcminos.game.Graphics,com.mcminos.game.Graphics,com.mcminos.game.Graphics,com.mcminos.game.Graphics) -> a
    void setGfx(com.mcminos.game.Graphics) -> a
    void init(com.mcminos.game.LevelObject,int,int,boolean,int) -> a
    int getUnblockedDirs(int,boolean,boolean) -> a
    boolean move() -> g
    boolean checkCollisions() -> b
    com.mcminos.game.LevelBlock chooseDirection() -> a
    com.mcminos.game.LevelObject getLevelObject() -> h
    void setLevelBlock(com.mcminos.game.LevelBlock) -> a
    void stop() -> i
    void resume() -> j
    com.mcminos.game.LevelBlock getLastBlock() -> k
    int getSpeedFactor() -> l
    void setLevelObject(com.mcminos.game.LevelObject) -> a
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output) -> a
    void read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input) -> a
    void initAfterKryoLoad(com.mcminos.game.Game,com.mcminos.game.LevelObject) -> a
    void remove(com.mcminos.game.LevelObject) -> b
com.mcminos.game.Mover$1 -> com.mcminos.game.af:
    int[] $SwitchMap$com$mcminos$game$LevelObject$Types -> a
com.mcminos.game.Play -> com.mcminos.game.ag:
    com.badlogic.gdx.graphics.OrthographicCamera camera -> a
    com.mcminos.game.Game game -> b
    com.mcminos.game.PlayWindow playwindow -> c
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin -> d
    com.mcminos.game.McMinos mcminos -> e
    com.mcminos.game.Audio audio -> f
    com.badlogic.gdx.graphics.g2d.SpriteBatch stageBatch -> g
    com.badlogic.gdx.graphics.g2d.SpriteBatch gameBatch -> h
    com.badlogic.gdx.graphics.g2d.SpriteBatch backgroundBatch -> i
    com.badlogic.gdx.graphics.g2d.SpriteBatch miniBatch -> j
    com.badlogic.gdx.graphics.glutils.ShapeRenderer miniScreenBackground -> k
    com.badlogic.gdx.graphics.glutils.ShapeRenderer box -> l
    com.badlogic.gdx.scenes.scene2d.Stage stage -> m
    com.mcminos.game.Main main -> n
    com.mcminos.game.Level level -> o
    long lastZoomTime -> p
    com.badlogic.gdx.graphics.g2d.TextureRegion background -> q
    com.badlogic.gdx.scenes.scene2d.ui.Touchpad touchpad -> r
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> s
    com.badlogic.gdx.utils.StringBuilder score -> t
    com.badlogic.gdx.utils.StringBuilder livesScore -> u
    com.badlogic.gdx.utils.StringBuilder framerateScore -> v
    com.mcminos.game.Toolbox toolbox -> w
    com.mcminos.game.PlayDialogs dialogs -> x
    boolean menusActivated -> y
    long toolboxRebuildTimePoint -> z
    int destinationX -> A
    int destinationY -> B
    long lastTouchDown -> C
    long lastTouchUp -> D
    long panning -> E
    boolean paused -> F
    com.mcminos.game.Preferences preferences -> G
    com.mcminos.game.Fader fader -> H
    int[] barLengths -> I
    com.badlogic.gdx.graphics.Color[] barColors -> J
    void preInit(com.mcminos.game.Main) -> a
    void initAfterLevel() -> w
    boolean isTouchpadActive() -> b
    boolean toggleTouchpad() -> c
    void touchpadResize() -> x
    void backToMenu() -> d
    void render(float) -> a
    void setDestination() -> y
    void resize(int,int) -> b
    void resize() -> z
    void pause() -> h_
    void dispose() -> A
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    void togglePause() -> B
    void zoomPlus() -> e
    void zoomMinus() -> f
    boolean destinationDown(int,int,int,boolean) -> a
    boolean touchDown(int,int,int,int) -> a
    int windowToGame(int,int,int,int,boolean) -> a
    int windowToGameY(int) -> d
    int windowToGameX(int) -> e
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
    boolean mouseMoved(int,int) -> a
    boolean scrolled(int) -> c
    boolean touchDown$4096cea7(float,float,int) -> a
    boolean tap(float,float,int,int) -> a
    boolean tryDoor(int,int) -> c
    int blockDistance(com.mcminos.game.LevelBlock,com.mcminos.game.LevelBlock) -> a
    boolean longPress(float,float) -> a
    boolean fling(float,float,int) -> b
    boolean pan(float,float,float,float) -> a
    boolean panStop$4096cea7() -> a
    boolean zoom(float,float) -> b
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
    int getGameResolution() -> g
    com.mcminos.game.Game getGame() -> h
    int getSymbolResolution() -> i
    void setSymbolResolution(int) -> f
    void increaseSymbolResolution() -> j
    void decreaseSymbolResolution() -> k
    com.mcminos.game.Main getMain() -> l
    void pauseOn() -> m
    void pauseOff() -> n
    boolean isPaused() -> o
    com.mcminos.game.PlayWindow getPlayWindow() -> p
    com.badlogic.gdx.scenes.scene2d.Stage getStage() -> q
    void dialogGameMenu() -> r
    void dialogDoorOpener() -> s
    boolean hasDialog() -> t
    void closeDialog() -> u
    void triggerFade() -> v
    com.badlogic.gdx.scenes.scene2d.ui.Touchpad access$000(com.mcminos.game.Play) -> a
    com.mcminos.game.McMinos access$100(com.mcminos.game.Play) -> b
    com.mcminos.game.Game access$200(com.mcminos.game.Play) -> c
com.mcminos.game.Play$1 -> com.mcminos.game.ah:
    com.mcminos.game.Play this$0 -> a
    void changed$d8a80ea() -> a
com.mcminos.game.PlayDialogs -> com.mcminos.game.ai:
    com.mcminos.game.Main main -> a
    com.mcminos.game.Play play -> b
    com.mcminos.game.Game game -> c
    com.mcminos.game.Level level -> d
    com.mcminos.game.Audio audio -> e
    com.mcminos.game.McMinos mcminos -> f
    com.mcminos.game.PlayWindow playwindow -> g
    com.badlogic.gdx.scenes.scene2d.Stage stage -> h
    com.mcminos.game.Preferences preferences -> i
    com.badlogic.gdx.scenes.scene2d.ui.Skin menuSkin -> j
    com.badlogic.gdx.scenes.scene2d.ui.Table dialog -> k
    com.mcminos.game.LevelBlock[] doorBlocks -> l
    com.badlogic.gdx.scenes.scene2d.ui.Label pillLabel -> m
    com.badlogic.gdx.scenes.scene2d.ui.Label rockmeLabel -> n
    int closeTimer -> o
    com.mcminos.game.SymbolButton soundButton -> p
    com.mcminos.game.SymbolButton musicButton -> q
    com.mcminos.game.SymbolButton touchpadButton -> r
    void close() -> a
    void openLevelStory() -> b
    void openGameMenu() -> c
    void open(com.badlogic.gdx.scenes.scene2d.ui.Table) -> a
    com.mcminos.game.LevelBlock checkDoor(com.mcminos.game.LevelBlock,com.mcminos.game.LevelBlock) -> a
    void openDoorOpener() -> d
    void toggleDoor(com.mcminos.game.LevelBlock) -> a
    void checkDoorKey(int) -> a
    boolean active() -> e
    void updateTimer() -> f
    com.mcminos.game.Preferences access$000(com.mcminos.game.PlayDialogs) -> a
    com.mcminos.game.Audio access$100(com.mcminos.game.PlayDialogs) -> b
    com.mcminos.game.Play access$200(com.mcminos.game.PlayDialogs) -> c
    com.mcminos.game.SymbolButton access$300(com.mcminos.game.PlayDialogs) -> d
    com.mcminos.game.SymbolButton access$400(com.mcminos.game.PlayDialogs) -> e
    com.mcminos.game.SymbolButton access$500(com.mcminos.game.PlayDialogs) -> f
    void access$600(com.mcminos.game.PlayDialogs) -> g
    com.mcminos.game.McMinos access$700(com.mcminos.game.PlayDialogs) -> h
com.mcminos.game.PlayDialogs$1 -> com.mcminos.game.aj:
    com.mcminos.game.PlayDialogs this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.PlayDialogs$10 -> com.mcminos.game.ak:
    com.mcminos.game.PlayDialogs this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.PlayDialogs$11 -> com.mcminos.game.al:
    com.mcminos.game.PlayDialogs this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.PlayDialogs$12 -> com.mcminos.game.am:
    com.mcminos.game.PlayDialogs this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.PlayDialogs$13 -> com.mcminos.game.an:
    com.mcminos.game.PlayDialogs this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.PlayDialogs$14 -> com.mcminos.game.ao:
    com.mcminos.game.PlayDialogs this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.PlayDialogs$15 -> com.mcminos.game.ap:
    com.mcminos.game.PlayDialogs this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.PlayDialogs$16 -> com.mcminos.game.aq:
    com.mcminos.game.PlayDialogs this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.PlayDialogs$17 -> com.mcminos.game.ar:
    com.mcminos.game.PlayDialogs this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.PlayDialogs$1KeyButton -> com.mcminos.game.as:
    com.badlogic.gdx.scenes.scene2d.ui.Image keyImage -> a
    com.mcminos.game.LevelBlock doorBlock -> b
    com.mcminos.game.PlayDialogs this$0 -> c
    void clicked$43069389() -> b
com.mcminos.game.PlayDialogs$2 -> com.mcminos.game.at:
    com.mcminos.game.PlayDialogs this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.PlayDialogs$3 -> com.mcminos.game.au:
    com.mcminos.game.PlayDialogs this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.PlayDialogs$4 -> com.mcminos.game.av:
    com.mcminos.game.PlayDialogs this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.PlayDialogs$5 -> com.mcminos.game.aw:
    com.mcminos.game.PlayDialogs this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.PlayDialogs$6 -> com.mcminos.game.ax:
    com.mcminos.game.PlayDialogs this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.PlayDialogs$7 -> com.mcminos.game.ay:
    com.mcminos.game.PlayDialogs this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.PlayDialogs$8 -> com.mcminos.game.az:
    com.mcminos.game.PlayDialogs this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.PlayDialogs$9 -> com.mcminos.game.aA:
    com.mcminos.game.PlayDialogs this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.PlayWindow -> com.mcminos.game.aB:
    int virtualBlockResolutionExponent -> a
    com.mcminos.game.McMinos mcminos -> s
    com.badlogic.gdx.graphics.OrthographicCamera camera -> t
    com.mcminos.game.Main main -> u
    com.mcminos.game.Preferences preferences -> v
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> b
    int projectionX -> c
    int projectionY -> d
    int windowVPixelXPos -> e
    int windowVPixelYPos -> f
    int visibleWidthInPixels -> g
    int visibleHeightInPixels -> h
    int visibleWidthInVPixels -> i
    int visibleHeightInVPixels -> j
    int resolution -> k
    int resolutionExponent -> l
    int virtual2MiniExponent -> m
    int levelWidthInPixels -> n
    int levelHeightInPixels -> o
    com.mcminos.game.Level level -> p
    com.mcminos.game.Game game -> q
    int viewWidthInPixels -> w
    int viewHeightInPixels -> x
    com.badlogic.gdx.math.Rectangle scissors -> y
    int currentResolutionBitsLeftShifter -> z
    int virtual2MiniResolution -> r
    int miniX -> A
    int miniY -> B
    boolean miniMapLeft -> C
    void setResolution(int,int) -> a
    int computeWindowCoordinate(int,int,boolean,int,int,int) -> a
    void updateCoordinates(int,int) -> b
    void resize(int,int,int) -> a
    void resize(int) -> a
    int getWidthInPixels() -> a
    int getHeightInPixels() -> b
    com.badlogic.gdx.math.Rectangle getScissors() -> c
    int vPixelToScreen(int,int,int) -> b
    int getMiniX() -> d
    int getMiniY() -> e
com.mcminos.game.Preferences -> com.mcminos.game.aC:
    int symbolMinRes -> a
    com.badlogic.gdx.Preferences preferencesHandle -> b
    com.mcminos.game.Audio audio -> c
    boolean touchpadActive -> d
    int gameResolution -> e
    int symbolResolution -> f
    boolean fullScreen -> g
    boolean dontSave -> h
    java.lang.String language -> i
    java.lang.String[] languageList -> j
    void save() -> k
    void load() -> l
    int getGameResolution() -> a
    int getSymbolResolution() -> b
    int setGameResolution(int) -> a
    void setSymbolResolution(int) -> b
    void setTouchpadActive(boolean) -> a
    boolean getFullScreen() -> c
    void setFullScreen(boolean) -> b
    void toggleSound() -> d
    boolean getSound() -> e
    void toggleMusic() -> f
    boolean getMusic() -> g
    java.lang.String getLanguage() -> h
    com.mcminos.game.Graphics languageGfx() -> i
    void nextLanguage() -> j
com.mcminos.game.RockMover -> com.mcminos.game.aD:
    com.mcminos.game.Audio audio -> g
    com.mcminos.game.LevelBlock lastBlockChecked -> h
    com.mcminos.game.Game game -> i
    void write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output) -> a
    void read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input) -> a
    void initAfterKryoLoad(com.mcminos.game.Game,com.mcminos.game.LevelObject) -> a
    boolean checkCollisions() -> b
    com.mcminos.game.LevelBlock chooseDirection() -> a
    void triggerMove(int,int,boolean,com.mcminos.game.LevelBlock) -> a
com.mcminos.game.ScreenshotFactory -> com.mcminos.game.aE:
    int counter -> a
    void saveScreenshot() -> a
    com.badlogic.gdx.graphics.Pixmap getScreenshot(int,int,int,int,boolean) -> a
com.mcminos.game.SegmentString -> com.mcminos.game.aF:
    com.badlogic.gdx.utils.StringBuilder sb -> a
    int len -> b
    int counter -> c
    char[] numberTranslator -> d
    int length() -> length
    char charAt(int) -> charAt
    java.lang.CharSequence subSequence(int,int) -> subSequence
    void writeInteger(int) -> a
    com.badlogic.gdx.utils.StringBuilder getStringBuilder() -> a
com.mcminos.game.Statistics -> com.mcminos.game.aG:
    com.mcminos.game.Main main -> a
    com.badlogic.gdx.files.FileHandle[] saveFiles -> b
    java.util.HashMap statsRecord -> c
    com.mcminos.game.LevelConfig lastLevel -> d
    java.security.Key secretKey -> e
    javax.crypto.Cipher cipher -> f
    com.esotericsoftware.kryo.Kryo kryo -> g
    void activate(com.mcminos.game.LevelConfig) -> a
    boolean activated(com.mcminos.game.LevelConfig) -> b
    boolean load() -> b
    com.mcminos.game.LevelConfig getLastLevel() -> a
com.mcminos.game.SymbolButton -> com.mcminos.game.aH:
    int res -> a
    com.badlogic.gdx.scenes.scene2d.Group group -> b
    com.badlogic.gdx.scenes.scene2d.ui.Image bottom -> c
    com.badlogic.gdx.scenes.scene2d.ui.Image top -> d
    com.badlogic.gdx.scenes.scene2d.ui.Image selectLayer -> e
    boolean selected -> f
    void setSymbol(com.badlogic.gdx.graphics.g2d.TextureRegion) -> a
    void setSymbol(int,com.badlogic.gdx.graphics.g2d.TextureRegion) -> a
    void addListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> a
    com.badlogic.gdx.scenes.scene2d.Group getCell() -> a
    void select() -> b
    void unselect() -> c
    void colorSelect() -> d
    void colorNormal() -> e
    void access$000(com.mcminos.game.SymbolButton) -> a
    boolean access$100(com.mcminos.game.SymbolButton) -> b
    void access$200(com.mcminos.game.SymbolButton) -> c
    void access$300(com.mcminos.game.SymbolButton) -> d
com.mcminos.game.SymbolButton$1 -> com.mcminos.game.aI:
    boolean touchDown -> a
    boolean entered -> b
    com.mcminos.game.SymbolButton this$0 -> c
    void selectColor() -> c
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void enter$6049651d(int) -> a
    void exit$6049651d(int) -> b
com.mcminos.game.Toolbox -> com.mcminos.game.aJ:
    com.badlogic.gdx.scenes.scene2d.Stage stage -> a
    com.mcminos.game.Preferences preferences -> b
    com.badlogic.gdx.scenes.scene2d.ui.Skin levelSkin -> c
    com.badlogic.gdx.scenes.scene2d.ui.Skin menuSkin -> d
    com.mcminos.game.PlayWindow playwindow -> e
    com.mcminos.game.McMinos mcminos -> f
    com.mcminos.game.Audio audio -> g
    com.mcminos.game.Level level -> h
    com.mcminos.game.Play play -> i
    com.mcminos.game.Main main -> j
    com.badlogic.gdx.scenes.scene2d.ui.Table table -> k
    com.badlogic.gdx.scenes.scene2d.ui.Table rootTable -> l
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane toolboxScroller -> m
    com.mcminos.game.ToolboxButton chocolateButton -> n
    com.mcminos.game.ToolboxButton keyButton -> o
    com.mcminos.game.ToolboxButton dynamiteButton -> p
    com.mcminos.game.ToolboxButton bombButton -> q
    com.mcminos.game.ToolboxButton landmineButton -> r
    com.mcminos.game.ToolboxButton umbrellaButton -> s
    com.mcminos.game.ToolboxButton medicineButton -> t
    com.mcminos.game.ToolboxButton playPauseButton -> u
    java.util.ArrayList buttonList -> v
    boolean rebuildNecessary -> w
    boolean activatingTouchInProgress -> x
    void resize() -> a
    void rebuild() -> b
    void update() -> c
    void activateMedicine() -> d
    void activateChocolate() -> e
    void activateBomb() -> f
    void activateDynamite() -> g
    void activateLandmine() -> h
    void activateUmbrella() -> i
    int addButton(com.mcminos.game.ToolboxButton) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin getLevelSkin() -> j
    com.badlogic.gdx.scenes.scene2d.ui.Table getTable() -> k
    boolean isRebuildNecessary() -> l
    com.badlogic.gdx.scenes.scene2d.ui.Table access$000(com.mcminos.game.Toolbox) -> a
    boolean access$102(com.mcminos.game.Toolbox,boolean) -> a
    boolean access$100(com.mcminos.game.Toolbox) -> b
com.mcminos.game.Toolbox$1 -> com.mcminos.game.aK:
    com.mcminos.game.Play val$play -> a
    com.mcminos.game.Toolbox this$0 -> b
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
com.mcminos.game.Toolbox$10 -> com.mcminos.game.aL:
    com.mcminos.game.Toolbox this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.Toolbox$2 -> com.mcminos.game.aM:
    com.mcminos.game.Play val$play -> a
    com.mcminos.game.Toolbox this$0 -> b
    void clicked$43069389() -> b
com.mcminos.game.Toolbox$3 -> com.mcminos.game.aN:
    com.mcminos.game.Play val$play -> a
    void clicked$43069389() -> b
com.mcminos.game.Toolbox$4 -> com.mcminos.game.aO:
    com.mcminos.game.Toolbox this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.Toolbox$5 -> com.mcminos.game.aP:
    com.mcminos.game.Play val$play -> a
    void clicked$43069389() -> b
com.mcminos.game.Toolbox$6 -> com.mcminos.game.aQ:
    com.mcminos.game.Toolbox this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.Toolbox$7 -> com.mcminos.game.aR:
    com.mcminos.game.Toolbox this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.Toolbox$8 -> com.mcminos.game.aS:
    com.mcminos.game.Toolbox this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.Toolbox$9 -> com.mcminos.game.aT:
    com.mcminos.game.Toolbox this$0 -> a
    void clicked$43069389() -> b
com.mcminos.game.ToolboxButton -> com.mcminos.game.aU:
    com.mcminos.game.Toolbox toolbox -> a
    com.badlogic.gdx.scenes.scene2d.ui.Table table -> b
    com.mcminos.game.Graphics gfx -> c
    com.badlogic.gdx.scenes.scene2d.Group button -> d
    com.badlogic.gdx.scenes.scene2d.ui.Label label -> e
    com.mcminos.game.SegmentString text -> f
    boolean visible -> g
    boolean lastVisible -> h
    int lastResolution -> i
    void rebuildButton(int) -> a
    boolean setValue(int) -> b
    boolean isVisible() -> a
    boolean setGraphics(com.mcminos.game.Graphics) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Cell addToTable() -> b
com.mcminos.game.android.AndroidLauncher -> com.mcminos.game.android.AndroidLauncher:
    void onCreate(android.os.Bundle) -> onCreate
org.objectweb.asm.AnnotationVisitor -> a.a.a.a:
    org.objectweb.asm.AnnotationVisitor av -> a
    void visit(java.lang.String,java.lang.Object) -> a
    void visitEnum(java.lang.String,java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitArray(java.lang.String) -> a
    void visitEnd() -> a
org.objectweb.asm.AnnotationWriter -> a.a.a.b:
    org.objectweb.asm.ClassWriter a -> b
    int b -> c
    boolean c -> d
    org.objectweb.asm.ByteVector d -> e
    org.objectweb.asm.ByteVector e -> f
    int f -> g
    org.objectweb.asm.AnnotationWriter g -> a
    org.objectweb.asm.AnnotationWriter h -> h
    void visit(java.lang.String,java.lang.Object) -> a
    void visitEnum(java.lang.String,java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitArray(java.lang.String) -> a
    void visitEnd() -> a
    int a() -> b
    void a(org.objectweb.asm.ByteVector) -> a
    void a(org.objectweb.asm.AnnotationWriter[],int,org.objectweb.asm.ByteVector) -> a
    void a(int,org.objectweb.asm.TypePath,org.objectweb.asm.ByteVector) -> a
org.objectweb.asm.Attribute -> a.a.a.c:
    java.lang.String type -> a
    byte[] b -> c
    org.objectweb.asm.Attribute a -> b
    org.objectweb.asm.Attribute read$77b048d0(org.objectweb.asm.ClassReader,int,int) -> a
    org.objectweb.asm.ByteVector write$15f7fde1() -> b
    int a() -> a
    int a(org.objectweb.asm.ClassWriter,byte[],int,int,int) -> a
    void a(org.objectweb.asm.ClassWriter,byte[],int,int,int,org.objectweb.asm.ByteVector) -> a
org.objectweb.asm.ByteVector -> a.a.a.d:
    byte[] a -> a
    int b -> b
    org.objectweb.asm.ByteVector putByte(int) -> a
    org.objectweb.asm.ByteVector a(int,int) -> a
    org.objectweb.asm.ByteVector putShort(int) -> b
    org.objectweb.asm.ByteVector b(int,int) -> b
    org.objectweb.asm.ByteVector putInt(int) -> c
    org.objectweb.asm.ByteVector putLong(long) -> a
    org.objectweb.asm.ByteVector putUTF8(java.lang.String) -> a
    org.objectweb.asm.ByteVector encodeUTF8(java.lang.String,int,int) -> a
    org.objectweb.asm.ByteVector putByteArray(byte[],int,int) -> a
    void a(int) -> d
org.objectweb.asm.ClassReader -> a.a.a.e:
    byte[] b -> a
    int[] a -> b
    java.lang.String[] c -> c
    int d -> d
    int header -> e
    void accept(org.objectweb.asm.ClassVisitor,int) -> a
    int[] a(org.objectweb.asm.MethodVisitor,org.objectweb.asm.Context,int,boolean) -> a
    int a(org.objectweb.asm.Context,int) -> a
    void b(org.objectweb.asm.MethodVisitor,org.objectweb.asm.Context,int,boolean) -> b
    int a(int,char[],boolean,org.objectweb.asm.AnnotationVisitor) -> a
    int a(int,char[],java.lang.String,org.objectweb.asm.AnnotationVisitor) -> a
    int a(int,boolean,boolean,org.objectweb.asm.Context) -> a
    int a(java.lang.Object[],int,int,char[],org.objectweb.asm.Label[]) -> a
    org.objectweb.asm.Label readLabel(int,org.objectweb.asm.Label[]) -> a
    org.objectweb.asm.Attribute a(org.objectweb.asm.Attribute[],java.lang.String,int,int,char[],int,org.objectweb.asm.Label[]) -> a
    int readByte(int) -> a
    int readUnsignedShort(int) -> b
    short readShort(int) -> c
    int readInt(int) -> d
    long readLong(int) -> e
    java.lang.String readUTF8(int,char[]) -> a
    java.lang.String a(int,int,char[]) -> a
    java.lang.String readClass(int,char[]) -> b
    java.lang.Object readConst(int,char[]) -> c
org.objectweb.asm.ClassVisitor -> a.a.a.f:
    int api -> a
    org.objectweb.asm.ClassVisitor cv -> b
    void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    void visitSource(java.lang.String,java.lang.String) -> a
    void visitOuterClass(java.lang.String,java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int) -> a
    org.objectweb.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object) -> a
    org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
org.objectweb.asm.ClassWriter -> a.a.a.g:
    byte[] a -> a
    int b -> b
    int c -> j
    org.objectweb.asm.ByteVector d -> k
    org.objectweb.asm.Item[] e -> l
    int f -> m
    org.objectweb.asm.Item g -> n
    org.objectweb.asm.Item h -> o
    org.objectweb.asm.Item i -> p
    org.objectweb.asm.Item j -> q
    org.objectweb.asm.Item[] H -> c
    short G -> r
    int k -> s
    int l -> t
    java.lang.String I -> d
    int m -> u
    int n -> v
    int o -> w
    int[] p -> x
    int q -> y
    org.objectweb.asm.ByteVector r -> z
    int s -> A
    int t -> B
    org.objectweb.asm.AnnotationWriter u -> C
    org.objectweb.asm.AnnotationWriter v -> D
    org.objectweb.asm.AnnotationWriter N -> E
    org.objectweb.asm.AnnotationWriter O -> F
    org.objectweb.asm.Attribute w -> G
    int x -> H
    org.objectweb.asm.ByteVector y -> I
    int z -> J
    org.objectweb.asm.ByteVector A -> K
    org.objectweb.asm.FieldWriter B -> e
    org.objectweb.asm.FieldWriter C -> f
    org.objectweb.asm.MethodWriter D -> g
    org.objectweb.asm.MethodWriter E -> h
    boolean K -> L
    boolean J -> M
    boolean L -> i
    void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    void visitSource(java.lang.String,java.lang.String) -> a
    void visitOuterClass(java.lang.String,java.lang.String,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int) -> a
    org.objectweb.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object) -> a
    org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    byte[] toByteArray() -> a
    org.objectweb.asm.Item a(java.lang.Object) -> a
    int newUTF8(java.lang.String) -> a
    org.objectweb.asm.Item a(java.lang.String) -> b
    int newClass(java.lang.String) -> c
    org.objectweb.asm.Item a(int,java.lang.String,java.lang.String,java.lang.String) -> a
    org.objectweb.asm.Item a(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[]) -> a
    org.objectweb.asm.Item a(java.lang.String,java.lang.String,java.lang.String) -> b
    org.objectweb.asm.Item a(java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    org.objectweb.asm.Item a(int) -> a
    org.objectweb.asm.Item a(float) -> a
    org.objectweb.asm.Item a(long) -> a
    org.objectweb.asm.Item a(double) -> a
    int newNameType(java.lang.String,java.lang.String) -> b
    int c(java.lang.String) -> d
    int a(java.lang.String,int) -> a
    org.objectweb.asm.Item c$43483361() -> b
    int a(int,int) -> a
    java.lang.String getCommonSuperClass(java.lang.String,java.lang.String) -> c
    org.objectweb.asm.Item a(org.objectweb.asm.Item) -> a
    void b(org.objectweb.asm.Item) -> b
    void a(int,int,int) -> a
    void b(int,int,int) -> b
org.objectweb.asm.Context -> a.a.a.h:
    org.objectweb.asm.Attribute[] a -> a
    int b -> b
    char[] c -> c
    int[] d -> d
    int e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    org.objectweb.asm.Label[] h -> h
    int i -> i
    org.objectweb.asm.TypePath j -> j
    int o -> k
    org.objectweb.asm.Label[] l -> l
    org.objectweb.asm.Label[] m -> m
    int[] n -> n
    int p -> o
    int q -> p
    int r -> q
    java.lang.Object[] s -> r
    int t -> s
    java.lang.Object[] u -> t
org.objectweb.asm.Edge -> a.a.a.i:
    int a -> a
    org.objectweb.asm.Label b -> b
    org.objectweb.asm.Edge c -> c
org.objectweb.asm.FieldVisitor -> a.a.a.j:
    int api -> b
    org.objectweb.asm.FieldVisitor fv -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
org.objectweb.asm.FieldWriter -> a.a.a.k:
    org.objectweb.asm.ClassWriter b -> b
    int c -> c
    int d -> d
    int e -> e
    int f -> f
    int g -> g
    org.objectweb.asm.AnnotationWriter h -> h
    org.objectweb.asm.AnnotationWriter i -> i
    org.objectweb.asm.AnnotationWriter k -> j
    org.objectweb.asm.AnnotationWriter l -> k
    org.objectweb.asm.Attribute j -> l
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    int a() -> a
    void a(org.objectweb.asm.ByteVector) -> a
org.objectweb.asm.Frame -> a.a.a.l:
    int[] a -> a
    org.objectweb.asm.Label b -> b
    int[] c -> c
    int[] d -> d
    int[] e -> e
    int[] f -> f
    int g -> g
    int h -> h
    int[] i -> i
    int a(int) -> a
    void a(int,int) -> a
    void b(int) -> b
    void a(org.objectweb.asm.ClassWriter,java.lang.String) -> a
    int b(org.objectweb.asm.ClassWriter,java.lang.String) -> b
    int a() -> a
    void c(int) -> c
    void a(java.lang.String) -> a
    int a(org.objectweb.asm.ClassWriter,int) -> a
    void a(org.objectweb.asm.ClassWriter,int,org.objectweb.asm.Type[],int) -> a
    void a(int,int,org.objectweb.asm.ClassWriter,org.objectweb.asm.Item) -> a
    boolean a(org.objectweb.asm.ClassWriter,org.objectweb.asm.Frame,int) -> a
    boolean a(org.objectweb.asm.ClassWriter,int,int[],int) -> a
org.objectweb.asm.Handle -> a.a.a.m:
    int a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.objectweb.asm.Handler -> a.a.a.n:
    org.objectweb.asm.Label a -> a
    org.objectweb.asm.Label b -> b
    org.objectweb.asm.Label c -> c
    java.lang.String d -> d
    int e -> e
    org.objectweb.asm.Handler f -> f
    org.objectweb.asm.Handler a(org.objectweb.asm.Handler,org.objectweb.asm.Label,org.objectweb.asm.Label) -> a
org.objectweb.asm.Item -> a.a.a.o:
    int a -> a
    int b -> b
    int c -> c
    long d -> d
    java.lang.String g -> e
    java.lang.String h -> f
    java.lang.String i -> g
    int j -> h
    org.objectweb.asm.Item k -> i
    void a(int,java.lang.String,java.lang.String,java.lang.String) -> a
org.objectweb.asm.Label -> a.a.a.p:
    int a -> a
    int b -> b
    int c -> c
    int d -> j
    int[] e -> k
    int f -> d
    int g -> e
    org.objectweb.asm.Frame h -> f
    org.objectweb.asm.Label i -> g
    org.objectweb.asm.Edge j -> h
    org.objectweb.asm.Label k -> i
    void a$222d5ad(org.objectweb.asm.ByteVector,int,boolean) -> a
    void a(int,int) -> a
    boolean a$30ed9249(int,byte[]) -> a
    org.objectweb.asm.Label a() -> a
    void b(org.objectweb.asm.Label,long,int) -> a
    java.lang.String toString() -> toString
org.objectweb.asm.MethodVisitor -> a.a.a.q:
    int api -> b
    org.objectweb.asm.MethodVisitor mv -> a
    void visitParameter(java.lang.String,int) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotationDefault() -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[]) -> a
    void visitInsn(int) -> a
    void visitIntInsn(int,int) -> a
    void visitVarInsn(int,int) -> b
    void visitTypeInsn(int,java.lang.String) -> a
    void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String) -> a
    void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String) -> b
    void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[]) -> a
    void visitJumpInsn(int,org.objectweb.asm.Label) -> a
    void visitLabel(org.objectweb.asm.Label) -> a
    void visitLdcInsn(java.lang.Object) -> a
    void visitIincInsn(int,int) -> c
    void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[]) -> a
    void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[]) -> a
    void visitMultiANewArrayInsn(java.lang.String,int) -> b
    org.objectweb.asm.AnnotationVisitor visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> b
    void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitTryCatchAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> c
    void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int) -> a
    org.objectweb.asm.AnnotationVisitor visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean) -> a
    void visitLineNumber(int,org.objectweb.asm.Label) -> b
    void visitMaxs(int,int) -> d
org.objectweb.asm.MethodWriter -> a.a.a.r:
    org.objectweb.asm.ClassWriter b -> b
    int c -> h
    int d -> i
    int e -> j
    java.lang.String f -> k
    java.lang.String g -> c
    int h -> d
    int i -> e
    int j -> f
    int[] k -> g
    org.objectweb.asm.ByteVector l -> l
    org.objectweb.asm.AnnotationWriter m -> m
    org.objectweb.asm.AnnotationWriter n -> n
    org.objectweb.asm.AnnotationWriter U -> o
    org.objectweb.asm.AnnotationWriter V -> p
    org.objectweb.asm.AnnotationWriter[] o -> q
    org.objectweb.asm.AnnotationWriter[] p -> r
    int S -> s
    org.objectweb.asm.Attribute q -> t
    org.objectweb.asm.ByteVector r -> u
    int s -> v
    int t -> w
    int T -> x
    int u -> y
    org.objectweb.asm.ByteVector v -> z
    int w -> A
    int[] x -> B
    int[] z -> C
    int A -> D
    org.objectweb.asm.Handler B -> E
    org.objectweb.asm.Handler C -> F
    int Z -> G
    org.objectweb.asm.ByteVector $ -> H
    int D -> I
    org.objectweb.asm.ByteVector E -> J
    int F -> K
    org.objectweb.asm.ByteVector G -> L
    int H -> M
    org.objectweb.asm.ByteVector I -> N
    int Y -> O
    org.objectweb.asm.AnnotationWriter W -> P
    org.objectweb.asm.AnnotationWriter X -> Q
    org.objectweb.asm.Attribute J -> R
    boolean K -> S
    int L -> T
    int M -> U
    org.objectweb.asm.Label N -> V
    org.objectweb.asm.Label O -> W
    org.objectweb.asm.Label P -> X
    int Q -> Y
    int R -> Z
    void visitParameter(java.lang.String,int) -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotationDefault() -> a
    org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> a
    org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean) -> a
    void visitAttribute(org.objectweb.asm.Attribute) -> a
    void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[]) -> a
    void visitInsn(int) -> a
    void visitIntInsn(int,int) -> a
    void visitVarInsn(int,int) -> b
    void visitTypeInsn(int,java.lang.String) -> a
    void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String) -> a
    void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[]) -> a
    void visitJumpInsn(int,org.objectweb.asm.Label) -> a
    void visitLabel(org.objectweb.asm.Label) -> a
    void visitLdcInsn(java.lang.Object) -> a
    void visitIincInsn(int,int) -> c
    void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[]) -> a
    void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[]) -> a
    void a(org.objectweb.asm.Label,org.objectweb.asm.Label[]) -> a
    void visitMultiANewArrayInsn(java.lang.String,int) -> b
    org.objectweb.asm.AnnotationVisitor visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> b
    void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String) -> a
    org.objectweb.asm.AnnotationVisitor visitTryCatchAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean) -> c
    void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int) -> a
    org.objectweb.asm.AnnotationVisitor visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean) -> a
    void visitLineNumber(int,org.objectweb.asm.Label) -> b
    void visitMaxs(int,int) -> d
    void a(int,org.objectweb.asm.Label) -> c
    void e() -> c
    void b(org.objectweb.asm.Frame) -> a
    int a(int,int,int) -> a
    void b() -> d
    void a(int,int) -> e
    void a(java.lang.Object) -> b
    int a() -> b
    void a(org.objectweb.asm.ByteVector) -> a
    int c(byte[],int) -> a
    short b(byte[],int) -> b
    int a(byte[],int) -> c
    void a(byte[],int,int) -> a
    int a(int[],int[],int,int) -> a
    void a(int[],int[],org.objectweb.asm.Label) -> a
org.objectweb.asm.Opcodes -> a.a.a.s:
    java.lang.Integer TOP -> a
    java.lang.Integer INTEGER -> b
    java.lang.Integer FLOAT -> c
    java.lang.Integer DOUBLE -> d
    java.lang.Integer LONG -> e
    java.lang.Integer NULL -> f
    java.lang.Integer UNINITIALIZED_THIS -> g
org.objectweb.asm.Type -> a.a.a.t:
    org.objectweb.asm.Type VOID_TYPE -> i
    org.objectweb.asm.Type BOOLEAN_TYPE -> a
    org.objectweb.asm.Type CHAR_TYPE -> b
    org.objectweb.asm.Type BYTE_TYPE -> c
    org.objectweb.asm.Type SHORT_TYPE -> d
    org.objectweb.asm.Type INT_TYPE -> e
    org.objectweb.asm.Type FLOAT_TYPE -> f
    org.objectweb.asm.Type LONG_TYPE -> g
    org.objectweb.asm.Type DOUBLE_TYPE -> h
    int a -> j
    char[] b -> k
    int c -> l
    int d -> m
    org.objectweb.asm.Type getType(java.lang.String) -> a
    org.objectweb.asm.Type getObjectType(java.lang.String) -> b
    org.objectweb.asm.Type getMethodType(java.lang.String) -> c
    org.objectweb.asm.Type[] getArgumentTypes(java.lang.String) -> d
    int getArgumentsAndReturnSizes(java.lang.String) -> e
    org.objectweb.asm.Type a(char[],int) -> a
    int getSort() -> a
    java.lang.String getInternalName() -> b
    java.lang.String getDescriptor() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.objectweb.asm.TypePath -> a.a.a.u:
    byte[] a -> a
    int b -> b
    java.lang.String toString() -> toString
org.objenesis.instantiator.ObjectInstantiator -> a.b.a.a:
    java.lang.Object newInstance() -> a
org.objenesis.strategy.InstantiatorStrategy -> a.b.b.a:
    org.objenesis.instantiator.ObjectInstantiator newInstantiatorOf(java.lang.Class) -> a
